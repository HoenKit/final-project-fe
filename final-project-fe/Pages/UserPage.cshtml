@page
@model final_project_fe.Pages.UserPageModel
@{
	ViewData["Title"] = "Phronesis - User Page";
}
@{
	var token = HttpContext.Request.Cookies["AccessToken"];
}
<div class="theme-layout">
	<!-- Profile Header -->
	<div class="profile-header">
		<div class="d-flex justify-content-between align-items-start">
			<div class="avtar-header">
				<div class="profile-content">
					<div class="profile-avatar-card">
						@if (Model.Profile?.UserMetaData != null)
						{
							<img src="@Model.Profile.UserMetaData?.Avatar ?? " https://cdn-icons-png.flaticon.com/512/149/149071.png""
								 alt="Avatar" class="profile-avatar rounded-circle shadow" width="120" height="120" />
							<h4 class="profile-name mt-4">
								@($"{Model.Profile.UserMetaData?.FirstName} {Model.Profile.UserMetaData?.LastName}")
							</h4>
						}
						<div class="social-links">
							<a href="#" class="social-link facebook">
								<i class="bi bi-facebook"></i>
							</a>
							<a href="#" class="social-link linkedin">
								<i class="bi bi-linkedin"></i>
							</a>
							<a href="#" class="social-link youtube">
								<i class="bi bi-youtube"></i>
							</a>
						</div>
					</div>
				</div>
			</div>
			@if (Model.IsOwnUser)
			{
				<div class="d-flex" style="width: 44%; margin-right: -3%;">
				<!-- Points Card -->
				<div class="col-5">
					<div class="card subscription-card bg-white text-dark shadow-sm h-100 mb-3">
						<div style="color: #000;" class="card-body d-flex flex-column justify-content-between">
							<div class="d-flex justify-content-between align-items-start">
								<div>
									<small>Your Points</small>
									<h3 class="mt-1">@(Model.Profile?.Point?.ToString("N0") ?? "0")</h3>
								</div>
								<i style="font-size:150%" class="bi bi-p-circle"></i>
							</div>
							<a class="btn btn-outline-dark btn-sm rounded-pill mt-3 w-fit" asp-area="" asp-page="/PointTransaction">
								Buy Points
							</a>
						</div>
					</div>
				</div>
				<!-- MemberShip Card -->
				<div class="col-6">
					@if (Model.Profile.IsPremium == false)
					{
						<div class="card subscription-card bg-dark text-white shadow-sm h-100 mb-3">
							<div style="color: #ffff;" class="card-body d-flex flex-column justify-content-between">
								<div class="d-flex justify-content-between align-items-start">
									<div>
										<small>MemberShip</small>
										<h3 class="mt-1">Free Member</h3>
									</div>
									<i class="bi bi-person-badge-fill fs-3"></i>
								</div>
								<a href="/UpdatePremium" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
									Upgrade to Premium
								</a>
							</div>
						</div>
					}
					else
					{
						<div class="card upgrade-card text-white text-decoration-none shadow-sm h-100">
							<div style="color:#ffff" class="card-body d-flex flex-column justify-content-center align-items-center">
								<div>
									<small>MemberShip</small>
								</div>
								<i style="color:#ffff" class="bi bi-gem fs-2"></i>
								<a href="#" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
									Premium Member
								</a>
							</div>
						</div>
					}
				</div>
			</div>
			}
		</div>
	</div>
	<section>
		<div class="gap gray-bg">
			<div class="container-fluid">
				<div class="row">
					<div class="col-lg-12">
						<div class="row" id="page-contents">
							<div class="col-lg-3">
								<aside class="sidebar">
									<div class="widget">
										<h4 class="widget-title">Shortcuts</h4>
										<ul class="naves">
											<li>
												<i class="ti-clipboard"></i>
												<a asp-page="/Index" title="">News feed</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-mortarboard"></i>
												<a asp-page="/Mentor/MentorPage/Index" title="">Courses</a>
											</li>
											@* <li style="display:flex">
												<i class="bi bi-person"></i>
												<a class="active" asp-page="/UserPage" title="" data-ripple="">Page</a>
											</li> *@
											@if (Model.IsOwnUser)
											{
												<!-- Nếu là trang của mình thì không cần truyền userId -->
												<li style="display:flex">
													<i class="bi bi-info-circle"></i>
													<a class="active" asp-page="/UserProfile" data-tab="about">About me</a>
												</li>
											}
											else
											{
												<!-- Nếu là trang của người khác thì truyền thêm userId -->
												<li style="display:flex">
													<i class="bi bi-info-circle"></i>
													<a class="active" asp-page="/UserProfile" asp-route-userId="@Request.Query["userId"]" data-tab="about">About @Model.Profile?.UserMetaData?.FirstName</a>
												</li>
											}
										</ul>
									</div><!-- Shortcuts -->
									<div class="widget">
											<div class="advertisment-box">
												<figure>
												<a href="#" title="Advertisment"><img src="https://travarsa.com/wp-content/uploads/2023/04/Soft-Skills-Training-and-Certification%E2%80%8B.jpg" alt=""></a>
												</figure>
											</div>
									</div><!-- recent activites -->
								</aside>
							</div><!-- sidebar -->
							<div class="col-lg-6">
								<!-- add post new box -->
								@* <div class="central-meta item"> *@
								<div class="user-post">
									<!-- Posts container -->
									<div class="posts-container">
										@if (Model.Posts != null && Model.Posts.Items.Any())
										{
											@foreach (var post in Model.Posts.Items.OrderByDescending(p => p.CreateAt))
											{
												<!-- Single post container -->
												<div class="card p-3 mb-3 shadow-sm rounded">
													<!-- Post content -->
													<div class="friend-info">
														<figure>
															<img src="@(string.IsNullOrEmpty(post.User?.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : post.User?.UserMetaData.Avatar)"
																 alt="User Avatar">

														</figure>

														<div class="post-meta">
															<div class="mb-2">
																@{
																	var category = Model.Categories.Items.FirstOrDefault(c => c.CategoryId == post.CategoryId);
																}
																@if (category != null)
																{
																	<span class="badge bg-primary text-white px-2 py-1 rounded-pill">#@category.Title</span>
																}
															</div>
															<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
																@post.Title
															</p>
														</div>


														<div class="friend-name">
															<ins>
																<a href="time-line.html" title="">
																	@((post.User?.UserMetaData != null) ? $"{post.User.UserMetaData.FirstName} {post.User.UserMetaData.LastName}" : post.User?.Email)
																</a>
															</ins>
															<span>@post.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
															@if (!string.IsNullOrEmpty(token))
															{
																<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
																	<div class="dropdown">
																		<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
																			<i class="fa fa-ellipsis-v"></i>
																		</button>
																		<ul class="dropdown-menu">
																			<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="@post.PostId">Report Post</a></li>
																			<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="@post.User?.UserId">Report User</a></li>
																			<!-- Nút bấm hiển thị modal -->
																			@if (post.User != null && post.User.UserId.ToString() == Model.CurrentUserId)
																			{
																				@if (Model.IsOwnUser)
																				{
																					<li>
																						<a class="dropdown-item text-primary update-post"
																						   href="#"
																						   data-bs-toggle="modal"
																						   data-bs-target="#editPostModal"
																						   data-post-id="@post.PostId">
																							Update Post
																						</a>
																					</li>
																					<li>
																						<form method="post" asp-page-handler="Delete" asp-route-postId="@post.PostId"
																							  onsubmit="return confirm('Are you sure you want to delete this post?');">
																							<button type="submit" class="dropdown-item text-danger delete-post">Delete Post</button>
																						</form>
																					</li>
																				}
																			}
																		</ul>
																		<!-- Modal cập nhật -->
																		<div class="modal fade" id="editPostModal" tabindex="-1" aria-labelledby="editPostModalLabel" aria-hidden="true">
																			<div class="modal-dialog">
																				<form method="post" asp-page-handler="UpdatePost" enctype="multipart/form-data">
																					<!-- hoặc form handler phù hợp -->
																					<div class="modal-content">
																						<div class="modal-header">
																							<h5 class="modal-title">Update Post</h5>
																							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
																						</div>
																						<div class="modal-body">
																							<input type="hidden" id="editPostId" asp-for="NewPost.PostId" />
																							<div class="mb-3">
																								<label asp-for="NewPost.Title" class="form-label"></label>
																								<input asp-for="NewPost.Title" class="form-control" />
																							</div>
																							<div class="mb-3">
																								<label asp-for="NewPost.Content" class="form-label"></label>
																								<textarea asp-for="NewPost.Content" class="form-control"></textarea>
																							</div>
																							<div class="mb-3">
																								<label asp-for="NewPost.CategoryId" class="form-label">Category</label>
																								<select asp-for="NewPost.CategoryId" class="form-control">
																									<option value="">-- Select Category --</option>
																									@if (Model.Categories?.Items != null)
																									{
																										foreach (var category in Model.Categories.Items)
																										{
																											<option value="@category.CategoryId">
																												@category.Title
																											</option>
																										}
																									}
																								</select>
																							</div>
																							<div class="mb-3">
																								<label class="form-label">Add Files (optional)</label>
																								<input type="file" asp-for="NewPost.PostFileLinks" accept="image/*,video/*" multiple class="form-control" />
																							</div>
																						</div>
																						<div class="modal-footer">
																							<button type="submit" class="btn btn-primary">Update Post</button>
																							<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
																						</div>
																					</div>
																				</form>
																			</div>
																		</div>


																	</div>
																</div>
															}
														</div>

														<div class="post-meta">
															@* 	@if (Model.PostFilesByPost.ContainsKey(post.PostId) && Model.PostFilesByPost[post.PostId].Any(f => f.PostFileType.ToLower() == "image" || f.PostFileType.ToLower() == "video"))
																				{
																					@foreach (var file in Model.PostFilesByPost[post.PostId])
																					{
																						@if (file.PostFileType.ToLower() == "image")
																						{
																							<img src="@file.FileUrl" alt="Post Image" width="400" />
																						}
																						else if (file.PostFileType.ToLower() == "video")
																						{
																							<iframe src="@file.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																						}
																					}
																				} *@
															@* 	else
																				{
																					<img src="https://toigingiuvedep.vn/wp-content/uploads/2021/06/hinh-anh-bau-troi-dem-day-sao-tuyet-dep-cho-may-tinh.jpg"
																						 alt="Default Post Image" width="400" />
																				} *@


															@if (post.PostFiles != null && post.PostFiles.Any())
															{
																foreach (var postFile in post.PostFiles)
																{
																	if (postFile.PostFileType.ToLower() == "image")
																	{
																		<img src="@postFile.FileUrl" alt="Post Image" width="400" />
																	}
																	else
																	{
																		<video width="100%" height="315" controls>
																			<source src="@postFile.FileUrl" type="video/mp4">
																			Your browser does not support the video tag.
																		</video>

																	}
																}
															}

															<div class="description">
																<p>@post.Content</p>
															</div>
														</div>

														<!-- Comment section -->
														<div class="comments-section" id="commentList-@post.PostId">
															@if (Model.CommentsByPost.ContainsKey(post.PostId))
															{
																var comments = Model.CommentsByPost[post.PostId];
																var parentComments = comments.Where(c => c.ParentCommentId == null).OrderBy(c => c.CreateAt);

																foreach (var parent in parentComments)
																{
																	// Comment gốc
																	var user = parent.User;
																	var userMeta = user?.UserMetaData;
																	var avatar = string.IsNullOrEmpty(userMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : userMeta.Avatar;
																	var displayName = userMeta != null ? $"{userMeta.FirstName} {userMeta.LastName}" : user?.Email;

																	<div class="comment" data-comment-id="@parent.CommentId">
																		<div class="comet-avatar">
																			<img src="@avatar" alt="User Avatar">
																		</div>
																		<div class="we-comment">
																			<div class="coment-head">
																				<h5><a href="#">@displayName</a></h5>
																				<span>@parent.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																				@if (!string.IsNullOrEmpty(token))
																				{
																					<a class="we-reply" href="javascript:void(0)" data-reply-to="@parent.CommentId"><i class="fa fa-reply"></i></a>
																				}
																			</div>
																			<p>@parent.Content</p>
																			@if (!string.IsNullOrEmpty(token))
																			{
																				<div class="reply-form" style="display:none; margin-top: 10px;">
																					<form class="comment-form">
																						<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																						<input type="hidden" name="NewComment.ParentCommentId" value="@parent.CommentId" />
																						<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																						<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																					</form>
																				</div>
																			}
																		</div>
																	</div>

																	// Hiển thị reply cấp 1
																	var firstLevelReplies = comments.Where(c => c.ParentCommentId == parent.CommentId).OrderBy(c => c.CreateAt);
																	foreach (var reply in firstLevelReplies)
																	{
																		var replyUser = reply.User;
																		var replyMeta = replyUser?.UserMetaData;
																		var replyAvatar = string.IsNullOrEmpty(replyMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : replyMeta.Avatar;
																		var replyName = replyMeta != null ? $"{replyMeta.FirstName} {replyMeta.LastName}" : replyUser?.Email;

																		<div class="comment reply-comment ms-5" data-comment-id="@reply.CommentId" data-parent-id="@parent.CommentId">
																			<div class="comet-avatar">
																				<img src="@replyAvatar" alt="User Avatar">
																			</div>
																			<div class="we-comment">
																				<div class="coment-head">
																					<h5><a href="#">@replyName</a></h5>
																					<span>@reply.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																					@if (!string.IsNullOrEmpty(token))
																					{
																						<a class="we-reply" href="javascript:void(0)" data-reply-to="@reply.CommentId"><i class="fa fa-reply"></i></a>
																					}
																				</div>
																				<p>@reply.Content</p>
																				@if (!string.IsNullOrEmpty(token))
																				{
																					<div class="reply-form" style="display:none; margin-top: 10px;">
																						<form class="comment-form">
																							<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																							<input type="hidden" name="NewComment.ParentCommentId" value="@reply.CommentId" />
																							<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																							<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																						</form>
																					</div>
																				}
																			</div>
																		</div>

																		// reply of reply
																		var secondLevelReplies = comments.Where(c => c.ParentCommentId == reply.CommentId).OrderBy(c => c.CreateAt);
																		foreach (var level2 in secondLevelReplies)
																		{
																			var level2User = level2.User;
																			var level2Meta = level2User?.UserMetaData;
																			var level2Avatar = string.IsNullOrEmpty(level2Meta?.Avatar) ? "images/resources/friend-avatar9.jpg" : level2Meta.Avatar;
																			var level2Name = level2Meta != null ? $"{level2Meta.FirstName} {level2Meta.LastName}" : level2User?.Email;

																			<div class="comment reply-comment ms-5" data-comment-id="@level2.CommentId" data-parent-id="@level2.ParentCommentId">
																				<div class="comet-avatar">
																					<img src="@level2Avatar" alt="User Avatar">
																				</div>
																				<div class="we-comment">
																					<div class="coment-head">
																						<h5><a href="#">@level2Name</a></h5>
																						<span>@level2.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																						@if (!string.IsNullOrEmpty(token))
																						{
																							<a class="we-reply" href="javascript:void(0)" data-reply-to="@level2.CommentId"><i class="fa fa-reply"></i></a>
																						}
																					</div>
																					<p>@level2.Content</p>
																					@if (!string.IsNullOrEmpty(token))
																					{
																						<div class="reply-form" style="display:none; margin-top: 10px;">
																							<form class="comment-form">
																								<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																								<input type="hidden" name="NewComment.ParentCommentId" value="@level2.CommentId" />
																								<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																								<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																							</form>
																						</div>
																					}
																				</div>
																			</div>
																		}
																	}
																}
															}
															else
															{
																<p>No comments available.</p>
															}
														</div>

														<!-- Comment input form -->
														@if (!string.IsNullOrEmpty(token))
														{
															<!-- Comment input form -->
															<div class="coment-area">
																<ul class="we-comet">
																	<li class="post-comment">
																		<div class="comet-avatar">
																			<img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
																		</div>
																		<div class="post-comt-box">
																			<form class="comment-form">
																				<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																				<input type="hidden" name="NewComment.ParentCommentId" />
																				<label>Comment:</label>
																				<textarea name="NewComment.Content" placeholder="Write a comment..."></textarea>
																				<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
																			</form>
																		</div>
																	</li>
																</ul>
															</div>
														}
													</div>
												</div>
											}
											@* <div class="pagination mt-3">
															<p>Page @Model.Posts.CurrentPage / @Model.Posts.TotalPages</p>
															<!-- Add pagination controls here if needed -->
														</div> *@
										}
										else
										{
											<div class="alert alert-info">No posts available.</div>
										}
									</div>
								</div>
								<button class="btn-view btn-load-more">Load More</button>
							</div><!-- centerl meta -->

							<div class="col-lg-3">
								<aside class="sidebar">
									<h4 class="">Advertisment</h4>
									<div class="widget">
										<div class="advertisment-box">
											<figure>
												<a href="#" title="Advertisment"><img src="https://nisteducation.com/wp-content/uploads/2025/01/136-1.jpg" alt=""></a>
											</figure>
										</div>
									</div>
									<div class="widget">
										<div class="advertisment-box">
											<h4 class=""></h4>
											<figure>
												<a href="#" title="Advertisment"><img src="https://media.licdn.com/dms/image/v2/D4D22AQEUnXKj6NtXgA/feedshare-shrink_2048_1536/feedshare-shrink_2048_1536/0/1695712692412?e=2147483647&v=beta&t=3LYX7m3F3jFsaL9iouoMmkqIl2AbCIGWLZO31X1h1T4" alt=""></a>
											</figure>
										</div>
									</div>
								</aside>
							</div><!-- sidebar -->

						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>
<!-- Report Post Modal -->
<div class="modal fade" id="reportPostModal" tabindex="-1" aria-labelledby="reportPostModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportPostModalLabel">Report Post</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportPostForm">
					<input type="hidden" id="reportPostId" name="PostId">
					<input type="hidden" id="reportPostUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportPostContent" class="form-label">Why are you reporting this post?</label>
						<textarea class="form-control" id="reportPostContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Report Comment Modal -->
<div class="modal fade" id="reportCommentModal" tabindex="-1" aria-labelledby="reportCommentModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportCommentModalLabel">Report Comment</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportCommentForm">
					<input type="hidden" id="reportCommentId" name="CommentId">
					<input type="hidden" id="reportCommentUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportCommentContent" class="form-label">Why are you reporting this comment?</label>
						<textarea class="form-control" id="reportCommentContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Report User Modal -->
<div class="modal fade" id="reportUserModal" tabindex="-1" aria-labelledby="reportUserModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportUserModalLabel">Report User</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportUserForm">
					<input type="hidden" id="reportUserreportedId" name="UserreportedId">
					<input type="hidden" id="reportUserUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportUserContent" class="form-label">Why are you reporting this user?</label>
						<textarea class="form-control" id="reportUserContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			var editModal = document.getElementById('editPostModal');
		if (!editModal) return;
		editModal.addEventListener('show.bs.modal', async function (event) {
				var button = event.relatedTarget;
				var postId = button.getAttribute('data-post-id');

				try {
					// Gọi đến handler OnGetPostByIdAsync
					const response = await fetch(`/UserPage?handler=PostById&postId=${postId}`);
					if (!response.ok) throw new Error('Lỗi khi fetch dữ liệu bài viết');

					const post = await response.json();

					// Fill vào modal
					document.getElementById('editPostId').value = post.postId;
					document.querySelector('[name="NewPost.Title"]').value = post.title;
					document.querySelector('[name="NewPost.Content"]').value = post.content;
				document.querySelector('[name="NewPost.CategoryId"]').value = post.categoryId;

				} catch (error) {
					console.error('Lỗi khi tải bài viết:', error);
				}
			});
		});
	</script>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const searchInput = document.getElementById("searchInput");
			const searchBtn = document.getElementById("searchBtn");
			const resultsContainer = document.getElementById("searchResults");
			let debounceTimer;

			const baseUrl = "@Model.BaseUrl";

			async function doSearch(isSuggestion = false) {
				const term = searchInput.value.trim();
				if (!term) {
					resultsContainer.innerHTML = "";
					return;
				}

				try {
					const response = await fetch(`${baseUrl}/Post/search-all?searchTerm=${encodeURIComponent(term)}&searchType=all`);
					if (!response.ok) throw new Error("Search failed");
					const data = await response.json();

					let html = "";

					// Users
					if (data.users && data.users.length > 0) {
						html += `<li class="list-group-item fw-bold bg-light">Users</li>`;
						data.users.forEach(u => {
							const firstName = u.userMetaData?.firstName || "";
							const lastName = u.userMetaData?.lastName || "";
							const email = u.email || "Unknown";
							const displayName = firstName || lastName ? `${firstName} ${lastName}`.trim() : email;

							html += `
								<li class="list-group-item search-item" data-type="user" data-id="${u.userId}">
									<i class="ti-user me-2"></i>
									${displayName}
									<small class="text-muted">(${email})</small>
								</li>`;
						});
					}

					// Courses
					if (data.courses && data.courses.length > 0) {
						html += `<li class="list-group-item fw-bold bg-light">Courses</li>`;
						data.courses.forEach(c => {
							html += `
								<li class="list-group-item search-item" data-type="course" data-id="${c.courseId}">
									<i class="ti-book me-2"></i> ${c.courseName || "Untitled Course"}
								</li>`;
						});
					}

					// Posts
					if (data.posts && data.posts.length > 0) {
						html += `<li class="list-group-item fw-bold bg-light">Posts</li>`;
						data.posts.forEach(p => {
							html += `
								<li class="list-group-item search-item" data-type="post" data-id="${p.postId}">
									<i class="ti-pencil-alt me-2"></i> ${p.title || "Untitled Post"}
								</li>`;
						});
					}

					resultsContainer.innerHTML = html || `<li class="list-group-item">No results found</li>`;

					// Gắn sự kiện click cho các item
					document.querySelectorAll(".search-item").forEach(item => {
						item.addEventListener("click", function () {
							const type = this.getAttribute("data-type");
							const id = this.getAttribute("data-id");

							if (type === "user") {
								window.location.href = `/UserPage?userId=${id}`;
							} else if (type === "course") {
								window.location.href = `/Mentor/MentorPage/CourseDetail?courseId=${id}`;
							} else if (type === "post") {
								showPostModal(id);
								resultsContainer.innerHTML = "";
								searchInput.value = "";
							}
						});
					});
				} catch (err) {
					console.error(err);
					resultsContainer.innerHTML = `<li class="list-group-item text-danger">Error searching</li>`;
				}
			}

			// Hàm hiển thị modal chi tiết bài post
			async function showPostModal(postId) {
				const modal = new bootstrap.Modal(document.getElementById('postDetailModal'));
				const modalBody = document.getElementById('postModalBody');

				// Hiển thị loading
				modalBody.innerHTML = `
					<div class="d-flex justify-content-center">
						<div class="spinner-border" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					</div>
				`;

				modal.show();

				try {
					// Tìm post trong trang hiện tại trước
					const postElements = document.querySelectorAll('[data-post-id="' + postId + '"]');
					let postFound = false;

					if (postElements.length > 0) {
						const postContainer = postElements[0].closest('.card');
						if (postContainer) {
							const postClone = postContainer.cloneNode(true);

							// Loại bỏ các element không cần thiết trong modal
							const dropdownMenus = postClone.querySelectorAll('.dropdown');
							dropdownMenus.forEach(menu => menu.remove());

							const commentForms = postClone.querySelectorAll('.comment-form');
							commentForms.forEach(form => form.remove());

							modalBody.innerHTML = postClone.outerHTML;
							postFound = true;
						}
					}

					// Nếu không tìm thấy trong DOM, gọi API để lấy full data
					if (!postFound) {
						try {
							// Gọi API GetDetail với endpoint mới
							const response = await fetch(`${baseUrl}/Post/GetDetail/${postId}`);
							if (response.ok) {
								const postData = await response.json();
								displayPostFromAPI(postData);
							} else {
								throw new Error(`HTTP ${response.status}: Post not found`);
							}
						} catch (apiError) {
							console.log("API call failed:", apiError);
							modalBody.innerHTML = `
								<div class="alert alert-warning">
									<i class="ti-info-alt me-2"></i>
									Unable to load post details. ${apiError.message}
									<br><br>
									<small class="text-muted">Post ID: ${postId}</small>
									<br>
									<button class="btn btn-sm btn-primary mt-2" onclick="window.location.reload()">
										Try again
									</button>
								</div>
							`;
						}
					}

				} catch (error) {
					console.error('Error loading post details:', error);
					modalBody.innerHTML = `
						<div class="alert alert-danger">
							<i class="ti-alert-circle me-2"></i>
							Error loading post details. Please try again later.
							<br><br>
							<small class="text-muted">Error: ${error.message}</small>
						</div>
					`;
				}
			}

			// Hàm hiển thị post từ API data theo cấu trúc mới
			function displayPostFromAPI(post) {
				const modalBody = document.getElementById('postModalBody');

				// Xử lý thông tin user từ cấu trúc API mới
				const userAvatar = post.avatar || 'images/resources/friend-avatar9.jpg';
				const userFirstName = post.firstName || '';
				const userLastName = post.lastName || '';
				const displayName = `${userFirstName} ${userLastName}`.trim() || 'Anonymous User';

				// Xử lý thời gian
				const createDate = post.createAt || new Date().toISOString();
				const formattedDate = new Date(createDate).toLocaleDateString('vi-VN');
				const formattedTime = new Date(createDate).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'});

				// Xử lý category
				const categoryHtml = post.categoryName ?
									`<div class="mb-2"><span class="badge bg-primary text-white px-2 py-1 rounded-pill">#${post.categoryName}</span></div>` :
									'';

				// Xử lý files/media
				let mediaHtml = '';
				if (post.postFiles && post.postFiles.length > 0) {
					mediaHtml = post.postFiles.map(file => {
						const fileType = file.postFileType || file.fileType || '';
						const fileUrl = file.fileUrl || file.url || '';

						if (fileType.toLowerCase().includes('image') || fileUrl.match(/\.(jpg|jpeg|png|gif|webp)$/i)) {
							return `<img src="${fileUrl}?sp=r&st=2025-05-28T06:11:09Z&se=2026-01-01T14:11:09Z&spr=https&sv=2024-11-04&sr=c&sig=YdDYGbzpNp4XPSKVVDM0bb411XOEPgA8b0i2PFCfc1c%3D" alt="Post Image" class="img-fluid mb-3" style="max-width: 100%; height: auto;">`;
						} else if (fileType.toLowerCase().includes('video') || fileUrl.match(/\.(mp4|webm|ogg)$/i)) {
							return `<video width="100%" controls class="mb-3">
										<source src="${fileUrl}?sp=r&st=2025-05-28T06:11:09Z&se=2026-01-01T14:11:09Z&spr=https&sv=2024-11-04&sr=c&sig=YdDYGbzpNp4XPSKVVDM0bb411XOEPgA8b0i2PFCfc1c%3D" type="video/mp4">
										Your browser does not support the video tag.
									</video>`;
						} else {
							return `<a href="${fileUrl}?sp=r&st=2025-05-28T06:11:09Z&se=2026-01-01T14:11:09Z&spr=https&sv=2024-11-04&sr=c&sig=YdDYGbzpNp4XPSKVVDM0bb411XOEPgA8b0i2PFCfc1c%3D" target="_blank" class="btn btn-outline-primary btn-sm mb-2">
										<i class="ti-download me-1"></i>Download File
									</a>`;
						}
					}).join('');
				}

				// Xử lý comments theo cấu trúc mới
				let commentsHtml = '';
				if (post.comments && post.comments.length > 0) {
					// Lọc comments chính (không có parentCommentId)
					const parentComments = post.comments.filter(c => !c.parentCommentId);

					commentsHtml = parentComments.map(comment => {
						// Tìm replies cho comment này
						const replies = post.comments.filter(r => r.parentCommentId === comment.commentId);

						const commentUserAvatar = comment.avatar || 'images/resources/friend-avatar9.jpg';
						const commentUserName = `${comment.firstName || ''} ${comment.lastName || ''}`.trim() || 'Anonymous';

						let repliesHtml = '';
						if (replies.length > 0) {
							repliesHtml = replies.map(reply => {
								const replyUserAvatar = reply.avatar || 'images/resources/friend-avatar9.jpg';
								const replyUserName = `${reply.firstName || ''} ${reply.lastName || ''}`.trim() || 'Anonymous';

								return `
									<div class="comment-reply ms-4 mt-2">
										<div class="d-flex">
											<div class="comet-avatar me-2">
												<img src="${replyUserAvatar}" alt="User Avatar" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;">
											</div>
											<div class="we-comment flex-grow-1">
												<div class="coment-head">
													<h6 class="mb-1"><a href="#" class="text-decoration-none">${replyUserName}</a></h6>
												</div>
												<p class="mb-1">${reply.content || ''}</p>
											</div>
										</div>
									</div>
								`;
							}).join('');
						}

						return `
							<div class="comment mb-3">
								<div class="d-flex">
									<div class="comet-avatar me-2">
										<img src="${commentUserAvatar}" alt="User Avatar" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
									</div>
									<div class="we-comment flex-grow-1">
										<div class="coment-head">
											<h5 class="mb-1"><a href="#" class="text-decoration-none">${commentUserName}</a></h5>
										</div>
										<p class="mb-2">${comment.content || ''}</p>
										${repliesHtml}
									</div>
								</div>
							</div>
						`;
					}).join('');
				} else {
					commentsHtml = '<p class="text-muted">No comments yet.</p>';
				}

				let postHtml = `
					<div class="card border-0">
						<div class="friend-info">
							<div class="d-flex mb-3">
								<figure class="me-3">
									<img src="${userAvatar}" alt="User Avatar" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;">
								</figure>

								<div class="flex-grow-1">
									<div class="friend-name">
										<ins>
											<a href="#" class="text-decoration-none fw-bold">${displayName}</a>
										</ins>
										<div>
											<span class="text-muted small">${formattedDate} ${formattedTime}</span>
										</div>
									</div>
								</div>
							</div>

							<div class="post-meta">
								${categoryHtml}
								<h4 class="mb-3" style="color: #333; font-weight: 600;">
									${post.title || 'Untitled Post'}
								</h4>

								${mediaHtml}

								<div class="description">
									<div style="white-space: pre-line; line-height: 1.6;">
										${post.content || 'No content available'}
									</div>
								</div>
							</div>

							<hr>

							<div class="comments-section mt-4">
								<h6 class="mb-3">
									<i class="ti-comment me-1"></i>
									Comments (${post.comments ? post.comments.filter(c => !c.parentCommentId).length : 0})
								</h6>
								<div class="comments-list">
									${commentsHtml}
								</div>
							</div>
						</div>
					</div>
				`;

				modalBody.innerHTML = postHtml;
			}

			// Event listeners
			searchBtn.addEventListener("click", () => doSearch(false));
			searchInput.addEventListener("keyup", function (e) {
				if (e.key === "Enter") doSearch(false);
			});

			// Suggestion khi gõ với debounce
			searchInput.addEventListener("input", function () {
				clearTimeout(debounceTimer);
				debounceTimer = setTimeout(() => {
					doSearch(true);
				}, 300);
			});
		});
	</script>


	<script>

		// Configuration from Razor model
		const BASE_URL = "@Model.BaseUrl";

		// Create toast notification system - replaces the old alert system
		function showToast(message, type = "success") {
			// Create toast container if it doesn't exist yet
			let toastContainer = document.getElementById("toast-container");
			if (!toastContainer) {
				toastContainer = document.createElement("div");
				toastContainer.id = "toast-container";
				toastContainer.className = "position-fixed bottom-0 end-0 p-3";
				toastContainer.style.zIndex = "1050";
				document.body.appendChild(toastContainer);
			}

			// Create unique ID for this toast
			const toastId = "toast-" + Date.now();

			// Create the toast element with auto-hide enabled
			const toastEl = document.createElement("div");
			toastEl.id = toastId;
			toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
			toastEl.setAttribute("role", "alert");
			toastEl.setAttribute("aria-live", "assertive");
			toastEl.setAttribute("aria-atomic", "true");
			toastEl.setAttribute("data-bs-autohide", "true");
			toastEl.setAttribute("data-bs-delay", "3000");

			// Create toast content (without close button for auto-closing)
			toastEl.innerHTML = `
					<div class="d-flex">
					  <div class="toast-body">
						${message}
					  </div>
					</div>
				  `;

			// Add to container
			toastContainer.appendChild(toastEl);

			// Initialize and show the toast using jQuery if available
			if (typeof $ !== 'undefined') {
				$(toastEl).toast('show');
			} else {
				// Use the bootstrap object if available
				if (typeof bootstrap !== 'undefined' && typeof bootstrap.Toast !== 'undefined') {
					const bsToast = new bootstrap.Toast(toastEl, {
						autohide: true,
						delay: 3000
					});
					bsToast.show();
				} else {
					// Last resort - manual display if Bootstrap JS is not properly loaded
					toastEl.classList.add('show');
					setTimeout(() => {
						toastEl.classList.remove('show');
						setTimeout(() => toastEl.remove(), 150);
					}, 3000);
				}
			}

			// Ensure toast is removed after 3.5 seconds regardless of BS implementation
			setTimeout(() => {
				if (document.getElementById(toastId)) {
					document.getElementById(toastId).remove();
				}
			}, 3500);
		}

		// Handle Report Post Form Submission
		document.getElementById("reportPostForm").addEventListener("submit", async function (event) {
			event.preventDefault(); // Prevent form submission (page refresh)

			const postId = parseInt(document.getElementById("reportPostId").value);
			const userId = '@Model.CurrentUserId';
			const content = document.getElementById("reportPostContent").value;

			if (!content.trim()) {
				showToast("Please provide a reason for reporting this post.", "danger");
				return;
			}

			try {
				const response = await fetch(`${BASE_URL}/ReportPost`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify({
						reportId: 0, // The server will assign this
						postId: postId,
						userId: userId,
						content: content
					})
				});

				if (response.ok) {
					// Close modal using jQuery if available (compatible with most Bootstrap versions)
					if (typeof $ !== 'undefined') {
						$("#reportPostModal").modal('hide');
					} else {
						// Direct DOM manipulation fallback
						const modalElement = document.getElementById("reportPostModal");
						modalElement.classList.remove('show');
						modalElement.setAttribute('aria-hidden', 'true');
						modalElement.style.display = 'none';

						// Remove backdrop if it exists
						const backdrop = document.querySelector('.modal-backdrop');
						if (backdrop) backdrop.remove();

						// Clean up body
						document.body.classList.remove('modal-open');
						document.body.style.overflow = '';
						document.body.style.paddingRight = '';
					}

					// Clear the form for future use
					document.getElementById("reportPostContent").value = "";

					// Show success message
					showToast("Post reported successfully!");
				} else {
					const errorData = await response.json();
					showToast(`Error reporting post: ${errorData.message || response.statusText}`, "danger");
				}
			} catch (error) {
				showToast(`Error reporting post: ${error.message}`, "danger");
			}
		});

		// Handle Report Comment Form Submission
		document.getElementById("reportCommentForm").addEventListener("submit", async function (event) {
			event.preventDefault(); // Prevent form submission (page refresh)

			const commentId = parseInt(document.getElementById("reportCommentId").value);
			const userId = '@Model.CurrentUserId';
			const content = document.getElementById("reportCommentContent").value;

			if (!content.trim()) {
				showToast("Please provide a reason for reporting this comment.", "danger");
				return;
			}

			try {
				const response = await fetch(`${BASE_URL}/ReportComment`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify({
						commentId: commentId, // The server will assign this
						userId: userId,
						content: content
					})
				});

				if (response.ok) {
					// Close modal using jQuery if available (compatible with most Bootstrap versions)
					if (typeof $ !== 'undefined') {
						$("#reportCommentModal").modal('hide');
					} else {
						// Direct DOM manipulation fallback
						const modalElement = document.getElementById("reportCommentModal");
						modalElement.classList.remove('show');
						modalElement.setAttribute('aria-hidden', 'true');
						modalElement.style.display = 'none';

						// Remove backdrop if it exists
						const backdrop = document.querySelector('.modal-backdrop');
						if (backdrop) backdrop.remove();

						// Clean up body
						document.body.classList.remove('modal-open');
						document.body.style.overflow = '';
						document.body.style.paddingRight = '';
					}

					// Clear the form for future use
					document.getElementById("reportCommentContent").value = "";

					// Show success message
					showToast("Comment reported successfully!");
				} else {
					const errorData = await response.json();
					showToast(`Error reporting comment: ${errorData.message || response.statusText}`, "danger");
				}
			} catch (error) {
				showToast(`Error reporting comment: ${error.message}`, "danger");
			}
		});

		// Handle Report User Form Submission
		document.getElementById("reportUserForm").addEventListener("submit", async function (event) {
			event.preventDefault(); // Prevent form submission (page refresh)

			const userreportedId = '@Model.CurrentUserId';
			const userId = document.getElementById("reportUserreportedId").value;
			const content = document.getElementById("reportUserContent").value;

			if (!content.trim()) {
				showToast("Please provide a reason for reporting this user.", "danger");
				return;
			}

			try {
				const response = await fetch(`${BASE_URL}/ReportUser`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify({
						userreportedId: userreportedId, // The server will assign this
						userId: userId,
						content: content
					})
				});

				if (response.ok) {
					// Close modal using jQuery if available (compatible with most Bootstrap versions)
					if (typeof $ !== 'undefined') {
						$("#reportUserModal").modal('hide');
					} else {
						// Direct DOM manipulation fallback
						const modalElement = document.getElementById("reportUserModal");
						modalElement.classList.remove('show');
						modalElement.setAttribute('aria-hidden', 'true');
						modalElement.style.display = 'none';

						// Remove backdrop if it exists
						const backdrop = document.querySelector('.modal-backdrop');
						if (backdrop) backdrop.remove();

						// Clean up body
						document.body.classList.remove('modal-open');
						document.body.style.overflow = '';
						document.body.style.paddingRight = '';
					}

					// Clear the form for future use
					document.getElementById("reportUserContent").value = "";

					// Show success message
					showToast("User reported successfully!");
				} else {
					const errorData = await response.json();
					showToast(`Error reporting user: ${errorData.message || response.statusText}`, "danger");
				}
			} catch (error) {
				showToast(`Error reporting user: ${error.message}`, "danger");
			}
		});

		// This is the key fix: Add event listeners to modal events
		document.addEventListener('DOMContentLoaded', function () {
			// Listen for Post reporting modal show event
			document.getElementById('reportPostModal').addEventListener('show.bs.modal', function (event) {
				// Get the button that triggered the modal
				const button = event.relatedTarget;
				// Extract post ID from data attribute
				const postId = button.getAttribute('data-post-id');
				// Update the modal's hidden input with this ID
				document.getElementById('reportPostId').value = postId;
			});

			// Listen for Comment reporting modal show event
			document.getElementById('reportCommentModal').addEventListener('show.bs.modal', function (event) {
				// Get the button that triggered the modal
				const button = event.relatedTarget;
				// Extract comment ID from data attribute
				const commentId = button.getAttribute('data-comment-id');
				// Update the modal's hidden input with this ID
				document.getElementById('reportCommentId').value = commentId;
			});

			// Listen for User reporting modal show event
			document.getElementById('reportUserModal').addEventListener('show.bs.modal', function (event) {
				// Get the button that triggered the modal
				const button = event.relatedTarget;
				// Extract user ID from data attribute
				const userId = button.getAttribute('data-user-id');
				// Update the modal's hidden input with this ID
				document.getElementById('reportUserreportedId').value = userId;
			});

			// Add click event listeners to all report buttons as a backup method
			document.querySelectorAll('.report-post').forEach(button => {
				button.addEventListener('click', function () {
					const postId = this.getAttribute('data-post-id');
					document.getElementById('reportPostId').value = postId;
				});
			});

			document.querySelectorAll('.report-comment').forEach(button => {
				button.addEventListener('click', function () {
					const commentId = this.getAttribute('data-comment-id');
					document.getElementById('reportCommentId').value = commentId;
				});
			});

			document.querySelectorAll('.report-user').forEach(button => {
				button.addEventListener('click', function () {
					const userId = this.getAttribute('data-user-id');
					document.getElementById('reportUserreportedId').value = userId;
				});
			});
		});

		// For backwards compatibility, keep these functions (but they shouldn't be needed anymore)
		function openReportPostModal(postId) {
			document.getElementById("reportPostId").value = postId;
			const reportPostModal = new bootstrap.Modal(document.getElementById("reportPostModal"));
			reportPostModal.show();
		}

		function openReportCommentModal(commentId) {
			document.getElementById("reportCommentId").value = commentId;
			const reportCommentModal = new bootstrap.Modal(document.getElementById("reportCommentModal"));
			reportCommentModal.show();
		}

		function openReportUserModal(userreportedId) {
			document.getElementById("reportUserreportedId").value = userreportedId;
			const reportUserModal = new bootstrap.Modal(document.getElementById("reportUserModal"));
			reportUserModal.show();
		}
	</script>

	<style>
		.subscription-card {
			background-color: #2c2c2c;
			border-radius: 12px;
		}

		.upgrade-card {
			background: linear-gradient(135deg, #636363 0%, #1c76c2 100%);
			border-radius: 12px;
			transition: transform 0.2s ease-in-out;
		}

			.upgrade-card:hover {
				transform: scale(1.03);
			}

		.edit-icon {
			font-size: 1.25rem;
			color: #000000;
			cursor: pointer;
			transition: color 0.2s ease, transform 0.2s ease;
		}

			.edit-icon:hover {
				color: #0056b3;
				transform: scale(1.1);
			}

			.edit-icon:active {
				transform: scale(0.95);
			}

		.gray-bg {
			margin-left: 0,5%;
		}

		.sidebar {
			position: sticky;
			top: 20px; /* khoảng cách từ đỉnh màn hình khi dính */
			z-index: 10;
		}

		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}

		body {
			font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
			line-height: 1.6;
			color: #333;
			background: #f5f5f5;
		}

		.container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 0 20px;
		}

		.avtar-header {
			max-width: 1200px;
			margin: 0 auto;
			padding: 0 20px;
			margin-left: 3%;
		}

		/* Profile Header */
		.profile-header {
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			padding: 40px 0;
			margin-bottom: 30px;
		}

		.profile-content {
			display: flex;
			align-items: flex-start;
			gap: 40px;
		}

		.profile-info {
			flex: 1;
		}

		.instructor-label {
			font-size: 14px;
			color: #FFFAFA;
			font-weight: 500;
			margin-bottom: 10px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.profile-name {
			/* font-size: 3rem; */
			font-size: 110%;
			font-weight: 700;
			color: black;
			margin-bottom: 10px;
			line-height: 1.2;
		}

		.profile-title {
			font-size: 1.2rem;
			color: #FFFAFA;
			margin-bottom: 20px;
			font-weight: 400;
		}

		.udemy-badge {
			background: linear-gradient(135deg, #000000 0%, #064071 100%);
			color: white;
			padding: 8px 16px;
			border-radius: 20px;
			font-size: 0.85rem;
			font-weight: 600;
			display: inline-block;
			text-decoration: none;
		}

		.profile-avatar-card {
			background: white;
			border-radius: 15px;
			padding: 20px;
			box-shadow: 0 4px 15px rgba(0,0,0,0.1);
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 10px;
			/* min-width: 200px; */
		}

		.profile-avatar {
			width: 140px;
			height: 140px;
			border-radius: 50%;
			object-fit: cover;
			border: 3px solid #064071;
			box-shadow: 0 4px 15px rgba(0,0,0,0.1);
		}

		.social-links {
			display: flex;
			gap: 12px;
		}

		.social-link {
			width: 40px;
			height: 40px;
			border-radius: 8px;
			display: flex;
			align-items: center;
			justify-content: center;
			color: white;
			text-decoration: none;
			transition: all 0.3s ease;
			font-size: 16px;
			border: 2px solid transparent;
		}

			.social-link.facebook {
				background: #1877F2;
				border-color: #1877F2;
			}

			.social-link.linkedin {
				background: #0A66C2;
				border-color: #0A66C2;
			}

			.social-link.youtube {
				background: #FF0000;
				border-color: #FF0000;
			}

			.social-link:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0,0,0,0.2);
			}

		.profile-stats {
			display: flex;
			gap: 30px;
			margin-top: 15px;
		}

		.stat-item {
			text-align: center;
		}

		.stat-number {
			font-size: 1.5rem;
			font-weight: 700;
			color: #FFFAFA;
			display: block;
		}

		.stat-label {
			font-size: 0.9rem;
			color: #FFFAFA;
			font-weight: 500;
		}

		.comment {
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 1px solid #eee;
		}

		.replies {
			margin-top: 10px;
		}

		.reply-comment {
			margin-bottom: 15px;
		}

		.comment {
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 1px solid #eee;
		}

		.replies {
			margin-top: 10px;
		}

		.reply-comment {
			margin-bottom: 15px;
		}
	</style>
