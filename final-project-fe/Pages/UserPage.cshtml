@page
@model final_project_fe.Pages.UserPageModel
@{
	ViewData["Title"] = "UserPage";
}
@{
	var token = HttpContext.Request.Cookies["AccessToken"];
}
<div class="theme-layout">
		<!-- Profile Header -->
		<div class="profile-header">
			<div class="d-flex justify-content-between align-items-start">
				<div class="avtar-header">
					<div class="profile-content">
						<div class="profile-avatar-card">
							@if (Model.Profile?.UserMetaData != null)
							{
								<img src="@Model.Profile.UserMetaData?.Avatar ?? " https://cdn-icons-png.flaticon.com/512/149/149071.png""
									 alt="Avatar" class="profile-avatar rounded-circle shadow" width="120" height="120" />
								<h4 class="profile-name mt-4">
									@($"{Model.Profile.UserMetaData?.FirstName} {Model.Profile.UserMetaData?.LastName}")
								</h4>
							}
							<div class="social-links">
								<a href="#" class="social-link facebook">
									<i class="bi bi-facebook"></i>
								</a>
								<a href="#" class="social-link linkedin">
									<i class="bi bi-linkedin"></i>
								</a>
								<a href="#" class="social-link youtube">
									<i class="bi bi-youtube"></i>
								</a>
							</div>
						</div>
					</div>
				</div>
				<div style="width: 22%; margin-right: 5%;">
					<div class="col-12">
						@if (Model.Profile.IsPremium == false)
						{
							<div class="card subscription-card bg-dark text-white shadow-sm h-100 mb-3">
								<div style="color: #ffff;" class="card-body d-flex flex-column justify-content-between">
									<div class="d-flex justify-content-between align-items-start">
										<div>
											<small>MemberShip</small>
											<h3 class="mt-1">Free Member</h3>
										</div>
										<i class="bi bi-person-badge-fill fs-3"></i>
									</div>
									<a href="#" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
										Upgrade to Premium
									</a>
								</div>
							</div>
						}
						else
						{
							<div class="card upgrade-card text-white text-decoration-none shadow-sm h-100">
								<div style="color:#ffff" class="card-body d-flex flex-column justify-content-center align-items-center">
									<div>
										<small>MemberShip</small>
									</div>
									<i style="color:#ffff" class="bi bi-gem fs-2"></i>
									<a href="#" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
										Premium Member
									</a>
								</div>
						</div>
						}
					</div>
				</div>
			</div>
		</div>
	<section>
		<div class="gap gray-bg">
			<div class="container-fluid">
				<div class="row">
					<div class="col-lg-12">
						<div class="row" id="page-contents">
							<div class="col-lg-3">
								<aside class="sidebar">
									<div class="widget">
										<h4 class="widget-title">Shortcuts</h4>
										<ul class="naves">
											<li>
												<i class="ti-clipboard"></i>
												<a asp-page="/Index" title="">News feed</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-mortarboard"></i>
												<a asp-page="/Mentor/MentorPage/Index" title="">Courses</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-person"></i>
												<a class="active" asp-page="/UserPage" title="" data-ripple="">Page</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-info-circle"></i>
												<a class="active" asp-page="/UserProfile" data-tab="about">About me</a>
											</li>
										</ul>
									</div><!-- Shortcuts -->
									<div class="widget">
										<h4 class="widget-title">Recent Activity</h4>
										<ul class="activitiez">
											<li>
												<div class="activity-meta">
													<i>10 hours Ago</i>
													<span><a href="#" title="">Commented on Video posted </a></span>
													<h6>by <a href="time-line.html">black demon.</a></h6>
												</div>
											</li>
											<li>
												<div class="activity-meta">
													<i>30 Days Ago</i>
													<span><a href="#" title="">Posted your status. “Hello guys, how are you?”</a></span>
												</div>
											</li>
											<li>
												<div class="activity-meta">
													<i>2 Years Ago</i>
													<span><a href="#" title="">Share a video on her timeline.</a></span>
													<h6>"<a href="#">you are so funny mr.been.</a>"</h6>
												</div>
											</li>
										</ul>
									</div><!-- recent activites -->
								</aside>
							</div><!-- sidebar -->
							<div class="col-lg-6">
								<!-- add post new box -->
								@* <div class="central-meta item"> *@
								<div class="user-post">
									<!-- Posts container -->
									<div class="posts-container">
										@if (Model.Posts != null && Model.Posts.Items.Any())
										{
											@foreach (var post in Model.Posts.Items.OrderByDescending(p => p.CreateAt))
											{
												<!-- Single post container -->
												<div class="card p-3 mb-3 shadow-sm rounded">
													<!-- Post content -->
													<div class="friend-info">
														<figure>
															<img src="@(string.IsNullOrEmpty(post.User?.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : post.User?.UserMetaData.Avatar)"
																 alt="User Avatar">

														</figure>

														<div class="post-meta">
															<div class="mb-2">
																@{
																	var category = Model.Categories.FirstOrDefault(c => c.CategoryId == post.CategoryId);
																}
																@if (category != null)
																{
																	<span class="badge bg-primary text-white px-2 py-1 rounded-pill">#@category.Title</span>
																}
															</div>
															<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
																@post.Title
															</p>
														</div>


														<div class="friend-name">
															<ins>
																<a href="time-line.html" title="">
																	@((post.User?.UserMetaData != null) ? $"{post.User.UserMetaData.FirstName} {post.User.UserMetaData.LastName}" : post.User?.Email)
																</a>
															</ins>
															<span>@post.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
															@if (!string.IsNullOrEmpty(token))
															{
																<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
																	<div class="dropdown">
																		<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
																			<i class="fa fa-ellipsis-v"></i>
																		</button>
																		<ul class="dropdown-menu">
																			<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="@post.PostId">Report Post</a></li>
																			<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="@post.User?.UserId">Report User</a></li>
																		</ul>
																	</div>
																</div>
															}
														</div>

														<div class="post-meta">
															@* 	@if (Model.PostFilesByPost.ContainsKey(post.PostId) && Model.PostFilesByPost[post.PostId].Any(f => f.PostFileType.ToLower() == "image" || f.PostFileType.ToLower() == "video"))
																				{
																					@foreach (var file in Model.PostFilesByPost[post.PostId])
																					{
																						@if (file.PostFileType.ToLower() == "image")
																						{
																							<img src="@file.FileUrl" alt="Post Image" width="400" />
																						}
																						else if (file.PostFileType.ToLower() == "video")
																						{
																							<iframe src="@file.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																						}
																					}
																				} *@
															@* 	else
																				{
																					<img src="https://toigingiuvedep.vn/wp-content/uploads/2021/06/hinh-anh-bau-troi-dem-day-sao-tuyet-dep-cho-may-tinh.jpg"
																						 alt="Default Post Image" width="400" />
																				} *@

															@if (post.PostFiles != null && post.PostFiles.Any())
															{
																foreach (var postFile in post.PostFiles)
																{
																	if (postFile.PostFileType.ToLower() == "image")
																	{
																		<img src="@postFile.FileUrl" alt="Post Image" width="400" />
																	}
																	else
																	{
																		<iframe src="@postFile.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																	}
																}
															}

															<div class="description">
																<p>@post.Content</p>
															</div>
														</div>

														<!-- Comment section -->
														<div class="comments-section" id="commentList-@post.PostId">
															@if (Model.CommentsByPost.ContainsKey(post.PostId))
															{
																var comments = Model.CommentsByPost[post.PostId];
																var parentComments = comments.Where(c => c.ParentCommentId == null).OrderBy(c => c.CreateAt);

																foreach (var parent in parentComments)
																{
																	// Comment gốc
																	var user = parent.User;
																	var userMeta = user?.UserMetaData;
																	var avatar = string.IsNullOrEmpty(userMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : userMeta.Avatar;
																	var displayName = userMeta != null ? $"{userMeta.FirstName} {userMeta.LastName}" : user?.Email;

																	<div class="comment" data-comment-id="@parent.CommentId">
																		<div class="comet-avatar">
																			<img src="@avatar" alt="User Avatar">
																		</div>
																		<div class="we-comment">
																			<div class="coment-head">
																				<h5><a href="#">@displayName</a></h5>
																				<span>@parent.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																				@if (!string.IsNullOrEmpty(token))
																				{
																					<a class="we-reply" href="javascript:void(0)" data-reply-to="@parent.CommentId"><i class="fa fa-reply"></i></a>
																				}
																			</div>
																			<p>@parent.Content</p>
																			@if (!string.IsNullOrEmpty(token))
																			{
																				<div class="reply-form" style="display:none; margin-top: 10px;">
																					<form class="comment-form">
																						<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																						<input type="hidden" name="NewComment.ParentCommentId" value="@parent.CommentId" />
																						<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																						<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																					</form>
																				</div>
																			}
																		</div>
																	</div>

																	// Hiển thị reply cấp 1
																	var firstLevelReplies = comments.Where(c => c.ParentCommentId == parent.CommentId).OrderBy(c => c.CreateAt);
																	foreach (var reply in firstLevelReplies)
																	{
																		var replyUser = reply.User;
																		var replyMeta = replyUser?.UserMetaData;
																		var replyAvatar = string.IsNullOrEmpty(replyMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : replyMeta.Avatar;
																		var replyName = replyMeta != null ? $"{replyMeta.FirstName} {replyMeta.LastName}" : replyUser?.Email;

																		<div class="comment reply-comment ms-5" data-comment-id="@reply.CommentId" data-parent-id="@parent.CommentId">
																			<div class="comet-avatar">
																				<img src="@replyAvatar" alt="User Avatar">
																			</div>
																			<div class="we-comment">
																				<div class="coment-head">
																					<h5><a href="#">@replyName</a></h5>
																					<span>@reply.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																					@if (!string.IsNullOrEmpty(token))
																					{
																						<a class="we-reply" href="javascript:void(0)" data-reply-to="@reply.CommentId"><i class="fa fa-reply"></i></a>
																					}
																				</div>
																				<p>@reply.Content</p>
																				@if (!string.IsNullOrEmpty(token))
																				{
																					<div class="reply-form" style="display:none; margin-top: 10px;">
																						<form class="comment-form">
																							<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																							<input type="hidden" name="NewComment.ParentCommentId" value="@reply.CommentId" />
																							<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																							<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																						</form>
																					</div>
																				}
																			</div>
																		</div>

																		// reply of reply
																		var secondLevelReplies = comments.Where(c => c.ParentCommentId == reply.CommentId).OrderBy(c => c.CreateAt);
																		foreach (var level2 in secondLevelReplies)
																		{
																			var level2User = level2.User;
																			var level2Meta = level2User?.UserMetaData;
																			var level2Avatar = string.IsNullOrEmpty(level2Meta?.Avatar) ? "images/resources/friend-avatar9.jpg" : level2Meta.Avatar;
																			var level2Name = level2Meta != null ? $"{level2Meta.FirstName} {level2Meta.LastName}" : level2User?.Email;

																			<div class="comment reply-comment ms-5" data-comment-id="@level2.CommentId" data-parent-id="@level2.ParentCommentId">
																				<div class="comet-avatar">
																					<img src="@level2Avatar" alt="User Avatar">
																				</div>
																				<div class="we-comment">
																					<div class="coment-head">
																						<h5><a href="#">@level2Name</a></h5>
																						<span>@level2.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																						@if (!string.IsNullOrEmpty(token))
																						{
																							<a class="we-reply" href="javascript:void(0)" data-reply-to="@level2.CommentId"><i class="fa fa-reply"></i></a>
																						}
																					</div>
																					<p>@level2.Content</p>
																					@if (!string.IsNullOrEmpty(token))
																					{
																						<div class="reply-form" style="display:none; margin-top: 10px;">
																							<form class="comment-form">
																								<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																								<input type="hidden" name="NewComment.ParentCommentId" value="@level2.CommentId" />
																								<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																								<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																							</form>
																						</div>
																					}
																				</div>
																			</div>
																		}
																	}
																}
															}
															else
															{
																<p>No comments available.</p>
															}
														</div>

														<!-- Comment input form -->
														@if (!string.IsNullOrEmpty(token))
														{
															<!-- Comment input form -->
															<div class="coment-area">
																<ul class="we-comet">
																	<li class="post-comment">
																		<div class="comet-avatar">
																			<img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
																		</div>
																		<div class="post-comt-box">
																			<form class="comment-form">
																				<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																				<input type="hidden" name="NewComment.ParentCommentId" />
																				<label>Comment:</label>
																				<textarea name="NewComment.Content" placeholder="Write a comment..."></textarea>
																				<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
																			</form>
																		</div>
																	</li>
																</ul>
															</div>
														}
													</div>
												</div>
											}
											@* <div class="pagination mt-3">
															<p>Page @Model.Posts.CurrentPage / @Model.Posts.TotalPages</p>
															<!-- Add pagination controls here if needed -->
														</div> *@
										}
										else
										{
											<div class="alert alert-info">No posts available.</div>
										}
									</div>
								</div>
								<button class="btn-view btn-load-more">Load More</button>
							</div><!-- centerl meta -->

							<div class="col-lg-3">
								<aside class="sidebar">
									<h4 class="">Advertisment</h4>
									<div class="widget">									
										<div class="advertisment-box">											
											<figure>
												<a href="#" title="Advertisment"><img src="https://nisteducation.com/wp-content/uploads/2025/01/136-1.jpg" alt=""></a>
											</figure>
										</div>
									</div>
									<div class="widget">
										<div class="advertisment-box">
											<h4 class=""></h4>
											<figure>
												<a href="#" title="Advertisment"><img src="https://media.licdn.com/dms/image/v2/D4D22AQEUnXKj6NtXgA/feedshare-shrink_2048_1536/feedshare-shrink_2048_1536/0/1695712692412?e=2147483647&v=beta&t=3LYX7m3F3jFsaL9iouoMmkqIl2AbCIGWLZO31X1h1T4" alt=""></a>
											</figure>
										</div>
									</div>
								</aside>
							</div><!-- sidebar -->
							
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>
<!-- Report Post Modal -->
<div class="modal fade" id="reportPostModal" tabindex="-1" aria-labelledby="reportPostModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportPostModalLabel">Report Post</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportPostForm">
					<input type="hidden" id="reportPostId" name="PostId">
					<input type="hidden" id="reportPostUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportPostContent" class="form-label">Why are you reporting this post?</label>
						<textarea class="form-control" id="reportPostContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Report Comment Modal -->
<div class="modal fade" id="reportCommentModal" tabindex="-1" aria-labelledby="reportCommentModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportCommentModalLabel">Report Comment</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportCommentForm">
					<input type="hidden" id="reportCommentId" name="CommentId">
					<input type="hidden" id="reportCommentUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportCommentContent" class="form-label">Why are you reporting this comment?</label>
						<textarea class="form-control" id="reportCommentContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Report User Modal -->
<div class="modal fade" id="reportUserModal" tabindex="-1" aria-labelledby="reportUserModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="reportUserModalLabel">Report User</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="reportUserForm">
					<input type="hidden" id="reportUserreportedId" name="UserreportedId">
					<input type="hidden" id="reportUserUserId" name="UserId" value="@Model.CurrentUserId">
					<div class="mb-3">
						<label for="reportUserContent" class="form-label">Why are you reporting this user?</label>
						<textarea class="form-control" id="reportUserContent" name="Content" rows="4" required></textarea>
					</div>
					<div class="d-grid">
						<button type="submit" class="btn btn-danger">Submit Report</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			// Configuration
			currentUserId = "@Model.CurrentUserId"
			const HubUrl = "@Model.HubUrl";
			const BaseUrl = "@Model.BaseUrl";
			const userId = currentUserId;
			const token = "@token";

			// Load More Posts Configuration
			let currentPage = 1;
			let isLoading = false;
			let categoriesCache = {};
			const apiBaseUrl = `${BaseUrl}/Post?userId={userId}`;


			// SignalR Connection
			const connection = new signalR.HubConnectionBuilder()
				.withUrl(`${HubUrl}/postHub`)
				.withAutomaticReconnect()
				.build();

			// Utility function to get user info
			async function getUserInfo(id) {
				const defaultAvatar = "images/resources/friend-avatar9.jpg";
				const defaultName = "Unknown User";
				if (!id) return { avatar: defaultAvatar, name: defaultName };

				try {
				const res = await fetch(`${BaseUrl}/User/GetUserById/${id}`, { credentials: 'include' });
					if (res.ok) {
						const u = await res.json();
						return {
							avatar: u?.userMetaData?.avatar || defaultAvatar,
							name: u?.userMetaData
								? `${u.userMetaData.firstName} ${u.userMetaData.lastName}`
								: u.email || defaultName
						};
					}
				} catch (error) {
					console.error("Error fetching user info:", error);
				}
				return { avatar: defaultAvatar, name: defaultName };
			}

			// New function to get category info
			async function getCategoryInfo(categoryId) {
				if (!categoryId) return null;

				// Check cache first
				if (categoriesCache[categoryId]) {
					return categoriesCache[categoryId];
				}

				try {
					const res = await fetch(`${BaseUrl}/Category/${categoryId}`, { credentials: 'include' });
					if (res.ok) {
						const category = await res.json();
						// Cache the result
						categoriesCache[categoryId] = category;
						return category;
					}
				} catch (error) {
					console.error("Error fetching category info:", error);
				}
				return null;
			}

			// Enhanced function to format date
			function formatDate(dateString) {
				const date = new Date(dateString);
				return date.toLocaleDateString('vi-VN') + ' ' + date.toLocaleTimeString('vi-VN', {
					hour: '2-digit',
					minute: '2-digit'
				});
			}

			// Enhanced function to create post HTML
			async function createPostHtml(post, userInfo = null) {
				// Get user info if not provided
				if (!userInfo) {
					userInfo = await getUserInfo(post.userId);
				}

				// Get category info
				const categoryInfo = await getCategoryInfo(post.categoryId);
				const { avatar, name } = userInfo;
				const d = new Date(post.createAt).toLocaleString();
				const hasAuth = token && token !== '' && token !== '@token';

				// Create category badge HTML
				let categoryBadgeHTML = '';
				if (categoryInfo && categoryInfo.title) {
					categoryBadgeHTML = `
						<div class="mb-2">
							<span class="badge bg-primary text-white px-2 py-1 rounded-pill">#${categoryInfo.title}</span>
						</div>
					`;
				}

				// Handle file attachments
				let mediaContent = '';
				if (post.files && post.files.length > 0) {
					post.files.forEach(file => {
						if (file.postFileType?.toLowerCase() === "image") {
							mediaContent += `<img src="${file.fileUrl}" alt="Post Image" style="max-width: 100%; height: auto; margin: 5px 0;" />`;
						} else if (file.postFileType?.toLowerCase() === "video") {
							mediaContent += `<iframe src="${file.fileUrl}" height="315" style="width: 100%; margin: 5px 0;" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>`;
						}
					});
				}

				// Handle postFiles
				if (post.postFiles && post.postFiles.length > 0) {
					post.postFiles.forEach(file => {
						if (!file.isDeleted && file.postFileType && file.fileUrl !== 'string') {
							if (file.postFileType.toLowerCase() === 'image') {
								mediaContent += `<img src="${file.fileUrl}" alt="Post Image" style="max-width: 100%; height: auto; margin: 5px 0;" />`;
							} else if (file.postFileType.toLowerCase() === 'video') {
								mediaContent += `<iframe src="${file.fileUrl}" height="315" style="width: 100%; margin: 5px 0;" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>`;
							}
						}
					});
				}

				// Generate comments HTML
				let commentsHTML = '';
				if (post.comments && post.comments.length > 0) {
					const parentComments = post.comments.filter(c => !c.parentCommentId);

					for (const comment of parentComments) {
						const commentUserInfo = await getUserInfo(comment.userId);
						const replyFormHTML = `
							<div class="reply-form" style="display:none; margin-top: 10px;">
								<form class="comment-form">
									<input type="hidden" name="NewComment.PostId" value="${post.postId}" />
									<input type="hidden" name="NewComment.ParentCommentId" value="${comment.commentId}" />
									<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
									<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
								</form>
							</div>
						`;

						const commentOptionsHTML =  `
							<div class="comment-options-menu" style="position: absolute; right: 10px; top: 0;">
								<div class="dropdown">
									<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
										<i class="fa fa-ellipsis-v"></i>
									</button>
									<ul class="dropdown-menu">
										<li><a class="dropdown-item report-comment" href="#" data-bs-toggle="modal" data-bs-target="#reportCommentModal" data-comment-id="${comment.commentId}">Report Comment</a></li>
										<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${comment.userId}">Report User</a></li>
									</ul>
								</div>
							</div>
						` ;

						commentsHTML += `
							<div class="comment" data-comment-id="${comment.commentId}" data-parent-id="${comment.parentCommentId || ''}" style="margin-bottom: 15px;">
								<div class="comet-avatar">
									<img src="${commentUserInfo.avatar}" alt="User Avatar">
								</div>
								<div class="we-comment">
									<div class="coment-head">
										<h5><a href="time-line.html" title="">${commentUserInfo.name}</a></h5>
										<span>${d}</span>
										${hasAuth ? `<a class="we-reply" href="javascript:void(0)" data-reply-to="${comment.commentId}" title="Reply"><i class="fa fa-reply"></i></a>` : ''}
										${commentOptionsHTML}
									</div>
									<p>${comment.content}</p>
									${replyFormHTML}
								</div>
							</div>
						`;

						// Add replies
						const replies = post.comments.filter(c => c.parentCommentId === comment.commentId);
						if (replies.length > 0) {
							commentsHTML += `<div class="replies" style="margin-left: 50px;">`;
							for (const reply of replies) {
								const replyUserInfo = await getUserInfo(reply.userId);
								const replyFormHTML = `
									<div class="reply-form" style="display:none; margin-top: 10px;">
										<form class="comment-form">
											<input type="hidden" name="NewComment.PostId" value="${post.postId}" />
											<input type="hidden" name="NewComment.ParentCommentId" value="${reply.commentId}" />
											<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
											<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
										</form>
									</div>
								` ;

								const replyOptionsHTML = `
									<div class="comment-options-menu" style="position: absolute; right: 10px; top: 0;">
										<div class="dropdown">
											<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
												<i class="fa fa-ellipsis-v"></i>
											</button>
											<ul class="dropdown-menu">
												<li><a class="dropdown-item report-comment" href="#" data-bs-toggle="modal" data-bs-target="#reportCommentModal" data-comment-id="${reply.commentId}">Report Comment</a></li>
												<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${reply.userId}">Report User</a></li>
											</ul>
										</div>
									</div>
								`;

								commentsHTML += `
									<div class="comment reply-comment" data-comment-id="${reply.commentId}" data-parent-id="${comment.commentId}" style="margin-bottom: 15px;">
										<div class="comet-avatar">
											<img src="${replyUserInfo.avatar}" alt="User Avatar">
										</div>
										<div class="we-comment">
											<div class="coment-head">
												<h5><a href="time-line.html" title="">${replyUserInfo.name}</a></h5>
												<span>${d}</span>
												${hasAuth ? `<a class="we-reply" href="javascript:void(0)" data-reply-to="${reply.commentId}" title="Reply"><i class="fa fa-reply"></i></a>` : ''}
												${replyOptionsHTML}
											</div>
											<p>${reply.content}</p>
											${replyFormHTML}
										</div>
									</div>
								`;
							}
							commentsHTML += `</div>`;
						}
					}
				}

				// Generate options menu for authenticated users
				const optionsMenuHTML =  `
					<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
						<div class="dropdown">
							<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								<i class="fa fa-ellipsis-v"></i>
							</button>
							<ul class="dropdown-menu">
								<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="${post.postId}">Report Post</a></li>
								<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${post.userId}">Report User</a></li>
							</ul>
						</div>
					</div>
				` ;

				// Generate comment form for authenticated users
				const commentFormHTML = `
					<div class="coment-area">
						<ul class="we-comet">
							<li class="post-comment">
								<div class="comet-avatar">
									<img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
								</div>
								<div class="post-comt-box">
									<form class="comment-form">
										<input type="hidden" name="NewComment.PostId" value="${post.postId}">
										<input type="hidden" name="NewComment.ParentCommentId">
										<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
										<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
									</form>
								</div>
							</li>
						</ul>
					</div>
				` ;

					return `
					<div id="post-${post.postId}">
					<div class="card p-3 mb-3 shadow-sm rounded">
						<div class="friend-info">
							<figure>
								<img src="${avatar}" alt="User Avatar">
							</figure>
							<div class="friend-name">
								<ins><a href="time-line.html" title="">${name}</a></ins>
								<span>${d}</span>
								${optionsMenuHTML}
							</div>
							<div class="post-meta">
								${categoryBadgeHTML}
								<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
									${post.title}
								</p>
							</div>
							<div class="post-meta">
								${mediaContent}
								<div class="description">
									<p>${post.content}</p>
								</div>
							</div>
							<div class="comments-section" id="commentList-${post.postId}">
								${commentsHTML}
							</div>
							${commentFormHTML}
						</div>
						</div>
					</div>`;
				}

			// Function to create comment HTML
			function createCommentHtml(comment, avatar, name) {
				const isReply = comment.parentCommentId != null;
				const cls = isReply ? "comment reply-comment" : "comment";
				const date = new Date(comment.createAt);
				const formattedDate = date.toLocaleDateString("vi-VN");
				const formattedTime = date.toLocaleTimeString("vi-VN", {
					hour: "2-digit",
					minute: "2-digit"
				});
				const d = `${formattedDate} ${formattedTime}`;
				const hasAuth = token && token !== '' && token !== '@token';

				const optionsHTML =  `
					<div class="comment-options-menu" style="position: absolute; right: 10px; top: 0;">
						<div class="dropdown">
							<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								<i class="fa fa-ellipsis-v"></i>
							</button>
							<ul class="dropdown-menu">
								<li><a class="dropdown-item report-comment" href="#" data-bs-toggle="modal" data-bs-target="#reportCommentModal" data-comment-id="${comment.commentId}">Report Comment</a></li>
								<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${comment.userId}">Report User</a></li>
							</ul>
						</div>
					</div>
				` ;

				const replyFormHTML =  `
					<div class="reply-form" style="display: none; margin-top: 10px;">
						<form class="comment-form">
							<input type="hidden" name="NewComment.PostId" value="${comment.postId}" />
							<input type="hidden" name="NewComment.ParentCommentId" value="${comment.commentId}" />
							<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
							<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
						</form>
					</div>
				` ;

				return `
				<div class="${cls}" data-comment-id="${comment.commentId}" data-parent-id="${comment.parentCommentId || ''}" style="margin-bottom: 15px;">
					<div class="comet-avatar">
						<img src="${avatar}" alt="User Avatar">
					</div>
					<div class="we-comment">
						<div class="coment-head">
							<h5><a href="time-line.html" title="">${name}</a></h5>
							<span>${d}</span>
							${hasAuth ? `<a class="we-reply" href="javascript:void(0)" data-reply-to="${comment.commentId}" title="Reply"><i class="fa fa-reply"></i></a>` : ''}
							${optionsHTML}
						</div>
						<p>${comment.content}</p>
						${replyFormHTML}
					</div>
				</div>`;
			}

			// Enhanced function to load more posts
			async function loadMorePosts() {
				if (isLoading) return;

				isLoading = true;
				const loadMoreBtn = document.querySelector('.btn-load-more');
				const originalText = loadMoreBtn?.innerHTML || 'Load More';

				// Update button to show loading state
				if (loadMoreBtn) {
					loadMoreBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading...';
					loadMoreBtn.disabled = true;
				}

				try {
					currentPage++;
					const response = await fetch(`${apiBaseUrl}?page=${currentPage}`, {
						method: 'GET',
						credentials: 'include',
						headers: {
							'Content-Type': 'application/json'
						}
					});

					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}

					const data = await response.json();

					// Check if there are posts to display
					if (data.items && data.items.length > 0) {
						const postsContainer = document.querySelector('#post-list') || document.querySelector('.posts-container');

						if (postsContainer) {
							// Add new posts to the container
							for (const post of data.items) {
								const postHTML = await createPostHtml(post);
								postsContainer.insertAdjacentHTML('beforeend', postHTML);
							}
						}

						// Update pagination info
						const paginationInfo = document.querySelector('.pagination p');
						if (paginationInfo) {
							paginationInfo.textContent = `Page ${data.currentPage} / ${data.totalPages}`;
						}

						// Hide load more button if we've reached the last page
						if (currentPage >= data.totalPages && loadMoreBtn) {
							loadMoreBtn.style.display = 'none';
						}
					} else {
						// No more posts to load
						if (loadMoreBtn) {
							loadMoreBtn.innerHTML = 'No more posts';
							loadMoreBtn.disabled = true;
							setTimeout(() => {
								loadMoreBtn.style.display = 'none';
							}, 2000);
						}
					}

					console.log(`Loaded page ${currentPage} with ${data.items?.length || 0} posts`);

				} catch (error) {
					console.error('Error loading more posts:', error);
					currentPage--; // Revert page counter on error

					if (loadMoreBtn) {
						loadMoreBtn.innerHTML = 'Error loading posts. Click to retry.';
						loadMoreBtn.disabled = false;
					}
				} finally {
					// Reset loading state if button is still visible and not permanently disabled
					if (loadMoreBtn && loadMoreBtn.style.display !== 'none' && !loadMoreBtn.innerHTML.includes('No more posts')) {
						loadMoreBtn.innerHTML = originalText;
						loadMoreBtn.disabled = false;
					}
					isLoading = false;
				}
			}


			// SignalR event handlers
			if (connection) {
				// Receive new posts from SignalR
				connection.on("ReceivePost", async post => {
					console.log("Received post:", post);
					const postHTML = await createPostHtml(post);
					const postList = document.querySelector("#post-list");
					if (postList) {
						postList.insertAdjacentHTML("afterbegin", postHTML);
						console.log("Post added to DOM at the beginning of list");
					} else {
						console.error("Element #post-list not found");
					}
				});

				// Receive new comments from SignalR
				connection.on("ReceiveComment", async comment => {
					console.log("Received comment:", comment);
					const { avatar, name } = await getUserInfo(comment.userId);

					if (comment.parentCommentId) {
						// This is a reply - insert into replies container
						const parentComment = document.querySelector(`[data-comment-id="${comment.parentCommentId}"]`);
						if (parentComment) {
							let repliesContainer = parentComment.querySelector('.replies');

							if (repliesContainer) {
								repliesContainer.insertAdjacentHTML("beforeend", createCommentHtml(comment, avatar, name));
								console.log("Reply inserted into replies container");
							} else {
								// Create new replies container if it doesn't exist
								const newRepliesDiv = document.createElement("div");
								newRepliesDiv.className = "replies";
								newRepliesDiv.style.marginLeft = "50px";
								newRepliesDiv.innerHTML = createCommentHtml(comment, avatar, name);
								parentComment.appendChild(newRepliesDiv);
								console.log("Reply container created and reply added");
							}
						} else {
							console.error(`Parent comment with ID ${comment.parentCommentId} not found`);
						}
					} else {
						// This is a root comment - add to comment list
						const commentList = document.querySelector(`#commentList-${comment.postId}`);
						if (commentList) {
							commentList.insertAdjacentHTML("beforeend", createCommentHtml(comment, avatar, name));
							console.log("Comment added to the end of comment list");
						} else {
							console.error(`Element #commentList-${comment.postId} not found`);
						}
					}
				});

				// Start SignalR connection
				connection.start()
					.then(() => {
						console.log("SignalR connected successfully");
					})
					.catch(err => {
						console.error("SignalR connection error:", err);
						setTimeout(() => connection.start(), 5000);
					});

				// Handle connection events
				connection.onclose(error => {
					console.log("SignalR connection closed, attempting to reconnect...");
				});

				connection.onreconnecting(error => {
					console.log("SignalR reconnecting...", error);
				});

				connection.onreconnected(connectionId => {
					console.log("SignalR reconnected. ConnectionId:", connectionId);
				});
			}

			// Event handlers - CHỈ ĐĂNG KÝ MỘT LẦN

			// Handle reply button clicks
			document.body.addEventListener('click', e => {
				const btn = e.target.closest('.we-reply');
				if (!btn) return;
				e.preventDefault();
				const id = btn.getAttribute('data-reply-to');
				const form = document.querySelector(`.comment[data-comment-id="${id}"] .reply-form`);
				if (form) form.style.display = form.style.display === 'none' ? 'block' : 'none';
			});

			// Handle comment form submissions - CHỈ MỘT EVENT LISTENER
			let isSubmittingComment = false; // Flag to prevent double submission

			document.body.addEventListener('submit', async e => {
				const form = e.target.closest('form.comment-form');
				if (!form) return;

				// Prevent double submission
				if (isSubmittingComment) {
					e.preventDefault();
					return;
				}

				e.preventDefault();
				isSubmittingComment = true;

				const replyform = e.target.closest('.reply-form');
				const fm = new FormData(form);
				const payload = {
					postId: Number(fm.get('NewComment.PostId')),
					parentCommentId: fm.get('NewComment.ParentCommentId')
						? Number(fm.get('NewComment.ParentCommentId'))
						: null,
					content: fm.get('NewComment.Content').trim(),
					userId: userId
				};

				if (!payload.content) {
					isSubmittingComment = false;
					return;
				}

				console.log("Submitting comment:", payload);

				try {
					const res = await fetch(`${BaseUrl}/Comment`, {
						method: 'POST',
						credentials: 'include',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify(payload)
					});

					if (!res.ok) {
						const errorText = await res.text();
						console.error('Post comment failed:', errorText);
						alert('Comment could not be submitted. Please try again later.');
						return;
					}

					console.log("Comment posted successfully");
					form.reset();
					if (replyform) replyform.style.display = 'none';
				} catch (error) {
					console.error("Error posting comment:", error);
					alert('An error occurred while submitting the comment.');
				} finally {
					isSubmittingComment = false; // Reset flag
				}
			});

			// Handle post form submissions
			let isSubmittingPost = false; // Flag to prevent double submission

			document.body.addEventListener('submit', async e => {
				const form = e.target.closest('form.post-form');
				if (!form) return;

				// Prevent double submission
				if (isSubmittingPost) {
					e.preventDefault();
					return;
				}

				e.preventDefault();
				isSubmittingPost = true;

				const fm = new FormData(form);
				const payload = {
					title: fm.get('NewPost.Title').trim(),
					content: fm.get('NewPost.Content').trim(),
					userId: userId
				};

				if (!payload.title || !payload.content) {
					isSubmittingPost = false;
					return;
				}

				console.log("Submitting post:", payload);

				try {
					const res = await fetch(`${BaseUrl}/Post`, {
						method: 'POST',
						credentials: 'include',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify(payload)
					});

					if (!res.ok) {
						const errorText = await res.text();
						console.error('Post creation failed:', errorText);
						alert('Could not create post. Please try again later.');
						return;
					}

					console.log("Post created successfully");
					form.reset();
				} catch (error) {
					console.error("Error creating post:", error);
					alert('An error occurred while creating the post.');
				} finally {
					isSubmittingPost = false; // Reset flag
				}
			});

			// Initialize load more functionality
			const loadMoreBtn = document.querySelector('.btn-load-more');
			if (loadMoreBtn) {
				loadMoreBtn.addEventListener('click', loadMorePosts);
			}

			// Initialize current page based on existing posts
			const paginationInfo = document.querySelector('.pagination p');
			if (paginationInfo) {
				const pageMatch = paginationInfo.textContent.match(/Page (\d+)/);
				if (pageMatch) {
					currentPage = parseInt(pageMatch[1]);
				}
			}

			console.log("Combined posts loading script initialized successfully");
		});
	</script>

	<script>
		// Configuration from Razor model
		const BASE_URL = "@Model.BaseUrl";

		// Create toast notification system - replaces the old alert system
		function showToast(message, type = "success") {
		  // Create toast container if it doesn't exist yet
		  let toastContainer = document.getElementById("toast-container");
		  if (!toastContainer) {
			toastContainer = document.createElement("div");
			toastContainer.id = "toast-container";
			toastContainer.className = "position-fixed bottom-0 end-0 p-3";
			toastContainer.style.zIndex = "1050";
			document.body.appendChild(toastContainer);
		  }

		  // Create unique ID for this toast
		  const toastId = "toast-" + Date.now();

		  // Create the toast element with auto-hide enabled
		  const toastEl = document.createElement("div");
		  toastEl.id = toastId;
		  toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
		  toastEl.setAttribute("role", "alert");
		  toastEl.setAttribute("aria-live", "assertive");
		  toastEl.setAttribute("aria-atomic", "true");
		  toastEl.setAttribute("data-bs-autohide", "true");
		  toastEl.setAttribute("data-bs-delay", "3000");

		  // Create toast content (without close button for auto-closing)
		  toastEl.innerHTML = `
			<div class="d-flex">
			  <div class="toast-body">
				${message}
			  </div>
			</div>
		  `;

		  // Add to container
		  toastContainer.appendChild(toastEl);

		  // Initialize and show the toast using jQuery if available
		  if (typeof $ !== 'undefined') {
			$(toastEl).toast('show');
		  } else {
			// Use the bootstrap object if available
			if (typeof bootstrap !== 'undefined' && typeof bootstrap.Toast !== 'undefined') {
			  const bsToast = new bootstrap.Toast(toastEl, {
				autohide: true,
				delay: 3000
			  });
			  bsToast.show();
			} else {
			  // Last resort - manual display if Bootstrap JS is not properly loaded
			  toastEl.classList.add('show');
			  setTimeout(() => {
				toastEl.classList.remove('show');
				setTimeout(() => toastEl.remove(), 150);
			  }, 3000);
			}
		  }

		  // Ensure toast is removed after 3.5 seconds regardless of BS implementation
		  setTimeout(() => {
			if (document.getElementById(toastId)) {
			  document.getElementById(toastId).remove();
			}
		  }, 3500);
		}

		// Handle Report Post Form Submission
		document.getElementById("reportPostForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const postId = parseInt(document.getElementById("reportPostId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportPostContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this post.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportPost`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				reportId: 0, // The server will assign this
				postId: postId,
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportPostModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportPostModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportPostContent").value = "";

			  // Show success message
			  showToast("Post reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting post: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting post: ${error.message}`, "danger");
		  }
		});

		// Handle Report Comment Form Submission
		document.getElementById("reportCommentForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const commentId = parseInt(document.getElementById("reportCommentId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportCommentContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this comment.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportComment`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				commentId: commentId, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportCommentModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportCommentModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportCommentContent").value = "";

			  // Show success message
			  showToast("Comment reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting comment: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting comment: ${error.message}`, "danger");
		  }
		});

		// Handle Report User Form Submission
		document.getElementById("reportUserForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const userreportedId = '@Model.CurrentUserId';
		  const userId = document.getElementById("reportUserreportedId").value;
		  const content = document.getElementById("reportUserContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this user.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportUser`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				userreportedId: userreportedId, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportUserModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportUserModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportUserContent").value = "";

			  // Show success message
			  showToast("User reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting user: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting user: ${error.message}`, "danger");
		  }
		});

		// This is the key fix: Add event listeners to modal events
		document.addEventListener('DOMContentLoaded', function() {
		  // Listen for Post reporting modal show event
		  document.getElementById('reportPostModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract post ID from data attribute
			const postId = button.getAttribute('data-post-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportPostId').value = postId;
		  });

		  // Listen for Comment reporting modal show event
		  document.getElementById('reportCommentModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract comment ID from data attribute
			const commentId = button.getAttribute('data-comment-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportCommentId').value = commentId;
		  });

		  // Listen for User reporting modal show event
		  document.getElementById('reportUserModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract user ID from data attribute
			const userId = button.getAttribute('data-user-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportUserreportedId').value = userId;
		  });

		  // Add click event listeners to all report buttons as a backup method
		  document.querySelectorAll('.report-post').forEach(button => {
			button.addEventListener('click', function() {
			  const postId = this.getAttribute('data-post-id');
			  document.getElementById('reportPostId').value = postId;
			});
		  });

		  document.querySelectorAll('.report-comment').forEach(button => {
			button.addEventListener('click', function() {
			  const commentId = this.getAttribute('data-comment-id');
			  document.getElementById('reportCommentId').value = commentId;
			});
		  });

		  document.querySelectorAll('.report-user').forEach(button => {
			button.addEventListener('click', function() {
			  const userId = this.getAttribute('data-user-id');
			  document.getElementById('reportUserreportedId').value = userId;
			});
		  });
		});

		// For backwards compatibility, keep these functions (but they shouldn't be needed anymore)
		function openReportPostModal(postId) {
		  document.getElementById("reportPostId").value = postId;
		  const reportPostModal = new bootstrap.Modal(document.getElementById("reportPostModal"));
		  reportPostModal.show();
		}

		function openReportCommentModal(commentId) {
		  document.getElementById("reportCommentId").value = commentId;
		  const reportCommentModal = new bootstrap.Modal(document.getElementById("reportCommentModal"));
		  reportCommentModal.show();
		}

		function openReportUserModal(userreportedId) {
		  document.getElementById("reportUserreportedId").value = userreportedId;
		  const reportUserModal = new bootstrap.Modal(document.getElementById("reportUserModal"));
		  reportUserModal.show();
		}
	</script>

	<style>
	.subscription-card {
		background-color: #2c2c2c;
		border-radius: 12px;
	}

	.upgrade-card {
		background: linear-gradient(135deg, #636363 0%, #1c76c2 100%);
		border-radius: 12px;
		transition: transform 0.2s ease-in-out;
	}

		.upgrade-card:hover {
			transform: scale(1.03);
		}

	.edit-icon {
		font-size: 1.25rem;
		color: #000000;
		cursor: pointer;
		transition: color 0.2s ease, transform 0.2s ease;
	}

		.edit-icon:hover {
			color: #0056b3;
			transform: scale(1.1);
		}

		.edit-icon:active {
			transform: scale(0.95);
		}

	.gray-bg {
		margin-left: 0,5%;
	}

	.sidebar {
		position: sticky;
		top: 20px; /* khoảng cách từ đỉnh màn hình khi dính */
		z-index: 10;
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	body {
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		line-height: 1.6;
		color: #333;
		background: #f5f5f5;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
	}

	.avtar-header {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
		margin-left: 3%;
	}

	/* Profile Header */
	.profile-header {
		background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
		padding: 40px 0;
		margin-bottom: 30px;
	}

	.profile-content {
		display: flex;
		align-items: flex-start;
		gap: 40px;
	}

	.profile-info {
		flex: 1;
	}

	.instructor-label {
		font-size: 14px;
		color: #FFFAFA;
		font-weight: 500;
		margin-bottom: 10px;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.profile-name {
		/* font-size: 3rem; */
		font-size: 110%;
		font-weight: 700;
		color: black;
		margin-bottom: 10px;
		line-height: 1.2;
	}

	.profile-title {
		font-size: 1.2rem;
		color: #FFFAFA;
		margin-bottom: 20px;
		font-weight: 400;
	}

	.udemy-badge {
		background: linear-gradient(135deg, #000000 0%, #064071 100%);
		color: white;
		padding: 8px 16px;
		border-radius: 20px;
		font-size: 0.85rem;
		font-weight: 600;
		display: inline-block;
		text-decoration: none;
	}

	.profile-avatar-card {
		background: white;
		border-radius: 15px;
		padding: 20px;
		box-shadow: 0 4px 15px rgba(0,0,0,0.1);
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 10px;
		/* min-width: 200px; */
	}

	.profile-avatar {
		width: 140px;
		height: 140px;
		border-radius: 50%;
		object-fit: cover;
		border: 3px solid #064071;
		box-shadow: 0 4px 15px rgba(0,0,0,0.1);
	}

	.social-links {
		display: flex;
		gap: 12px;
	}

	.social-link {
		width: 40px;
		height: 40px;
		border-radius: 8px;
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		text-decoration: none;
		transition: all 0.3s ease;
		font-size: 16px;
		border: 2px solid transparent;
	}

		.social-link.facebook {
			background: #1877F2;
			border-color: #1877F2;
		}

		.social-link.linkedin {
			background: #0A66C2;
			border-color: #0A66C2;
		}

		.social-link.youtube {
			background: #FF0000;
			border-color: #FF0000;
		}

		.social-link:hover {
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(0,0,0,0.2);
		}

	.profile-stats {
		display: flex;
		gap: 30px;
		margin-top: 15px;
	}

	.stat-item {
		text-align: center;
	}

	.stat-number {
		font-size: 1.5rem;
		font-weight: 700;
		color: #FFFAFA;
		display: block;
	}

	.stat-label {
		font-size: 0.9rem;
		color: #FFFAFA;
		font-weight: 500;
	}

		.comment {
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 1px solid #eee;
		}

		.replies {
			margin-top: 10px;
		}

		.reply-comment {
			margin-bottom: 15px;
		}

		.comment {
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 1px solid #eee;
		}

		.replies {
			margin-top: 10px;
		}

		.reply-comment {
			margin-bottom: 15px;
		}	
	</style>
