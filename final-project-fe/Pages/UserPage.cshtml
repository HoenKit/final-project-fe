@page
@model final_project_fe.Pages.UserPageModel
@{
	ViewData["Title"] = "UserPage";
}
@{
	var token = HttpContext.Request.Cookies["AccessToken"];
}
<!DOCTYPE html>
<html lang="en">

<head>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" rel="stylesheet">
</head>
<body>
		<section>
			<div class="feature-photo">
				<figure><img src="images/resources/timeline-4.jpg" alt=""></figure>
				<div class="add-btn">
					<span>1.3k followers</span>
					<a href="#" title="" data-ripple="">Add button</a>
				</div>
				<form class="edit-phto">
					<i class="fa fa-camera-retro"></i>
					<label class="fileContainer">
						Edit Cover Photo
						<input type="file" />
					</label>
				</form>
				<div class="container-fluid">
					<div class="row merged">
						<div class="col-lg-2 col-sm-3">
							<div class="user-avatar">
								<figure>
									<img src="images/resources/user-avatar2.jpg" alt="">
									<form class="edit-phto">
										<i class="fa fa-camera-retro"></i>
										<label class="fileContainer">
											Edit Display Photo
											<input type="file" />
										</label>
									</form>
								</figure>
							</div>
						</div>
						<div class="col-lg-10 col-sm-9">
							<div class="timeline-info">
								<ul>
									<li class="admin-name">
										<h5>Amazon Shop</h5>
										@* <span>@amazonshop</span> *@
									</li>
									<li>
										<a class="active" asp-page="/UserPage" title="" data-ripple="">Page</a>
										<a class="" href="#" title="" data-ripple="">Notifications</a>
										<a class="" href="#" title="" data-ripple="">inbox</a>
										<a class="" href="#" title="" data-ripple="">insights</a>
										@* <a class="" href="fav-page.html" title="" data-ripple="">posts</a> *@
										<a class="" href="#" title="" data-ripple="">likers</a>
									</li>
								</ul>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>

		<section>
			<div class="gap gray-bg">
				<div class="container-fluid">
					<div class="row">
						<div class="col-lg-12">
							<div class="row" id="page-contents">
								<div class="col-lg-3">
									<aside class="sidebar static">
										<div class="widget">
											<h4 class="widget-title">Shortcuts</h4>
											<ul class="naves">
												<li>
													<i class="ti-clipboard"></i>
													<a asp-page="/Index" title="">News feed</a>
												</li>
											@* 	<li>
													<i class="ti-comments-smiley"></i>
													<a href="#" title="">Messages</a>
												</li>
												<li>
													<i class="ti-mouse-alt"></i>
													<a href="#" title="">Inbox</a>
												</li> 
												<li>
													<i class="ti-user"></i>
													<a href="#" title="">friends</a>
												</li> *@
												<li>
													<i class="fa-solid fa-graduation-cap"></i>
													<a asp-page="/Mentor/MentorPage/Index" title="">Courses</a>
												</li>
												<li>
													<i class="ti-image"></i>
													<a href="#" title="">images</a>
												</li>
												<li>
													<i class="ti-video-camera"></i>
													<a href="#" title="">videos</a>
												</li>
												<li>
													<i class="ti-bell"></i>
													<a href="#" title="">Notifications</a>
												</li>
											</ul>
										</div><!-- Shortcuts -->
										<div class="widget">
											<h4 class="widget-title">Recent Activity</h4>
											<ul class="activitiez">
												<li>
													<div class="activity-meta">
														<i>10 hours Ago</i>
														<span><a href="#" title="">Commented on Video posted </a></span>
														<h6>by <a href="time-line.html">black demon.</a></h6>
													</div>
												</li>
												<li>
													<div class="activity-meta">
														<i>30 Days Ago</i>
														<span><a href="#" title="">Posted your status. “Hello guys, how are you?”</a></span>
													</div>
												</li>
												<li>
													<div class="activity-meta">
														<i>2 Years Ago</i>
														<span><a href="#" title="">Share a video on her timeline.</a></span>
														<h6>"<a href="#">you are so funny mr.been.</a>"</h6>
													</div>
												</li>
											</ul>
										</div><!-- recent activites -->
										<div class="widget stick-widget">
											<h4 class="widget-title">Who's follownig</h4>
											<ul class="followers">
												<li>
													<figure><img src="images/resources/friend-avatar2.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Kelly Bill</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar4.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Issabel</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar6.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Andrew</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar8.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Sophia</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar3.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Allen</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
											</ul>
										</div><!-- who's following -->
									</aside>
								</div><!-- sidebar -->
								<div class="col-lg-6">
		@* 									<form method="post">
												<div class="form-group">
													<input asp-for="NewPost.Title" type="text" placeholder="Enter Post Title" class="form-control" required />
												</div>

												<div class="form-group">
													<textarea asp-for="NewPost.Content" rows="3" placeholder="Write something..." class="form-control" required></textarea>
												</div>
												<div class="attachments">
													<ul>
														<li>
															<i class="fa fa-music"></i>
															<label class="fileContainer">
																<input type="file" />
															</label>
														</li>
														<li>
															<i class="fa fa-image"></i>
															<label class="fileContainer">
																<input type="file" />
															</label>
														</li>
														<li>
															<i class="fa fa-video-camera"></i>
															<label class="fileContainer">
																<input type="file" />
															</label>
														</li>
														<li>
															<i class="fa fa-camera"></i>
															<label class="fileContainer">
																<input type="file" />
															</label>
														</li>
														<button type="submit" class="btn btn-primary">Publish</button>
													</ul>
												</div>
											</form>
										</div>
										</div>
									</div> *@
									<!-- add post new box -->
									<div class="loadMore">
@* 										<div class="central-meta item"> *@
											<div class="user-post">
												<!-- Posts container -->
												<div class="posts-container">
													@if (Model.Posts != null && Model.Posts.Items.Any())
													{
														@foreach (var post in Model.Posts.Items.OrderByDescending(p => p.CreateAt))
														{
															<!-- Single post container -->
															<div class="card p-3 mb-3 shadow-sm rounded">
																<!-- Post content -->
																<div class="friend-info">
																	<figure>
																		<img src="@(string.IsNullOrEmpty(post.User?.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : post.User?.UserMetaData.Avatar)"
																			 alt="User Avatar">

																	</figure>

																	<div class="post-meta">
																		<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
																			@post.Title
																		</p>
																	</div>


																	<div class="friend-name">
																		<ins>
																			<a href="time-line.html" title="">
																				@((post.User?.UserMetaData != null) ? $"{post.User.UserMetaData.FirstName} {post.User.UserMetaData.LastName}" : post.User?.Email)
																			</a>
																		</ins>
																		<span>@post.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																		@if (!string.IsNullOrEmpty(token))
																		{
																			<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
																				<div class="dropdown">
																					<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
																						<i class="fa fa-ellipsis-v"></i>
																					</button>
																					<ul class="dropdown-menu">
																						<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="@post.PostId">Report Post</a></li>
																						<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="@post.User?.UserId">Report User</a></li>
																					</ul>
																				</div>
																			</div>
																		}
																	</div>

																	<div class="post-meta">
																		@* 	@if (Model.PostFilesByPost.ContainsKey(post.PostId) && Model.PostFilesByPost[post.PostId].Any(f => f.PostFileType.ToLower() == "image" || f.PostFileType.ToLower() == "video"))
																				{
																					@foreach (var file in Model.PostFilesByPost[post.PostId])
																					{
																						@if (file.PostFileType.ToLower() == "image")
																						{
																							<img src="@file.FileUrl" alt="Post Image" width="400" />
																						}
																						else if (file.PostFileType.ToLower() == "video")
																						{
																							<iframe src="@file.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																						}
																					}
																				} *@
																		@* 	else
																				{
																					<img src="https://toigingiuvedep.vn/wp-content/uploads/2021/06/hinh-anh-bau-troi-dem-day-sao-tuyet-dep-cho-may-tinh.jpg"
																						 alt="Default Post Image" width="400" />
																				} *@

																		@if (post.PostFiles != null && post.PostFiles.Any())
																		{
																			foreach (var postFile in post.PostFiles)
																			{
																				if (postFile.PostFileType.ToLower() == "image")
																				{
																					<img src="@postFile.FileUrl" alt="Post Image" width="400" />
																				}
																				else
																				{
																					<iframe src="@postFile.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																				}
																			}
																		}

																		<div class="description">
																			<p>@post.Content</p>
																		</div>
																	</div>

																	<!-- Comment section -->
																	<div class="comments-section" id="commentList-@post.PostId">
																		@if (Model.CommentsByPost.ContainsKey(post.PostId))
																		{
																			var comments = Model.CommentsByPost[post.PostId];
																			var parentComments = comments.Where(c => c.ParentCommentId == null).OrderBy(c => c.CreateAt);

																			foreach (var parent in parentComments)
																			{
																				<!-- TEST -->
																				if (parent == null || parent.User == null){
																				<!-- TEST -->

																				// Comment gốc
																				var user = parent.User;
																				var userMeta = user?.UserMetaData;
																				var avatar = string.IsNullOrEmpty(userMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : userMeta.Avatar;
																				var displayName = userMeta != null ? $"{userMeta.FirstName} {userMeta.LastName}" : user?.Email;

																				<div class="comment" data-comment-id="@parent.CommentId">
																					<div class="comet-avatar">
																						<img src="@avatar" alt="User Avatar">
																					</div>
																					<div class="we-comment">
																						<div class="coment-head">
																							<h5><a href="#">@displayName</a></h5>
																							<span>@parent.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																							@if (!string.IsNullOrEmpty(token))
																							{
																								<a class="we-reply" href="javascript:void(0)" data-reply-to="@parent.CommentId"><i class="fa fa-reply"></i></a>
																							}
																						</div>
																						<p>@parent.Content</p>
																						@if (!string.IsNullOrEmpty(token))
																						{
																							<div class="reply-form" style="display:none; margin-top: 10px;">
																								<form class="comment-form">
																									<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																									<input type="hidden" name="NewComment.ParentCommentId" value="@parent.CommentId" />
																									<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																									<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																								</form>
																							</div>
																						}
																					</div>
																				</div>

																				// Hiển thị reply cấp 1
																				var firstLevelReplies = comments.Where(c => c.ParentCommentId == parent.CommentId).OrderBy(c => c.CreateAt);
																				foreach (var reply in firstLevelReplies)
																				{
																					var replyUser = reply.User;
																					var replyMeta = replyUser?.UserMetaData;
																					var replyAvatar = string.IsNullOrEmpty(replyMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : replyMeta.Avatar;
																					var replyName = replyMeta != null ? $"{replyMeta.FirstName} {replyMeta.LastName}" : replyUser?.Email;

																					<div class="comment reply-comment ms-5" data-comment-id="@reply.CommentId" data-parent-id="@parent.CommentId">
																						<div class="comet-avatar">
																							<img src="@replyAvatar" alt="User Avatar">
																						</div>
																						<div class="we-comment">
																							<div class="coment-head">
																								<h5><a href="#">@replyName</a></h5>
																								<span>@reply.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																								@if (!string.IsNullOrEmpty(token))
																								{
																									<a class="we-reply" href="javascript:void(0)" data-reply-to="@reply.CommentId"><i class="fa fa-reply"></i></a>
																								}
																							</div>
																							<p>@reply.Content</p>
																							@if (!string.IsNullOrEmpty(token))
																							{
																								<div class="reply-form" style="display:none; margin-top: 10px;">
																									<form class="comment-form">
																										<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																										<input type="hidden" name="NewComment.ParentCommentId" value="@reply.CommentId" />
																										<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																										<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																									</form>
																								</div>
																							}
																						</div>
																					</div>

																					// reply of reply
																					var secondLevelReplies = comments.Where(c => c.ParentCommentId == reply.CommentId).OrderBy(c => c.CreateAt);
																					foreach (var level2 in secondLevelReplies)
																					{
																						var level2User = level2.User;
																						var level2Meta = level2User?.UserMetaData;
																						var level2Avatar = string.IsNullOrEmpty(level2Meta?.Avatar) ? "images/resources/friend-avatar9.jpg" : level2Meta.Avatar;
																						var level2Name = level2Meta != null ? $"{level2Meta.FirstName} {level2Meta.LastName}" : level2User?.Email;

																						<div class="comment reply-comment ms-5" data-comment-id="@level2.CommentId" data-parent-id="@level2.ParentCommentId">
																							<div class="comet-avatar">
																								<img src="@level2Avatar" alt="User Avatar">
																							</div>
																							<div class="we-comment">
																								<div class="coment-head">
																									<h5><a href="#">@level2Name</a></h5>
																									<span>@level2.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																									@if (!string.IsNullOrEmpty(token))
																									{
																										<a class="we-reply" href="javascript:void(0)" data-reply-to="@level2.CommentId"><i class="fa fa-reply"></i></a>
																									}
																								</div>
																								<p>@level2.Content</p>
																								@if (!string.IsNullOrEmpty(token))
																								{
																									<div class="reply-form" style="display:none; margin-top: 10px;">
																										<form class="comment-form">
																											<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																											<input type="hidden" name="NewComment.ParentCommentId" value="@level2.CommentId" />
																											<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																											<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																										</form>
																									</div>
																								}
																							</div>
																						</div>
																					}
																				}
																			}
																			}
																		}
																		else
																		{
																			<p>No comments available.</p>
																		}
																	</div>
																	<!-- Comment input form -->
																	@if (!string.IsNullOrEmpty(token))
																	{
																		<!-- Comment input form -->
																		<div class="coment-area">
																			<ul class="we-comet">
																				<li class="post-comment">
																					<div class="comet-avatar">
																						<img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
																					</div>
																					<div class="post-comt-box">
																						<form class="comment-form">
																							<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																							<input type="hidden" name="NewComment.ParentCommentId" />
																							<label>Comment:</label>
																							<textarea name="NewComment.Content" placeholder="Write a comment..."></textarea>
																							<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
																						</form>
																					</div>
																				</li>
																			</ul>
																		</div>
																	}
																</div>
															</div>
														}
														<div class="pagination mt-3">
															<p>Page @Model.Posts.CurrentPage / @Model.Posts.TotalPages</p>
															<!-- Add pagination controls here if needed -->
														</div>
													}
													else
													{
														<div class="alert alert-info">No posts available.</div>
													}
												</div>
											</div>
										</div>
									</div><!-- centerl meta -->
									<div class="col-lg-3">
										<aside class="sidebar static">
											<div class="advertisment-box">
												<h4 class="">advertisment</h4>
												<figure>
													<a href="#" title="Advertisment"><img src="images/resources/ad-widget.jpg" alt=""></a>
												</figure>
											</div>
											<div class="widget">
												<h4 class="widget-title">Invite friends</h4>
												<ul class="invition">
													<li>
														<figure><img src="images/resources/friend-avatar8.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" class="underline" title="">Sophia hayat</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>
													<li>
														<figure><img src="images/resources/friend-avatar4.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" class="underline" title="">Issabel kaif</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>
													<li>
														<figure><img src="images/resources/friend-avatar2.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" class="underline" title="">Kelly Bill</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>
													<li>
														<figure><img src="images/resources/friend-avatar3.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" class="underline" title="">Allen jhon</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>
													<li>
														<figure><img src="images/resources/friend-avatar6.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" class="underline" title="">tom Andrew</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>

													<li>
														<figure><img src="images/resources/friend-avatar3.jpg" alt=""></figure>
														<div class="friend-meta">
															<h4><a href="time-line.html" title="" class="underline">Allen doe</a></h4>
															<a href="#" title="" class="invite" data-ripple="">invite</a>
														</div>
													</li>
												</ul>
											</div><!-- invite for page  -->

											<div class="widget friend-list stick-widget">
												<h4 class="widget-title">Friends</h4>
												<div id="searchDir"></div>
												<ul id="people-list" class="friendz-list">
													<li>
														<figure>
															<img src="images/resources/friend-avatar.jpg" alt="">
															<span class="status f-online"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">bucky barnes</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1e6977706a7b6c6d71727a7b6c5e79737f7772307d7173">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>
														<figure>
															<img src="images/resources/friend-avatar2.jpg" alt="">
															<span class="status f-away"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">Sarah Loren</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="debcbfacb0bbad9eb9b3bfb7b2f0bdb1b3">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>
														<figure>
															<img src="images/resources/friend-avatar3.jpg" alt="">
															<span class="status f-off"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">jason borne</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0e646f7d61606c4e69636f6762206d6163">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>
														<figure>
															<img src="images/resources/friend-avatar4.jpg" alt="">
															<span class="status f-off"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">Cameron diaz</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="513b30223e3f3311363c30383d7f323e3c">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>

														<figure>
															<img src="images/resources/friend-avatar5.jpg" alt="">
															<span class="status f-online"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">daniel warber</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="315b50425e5f5371565c50585d1f525e5c">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>

														<figure>
															<img src="images/resources/friend-avatar6.jpg" alt="">
															<span class="status f-away"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">andrew</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f69c9785999894b6919b979f9ad895999b">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>

														<figure>
															<img src="images/resources/friend-avatar7.jpg" alt="">
															<span class="status f-off"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">amy watson</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bad0dbc9d5d4d8faddd7dbd3d694d9d5d7">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>

														<figure>
															<img src="images/resources/friend-avatar5.jpg" alt="">
															<span class="status f-online"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">daniel warber</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="076d667468696547606a666e6b2964686a">[email&#160;protected]</a></i>
														</div>
													</li>
													<li>

														<figure>
															<img src="images/resources/friend-avatar2.jpg" alt="">
															<span class="status f-away"></span>
														</figure>
														<div class="friendz-meta">
															<a href="time-line.html">Sarah Loren</a>
															<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b1d3d0c3dfd4c2f1d6dcd0d8dd9fd2dedc">[email&#160;protected]</a></i>
														</div>
													</li>
												</ul>
												<div class="chat-box">
													<div class="chat-head">
														<span class="status f-online"></span>
														<h6>Bucky Barnes</h6>
														<div class="more">
															<span><i class="ti-more-alt"></i></span>
															<span class="close-mesage"><i class="ti-close"></i></span>
														</div>
													</div>
													<div class="chat-list">
														<ul>
															<li class="me">
																<div class="chat-thumb"><img src="images/resources/chatlist1.jpg" alt=""></div>
																<div class="notification-event">
																	<span class="chat-message-item">
																		Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																	</span>
																	<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
																</div>
															</li>
															<li class="you">
																<div class="chat-thumb"><img src="images/resources/chatlist2.jpg" alt=""></div>
																<div class="notification-event">
																	<span class="chat-message-item">
																		Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																	</span>
																	<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
																</div>
															</li>
															<li class="me">
																<div class="chat-thumb"><img src="images/resources/chatlist1.jpg" alt=""></div>
																<div class="notification-event">
																	<span class="chat-message-item">
																		Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																	</span>
																	<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
																</div>
															</li>
														</ul>
														<form class="text-box">
															<textarea placeholder="Post enter to post..."></textarea>
															<div class="add-smiles">
																<span title="add icon" class="em em-expressionless"></span>
															</div>
															<div class="smiles-bunch">
																<i class="em em---1"></i>
																<i class="em em-smiley"></i>
																<i class="em em-anguished"></i>
																<i class="em em-laughing"></i>
																<i class="em em-angry"></i>
																<i class="em em-astonished"></i>
																<i class="em em-blush"></i>
																<i class="em em-disappointed"></i>
																<i class="em em-worried"></i>
																<i class="em em-kissing_heart"></i>
																<i class="em em-rage"></i>
																<i class="em em-stuck_out_tongue"></i>
															</div>
															<button type="submit"></button>
														</form>
													</div>
												</div>
											</div><!-- friends list sidebar -->
										</aside>
									</div><!-- sidebar -->
								</div>
							</div>
						</div>
					</div>
				</div>
		</section>
		<div class="bottombar">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
						<span class="copyright"><a target="_blank" href="https://www.templateshub.net">Templates Hub</a></span>
						<i><img src="images/credit-cards.png" alt=""></i>
					</div>
				</div>
			</div>
		</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
	<script>
		// Configuration from Razor model
		const BASE_URL = "@Model.BaseUrl";

		// Create toast notification system - replaces the old alert system
		function showToast(message, type = "success") {
		  // Create toast container if it doesn't exist yet
		  let toastContainer = document.getElementById("toast-container");
		  if (!toastContainer) {
			toastContainer = document.createElement("div");
			toastContainer.id = "toast-container";
			toastContainer.className = "position-fixed bottom-0 end-0 p-3";
			toastContainer.style.zIndex = "1050";
			document.body.appendChild(toastContainer);
		  }

		  // Create unique ID for this toast
		  const toastId = "toast-" + Date.now();

		  // Create the toast element with auto-hide enabled
		  const toastEl = document.createElement("div");
		  toastEl.id = toastId;
		  toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
		  toastEl.setAttribute("role", "alert");
		  toastEl.setAttribute("aria-live", "assertive");
		  toastEl.setAttribute("aria-atomic", "true");
		  toastEl.setAttribute("data-bs-autohide", "true");
		  toastEl.setAttribute("data-bs-delay", "3000");

		  // Create toast content (without close button for auto-closing)
		  toastEl.innerHTML = `
			<div class="d-flex">
			  <div class="toast-body">
				${message}
			  </div>
			</div>
		  `;

		  // Add to container
		  toastContainer.appendChild(toastEl);

		  // Initialize and show the toast using jQuery if available
		  if (typeof $ !== 'undefined') {
			$(toastEl).toast('show');
		  } else {
			// Use the bootstrap object if available
			if (typeof bootstrap !== 'undefined' && typeof bootstrap.Toast !== 'undefined') {
			  const bsToast = new bootstrap.Toast(toastEl, {
				autohide: true,
				delay: 3000
			  });
			  bsToast.show();
			} else {
			  // Last resort - manual display if Bootstrap JS is not properly loaded
			  toastEl.classList.add('show');
			  setTimeout(() => {
				toastEl.classList.remove('show');
				setTimeout(() => toastEl.remove(), 150);
			  }, 3000);
			}
		  }

		  // Ensure toast is removed after 3.5 seconds regardless of BS implementation
		  setTimeout(() => {
			if (document.getElementById(toastId)) {
			  document.getElementById(toastId).remove();
			}
		  }, 3500);
		}

		// Handle Report Post Form Submission
		document.getElementById("reportPostForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const postId = parseInt(document.getElementById("reportPostId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportPostContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this post.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportPost`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				reportId: 0, // The server will assign this
				postId: postId,
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportPostModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportPostModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportPostContent").value = "";

			  // Show success message
			  showToast("Post reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting post: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting post: ${error.message}`, "danger");
		  }
		});

		// Handle Report Comment Form Submission
		document.getElementById("reportCommentForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const commentId = parseInt(document.getElementById("reportCommentId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportCommentContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this comment.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportComment`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				commentId: commentId,
				reportId: 0, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportCommentModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportCommentModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportCommentContent").value = "";

			  // Show success message
			  showToast("Comment reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting comment: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting comment: ${error.message}`, "danger");
		  }
		});

		// Handle Report User Form Submission
		document.getElementById("reportUserForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const userreportedId = '@Model.CurrentUserId';
		  const userId = document.getElementById("reportUserreportedId").value;
		  const content = document.getElementById("reportUserContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this user.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportUser`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				userreportedId: userreportedId,
				reportId: 0, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportUserModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportUserModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportUserContent").value = "";

			  // Show success message
			  showToast("User reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting user: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting user: ${error.message}`, "danger");
		  }
		});

		// This is the key fix: Add event listeners to modal events
		document.addEventListener('DOMContentLoaded', function() {
		  // Listen for Post reporting modal show event
		  document.getElementById('reportPostModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract post ID from data attribute
			const postId = button.getAttribute('data-post-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportPostId').value = postId;
		  });

		  // Listen for Comment reporting modal show event
		  document.getElementById('reportCommentModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract comment ID from data attribute
			const commentId = button.getAttribute('data-comment-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportCommentId').value = commentId;
		  });

		  // Listen for User reporting modal show event
		  document.getElementById('reportUserModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract user ID from data attribute
			const userId = button.getAttribute('data-user-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportUserreportedId').value = userId;
		  });

		  // Add click event listeners to all report buttons as a backup method
		  document.querySelectorAll('.report-post').forEach(button => {
			button.addEventListener('click', function() {
			  const postId = this.getAttribute('data-post-id');
			  document.getElementById('reportPostId').value = postId;
			});
		  });

		  document.querySelectorAll('.report-comment').forEach(button => {
			button.addEventListener('click', function() {
			  const commentId = this.getAttribute('data-comment-id');
			  document.getElementById('reportCommentId').value = commentId;
			});
		  });

		  document.querySelectorAll('.report-user').forEach(button => {
			button.addEventListener('click', function() {
			  const userId = this.getAttribute('data-user-id');
			  document.getElementById('reportUserreportedId').value = userId;
			});
		  });
		});

		// For backwards compatibility, keep these functions (but they shouldn't be needed anymore)
		function openReportPostModal(postId) {
		  document.getElementById("reportPostId").value = postId;
		  const reportPostModal = new bootstrap.Modal(document.getElementById("reportPostModal"));
		  reportPostModal.show();
		}

		function openReportCommentModal(commentId) {
		  document.getElementById("reportCommentId").value = commentId;
		  const reportCommentModal = new bootstrap.Modal(document.getElementById("reportCommentModal"));
		  reportCommentModal.show();
		}

		function openReportUserModal(userreportedId) {
		  document.getElementById("reportUserreportedId").value = userreportedId;
		  const reportUserModal = new bootstrap.Modal(document.getElementById("reportUserModal"));
		  reportUserModal.show();
		}
	</script>


	<style>
		.comments-section .comment {
			margin-bottom: 20px; /* Tạo khoảng cách giữa các comment */
			padding-bottom: 10px; /* Tạo khoảng cách phía dưới comment */
			border-bottom: 1px solid #ddd; /* Thêm một đường phân cách giữa các comment */
		}

			.comments-section .comment.reply-comment {
				margin-left: 40px; /* Thụt vào cho các reply */
				border-left: 2px solid #ccc; /* Đường viền phân biệt reply */
				padding-left: 10px;
			}

		.coment-area {
			margin-top: 20px;
		}

			.coment-area .post-comt-box {
				margin-top: 10px;
			}

				.coment-area .post-comt-box textarea {
					width: 100%;
					height: 100px;
					padding: 10px;
					border: 1px solid #ddd;
					border-radius: 5px;
				}

			.comment {
				margin-bottom: 20px;
				padding-bottom: 10px;
				border-bottom: 1px solid #eee;
			}

			.replies {
				margin-top: 10px;
			}

			.reply-comment {
				margin-bottom: 15px;
			}
	</style>

</body>


</html>