@page
@model final_project_fe.Pages.ChattingModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phronesis - Chatting</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Top Navigation */
        .top-nav {
            background-color: white;
            border-bottom: 1px solid #e0e0e0;
            padding: 0 20px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-left {
            display: flex;
            align-items: center;
            gap: 30px;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #1c1e21;
        }

        .nav-menu {
            display: flex;
            gap: 30px;
        }

        .nav-item {
            color: #65676b;
            text-decoration: none;
            font-size: 15px;
            font-weight: 500;
            transition: color 0.2s;
        }

            .nav-item:hover, .nav-item.active {
                color: #1877f2;
            }

        .nav-right {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .nav-icon {
            width: 40px;
            height: 40px;
            background-color: #f0f2f5;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }

            .nav-icon:hover {
                background-color: #e4e6ea;
            }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
            cursor: pointer;
        }

        .empty-chat-message {
            display: flex;
            justify-content: center; /* Căn ngang */
            align-items: center; /* Căn dọc */
            height: 100%; /* Chiếm toàn bộ chiều cao khung cha */
            font-size: 1.2rem; /* Chữ lớn hơn một chút */
            font-style: italic; /* Chữ nghiêng */
            color: #666; /* Màu chữ nhạt */
            text-align: center;
            padding: 20px;
            border-radius: 8px;
            background: #f9f9f9; /* Nền nhẹ */
        }
        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            height: calc(100vh - 60px);
        }

        .chat-container {
            flex: 1;
            display: flex;
            background-color: white;
            margin: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .sidebar {
            width: 350px;
            background-color: white;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .sidebar-title {
            font-size: 24px;
            font-weight: bold;
            color: #1c1e21;
        }

        .header-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            width: 36px;
            height: 36px;
            background-color: #f0f2f5;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
            color: #65676b;
        }

            .action-btn:hover {
                background-color: #e4e6ea;
            }

        .search-box {
            margin: 16px 16px 0 16px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px 12px 40px;
            border: none;
            background-color: #f0f2f5;
            border-radius: 20px;
            font-size: 14px;
            color: #1c1e21;
        }

            .search-input::placeholder {
                color: #65676b;
            }

        .search-icon {
            position: absolute;
            left: 14px;
            top: 50%;
            transform: translateY(-50%);
            color: #65676b;
            font-size: 16px;
        }

        .filter-tabs {
            display: flex;
            padding: 16px 16px 0 16px;
            border-bottom: 1px solid #e0e0e0;
        }

        .filter-tab {
            padding: 12px 16px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 14px;
            color: #65676b;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
            font-weight: 500;
        }

            .filter-tab.active {
                color: #1877f2;
                border-bottom-color: #1877f2;
            }

            .filter-tab:hover {
                background-color: #f0f2f5;
                border-radius: 6px;
            }

        .chat-list {
            flex: 1;
            overflow-y: auto;
            padding: 8px 0;
        }

        .chat-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
            transition: background-color 0.2s;
            border-radius: 8px;
            margin: 0 8px;
        }

            .chat-item:hover {
                background-color: #f0f2f5;
            }

            .chat-item.active {
                background-color: #e7f3ff;
            }

        .avatar {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 12px;
        }

        .chat-info {
            flex: 1;
            overflow: hidden;
        }

        .chat-name {
            font-weight: 600;
            color: #1c1e21;
            font-size: 15px;
            margin-bottom: 4px;
        }

        .chat-preview {
            color: #65676b;
            font-size: 13px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-time {
            color: #65676b;
            font-size: 12px;
            margin-left: 8px;
        }

        .status-indicator {
            width: 14px;
            height: 14px;
            background-color: #42b883;
            border-radius: 50%;
            border: 2px solid white;
            position: absolute;
            bottom: 2px;
            right: 2px;
        }

        .avatar-container {
            position: relative;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: white;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-user-info {
            display: flex;
            align-items: center;
        }

        .chat-user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 12px;
        }

        .chat-user-name {
            font-weight: 600;
            color: #1c1e21;
            font-size: 16px;
        }

        .chat-actions {
            display: flex;
            gap: 8px;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #f8f9fa;
        }

        .message {
            display: flex;
            margin-bottom: 16px;
            align-items: flex-start;
        }

            .message.sent {
                justify-content: flex-end;
            }

        .message-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 8px;
        }

        .message.sent .message-avatar {
            display: none;
        }

        .message-content {
            max-width: 70%;
            padding: 10px 16px;
            border-radius: 18px;
            background-color: #e4e6ea;
            color: #1c1e21;
            font-size: 14px;
            line-height: 1.4;
        }

        .message.sent .message-content {
            background-color: #1877f2;
            color: white;
        }

        .message-image {
            max-width: 300px;
            border-radius: 12px;
            margin-top: 8px;
        }

        .message-input-container {
            padding: 20px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .message-input {
            flex: 1;
            padding: 10px 16px;
            border: 1px solid #e0e0e0;
            border-radius: 20px;
            font-size: 14px;
            resize: none;
            min-height: 20px;
            max-height: 100px;
            font-family: inherit;
        }

            .message-input:focus {
                outline: none;
                border-color: #1877f2;
            }

        .send-btn {
            width: 36px;
            height: 36px;
            background-color: #1877f2;
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
            font-size: 16px;
        }

            .send-btn:hover {
                background-color: #166fe5;
            }

            .send-btn:disabled {
                background-color: #e4e6ea;
                cursor: not-allowed;
            }

        .input-actions {
            display: flex;
            gap: 8px;
        }

        .input-action-btn {
            width: 32px;
            height: 32px;
            background: none;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1877f2;
            transition: background-color 0.2s;
            font-size: 16px;
        }

            .input-action-btn:hover {
                background-color: #f0f2f5;
            }

        .emoji-btn {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            padding: 6px;
            border-radius: 50%;
            transition: background-color 0.2s;
        }

            .emoji-btn:hover {
                background-color: #f0f2f5;
            }

        .right-sidebar {
            width: 280px;
            background-color: white;
            border-left: 1px solid #e0e0e0;
            padding: 20px;
            overflow-y: auto;
        }

        .sidebar-section {
            margin-bottom: 24px;
        }

            .sidebar-section h3 {
                font-size: 16px;
                font-weight: 600;
                color: #1c1e21;
                margin-bottom: 12px;
            }

        .sidebar-links {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .sidebar-link {
            color: #65676b;
            text-decoration: none;
            font-size: 14px;
            padding: 4px 0;
            transition: color 0.2s;
        }

            .sidebar-link:hover {
                color: #1877f2;
            }

        .contact-info {
            background-color: #f8f9fa;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 16px;
        }

            .contact-info h4 {
                font-size: 16px;
                font-weight: 600;
                color: #1c1e21;
                margin-bottom: 8px;
            }

            .contact-info p {
                color: #65676b;
                font-size: 14px;
                line-height: 1.4;
                margin-bottom: 8px;
            }

        .contact-phone {
            color: #1877f2;
            font-weight: 500;
        }

        @@media (max-width: 1200px) {
            .right-sidebar

        {
            display: none;
        }

        }

        @@media (max-width: 768px) {
            .sidebar

        {
            width: 100%;
            position: absolute;
            z-index: 10;
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .sidebar.active {
            transform: translateX(0);
        }

        .chat-area {
            width: 100%;
        }

        .nav-menu {
            display: none;
        }

        }

        .back-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: none;
            background-color: #2d2d2d;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }

            .back-btn i {
                font-size: 20px; /* hoặc 22px nếu muốn lớn hơn nữa */
            }

            .back-btn:hover {
                background-color: #1c1c1c;
            }
    </style>
</head>
<body>


    <!-- Main Content -->
    <div class="main-content">
        <!-- Chat Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <button class="back-btn" onclick="history.back()">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <h1 class="sidebar-title">Chatting</h1>
            </div>
            <div class="chat-list" id="chatList">
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-header" style="display: none;">
                <div class="chat-user-info">
                    <img src="" alt="Avatar" class="chat-user-avatar">
                    <div class="chat-user-name"></div>
                </div>
            </div>

            <div class="messages-container empty-chat">
                <div style="text-align: center; font-size: 24px; font-weight: bold; padding: 40px; color: #666;">
                    <i class="fas fa-comments" style="font-size: 32px; color: #999;"></i><br><br>
                    Select a conversation to start messaging
                    <br><br>
                    <i class="far fa-smile-wink" style="font-size: 20px; color: #ccc;"></i>
                    <i class="fas fa-paper-plane" style="font-size: 20px; color: #ccc;"></i>
                </div>
            </div>

            <div class="message-input-container" style="display: none;">
                <textarea class="message-input" placeholder="Aa" rows="1"></textarea>
                <button class="send-btn">➤</button>
            </div>
        </div>
        </div>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
           const ChatApp = {
            // Configuration
            config: {
                baseUrl: "@Model.BaseUrl",
                hubUrl: "@Model.HubUrl",
                currentUserId: "@Model.CurrentUserId",
                reconnectAttempts: 3,
                messageCleanupThreshold: 200,
                duplicatePreventionTime: 1000
            },

            // State management
            state: {
                connection: null,
                currentReceiverId: '',
                currentReceiverName: '',
                currentReceiverAvatar: '',
                isConnected: false,
                isInitialized: false,
                isSending: false,
                lastSentContent: '',
                lastSentTime: 0
            },

            // Data tracking
            trackers: {
                messageTracker: new Map(),
                domMessageIds: new Set(),
                pendingMessages: []
            },

            // Utility functions
            utils: {
                normalize: (id) => id?.toString().trim().toLowerCase(),

                createUniqueMessageKey: (message) => {
                    return message.id ? `id-${message.id}` :
                           `${message.senderId}-${message.receiverId}-${message.content}-${Date.now()}`;
                },

                createDOMMessageId: (message) => {
                    return message.id ? `msg-${message.id}` :
                           `temp-${message.senderId}-${message.receiverId}-${message.content}-${Date.now()}`;
                },

                getQueryParam: (key) => {
                    const urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get(key);
                },

                cleanupTracker: (tracker, threshold = 200, keepCount = 100) => {
                    if (tracker.size > threshold) {
                        const entries = Array.from(tracker.entries()).sort((a, b) => a[1] - b[1]);
                        entries.slice(0, keepCount).forEach(([key]) => tracker.delete(key));
                    }
                }
            },

            // SignalR Connection Management
            connection: {
                async initialize() {
                    try {
                        // Create new connection
                        ChatApp.state.connection = new signalR.HubConnectionBuilder()
                            .withUrl(`${ChatApp.config.hubUrl}/postHub?userId=${ChatApp.config.currentUserId}`)
                            .withAutomaticReconnect()
                            .build();

                        ChatApp.connection.setupEventHandlers();
                        return await ChatApp.connection.start();
                    } catch (error) {
                        console.error("❌ Failed to initialize SignalR connection:", error);
                        return false;
                    }
                },

                async start() {
                    if (ChatApp.state.connection.state === signalR.HubConnectionState.Connected) {
                        console.warn("⚠️ Already connected to SignalR.");
                        return true;
                    }

                    try {
                        console.log("🔌 Attempting to connect to SignalR...");
                        await ChatApp.state.connection.start();
                        console.log("✅ SignalR connected successfully!");
                        ChatApp.state.isConnected = true;
                        return true;
                    } catch (error) {
                        console.error("❌ SignalR connection failed:", error);
                        ChatApp.state.isConnected = false;
                        return false;
                    }
                    },

                setupEventHandlers() {
                    const conn = ChatApp.state.connection;

                    if (!conn) {
                        console.error("❌ Cannot setup handlers: connection is null");
                        return;
                    }

                    try {
                        // Message reception handler
                        conn.on("ReceiveMessage", ChatApp.handlers.onReceiveMessage);
                        conn.on("NewChatRoom", ChatApp.handlers.onNewChatRoom);

                        // Connection state handlers
                    conn.onreconnecting(error => {
                        ChatApp.state.connectionStatus = "Reconnecting";
                        console.warn("🔄 SignalR reconnecting...", error);
                    });

                    conn.onreconnected(connectionId => {
                        ChatApp.state.connectionStatus = "Connected";
                        console.log("✅ Reconnected! Connection ID:", connectionId);
                    });

                    conn.onclose(error => {
                        ChatApp.state.connectionStatus = "Disconnected";
                        console.error("❌ SignalR connection closed", error);
                    });

                        console.log("✅ SignalR event handlers setup complete");
                    } catch (error) {
                        console.error("❌ Error setting up SignalR handlers:", error);
                    }
                }
            },

            // Event Handlers
           handlers: {
                onReceiveMessage(message) {
                console.log("📥 Received message via SignalR:", message);
                console.log("Current state:", {
                currentReceiverId: ChatApp.state.currentReceiverId,
                currentUserId: ChatApp.config.currentUserId,
                isInitialized: ChatApp.state.isInitialized
                });

            const messageKey = ChatApp.utils.createUniqueMessageKey(message);

            if (ChatApp.trackers.messageTracker.has(messageKey)) {
                console.log("🔄 Duplicate message ignored");
                return;
            }

            ChatApp.trackers.messageTracker.set(messageKey, Date.now());

            const { normalize } = ChatApp.utils;
            const { currentReceiverId, isInitialized } = ChatApp.state;
            const { currentUserId } = ChatApp.config;

            const isIncomingMessage = normalize(message.senderId) === normalize(currentReceiverId) &&
                                     normalize(message.receiverId) === normalize(currentUserId);

            const isOutgoingMessage = normalize(message.senderId) === normalize(currentUserId) &&
                                     normalize(message.receiverId) === normalize(currentReceiverId);

            const isRelevantToCurrentChat = isIncomingMessage || isOutgoingMessage;

            console.log("Message routing debug:", {
                isIncoming: isIncomingMessage,
                isOutgoing: isOutgoingMessage,
                isRelevant: isRelevantToCurrentChat,
                isInitialized,
                currentReceiverId: !!currentReceiverId,
                messageDetails: {
                    from: message.senderId,
                    to: message.receiverId,
                    chatWith: currentReceiverId,
                    currentUser: currentUserId
                }
            });

            if (isRelevantToCurrentChat && currentReceiverId && isInitialized) {
                const isSentByCurrentUser = normalize(message.senderId) === normalize(currentUserId);
                console.log("✅ Displaying message in current chat:", { isSentByCurrentUser });
                ChatApp.ui.appendMessage(message, isSentByCurrentUser);

            } else if (isRelevantToCurrentChat && (!isInitialized || !currentReceiverId)) {
                const isSentByCurrentUser = normalize(message.senderId) === normalize(currentUserId);
                console.log("📋 Queuing message for later:", { isSentByCurrentUser });
                ChatApp.trackers.pendingMessages.push({ message, isSentByCurrentUser });

            } else {
                const isForCurrentUser = normalize(message.receiverId) === normalize(currentUserId);
                if (isForCurrentUser) {
                    console.log("🔄 New message from different user, refreshing chat list");
                    ChatApp.chat.loadChatPartners();
                } else {
                    console.log("ℹ️ Message not relevant to current user");
                }
            }

            ChatApp.utils.cleanupTracker(ChatApp.trackers.messageTracker);
            }
                },

            // Chat Management
            chat: {
                async loadChatPartners() {
                    try {
                        const response = await fetch(`${ChatApp.config.baseUrl}/Message/chat-rooms?userId=${ChatApp.config.currentUserId}`);
                        const chatList = document.querySelector('.chat-list');

                        if (!chatList) return;

                        chatList.innerHTML = '';

                        if (response.ok) {
                            const partners = await response.json();

                            if (Array.isArray(partners) && partners.length > 0) {
                                partners.forEach(partner => {
                                    const chatItem = ChatApp.ui.createChatPartnerItem(partner);
                                    chatList.appendChild(chatItem);
                                });
                            } else {
                                chatList.innerHTML = '<div class="no-conversations">No conversations yet</div>';
                            }
                        } else {
                            console.warn("Failed to load chat partners");
                            chatList.innerHTML = '<div class="no-conversations">Error loading conversations</div>';
                        }
                    } catch (error) {
                        console.error("Error loading chat partners:", error);
                        const chatList = document.querySelector('.chat-list');
                        if (chatList) {
                            chatList.innerHTML = '<div class="no-conversations">Error loading conversations</div>';
                        }
                    }
                },

                async loadConversation(userId, fullName, avatar) {
                    // Reset state for new conversation
                    ChatApp.state.isInitialized = false;

                    ChatApp.trackers.messageTracker.clear();
                    ChatApp.trackers.domMessageIds.clear();
                    ChatApp.trackers.pendingMessages = [];

                    // Set current receiver info
                    ChatApp.state.currentReceiverId = userId;
                    ChatApp.state.currentReceiverName = fullName;
                    ChatApp.state.currentReceiverAvatar = avatar;

                    // Update UI elements
                    ChatApp.ui.updateChatHeader(fullName, avatar);
                    ChatApp.ui.showChatInterface();

                    const container = document.querySelector('.messages-container');
                    if (!container) return;

                    container.innerHTML = '';

                    try {
                        const response = await fetch(`${ChatApp.config.baseUrl}/Message/Room?userId1=${ChatApp.config.currentUserId}&userId2=${userId}`);
                        let messages = [];

                        if (response.ok) {
                            const responseText = await response.text();
                            if (responseText.trim()) {
                                try {
                                    messages = JSON.parse(responseText);
                                } catch (parseError) {
                                    console.warn("Failed to parse messages:", parseError);
                                }
                            }
                        }

                        if (!Array.isArray(messages)) {
                            messages = [];
                        }

                        if (messages.length === 0) {
                            ChatApp.ui.showEmptyChat(fullName);
                        } else {
                            messages.forEach(message => {
                                const messageKey = ChatApp.utils.createUniqueMessageKey(message);
                                ChatApp.trackers.messageTracker.set(messageKey, Date.now());
                                const isSent = message.senderId.toString() === ChatApp.config.currentUserId.toString();
                                ChatApp.ui.appendMessage(message, isSent);
                            });
                        }
                    } catch (error) {
                        console.warn("Conversation not found, starting new chat:", error);
                        ChatApp.ui.showEmptyChat(fullName);
                    }

                    // Mark as initialized and process pending messages
                    ChatApp.state.isInitialized = true;
                    console.log("✅ Conversation initialized, isInitialized:", ChatApp.state.isInitialized);

                    ChatApp.chat.processPendingMessages();

                    // Update UI selection
                    ChatApp.ui.updateChatSelection(userId);
                },

                processPendingMessages() {
                    if (ChatApp.trackers.pendingMessages.length > 0) {
                        ChatApp.trackers.pendingMessages.forEach(({ message, isSentByCurrentUser }) => {
                            ChatApp.ui.appendMessage(message, isSentByCurrentUser);
                        });
                        ChatApp.trackers.pendingMessages = [];
                    }
                },

                async getUserInfo(userId) {
                    try {
                        const response = await fetch(`${ChatApp.config.baseUrl}/User/GetUserById/${userId}`);
                        if (response.ok) {
                            const user = await response.json();

                            const fullName = user.userMetaData
                                ? `${user.userMetaData.firstName} ${user.userMetaData.lastName}`.trim()
                                : user.email || 'Unknown User';

                            const avatar = user.userMetaData?.avatar || 'https://i.postimg.cc/FHnRyy40/default.jpg';

                            return {
                                fullName,
                                avatar,
                                email: user.email,
                                phone: user.phone,
                                userId: user.userId
                            };
                        }
                    } catch (error) {
                        console.error("Error fetching user info:", error);
                    }
                    return null;
                },

                async createNewChat(userId, userName = null, userAvatar = null) {
                    const existingChatItem = ChatApp.ui.findChatItem(userId);

                    if (existingChatItem) {
                        console.log("Opening existing chat");
                        existingChatItem.click();
                        return;
                    }

                    console.log("Creating new chat");

                    let userInfo;
                    if (!userName || !userAvatar) {
                        userInfo = await ChatApp.chat.getUserInfo(userId);
                        if (!userInfo) {
                            userInfo = {
                                userId,
                                fullName: userName || "Unknown User",
                                avatar: userAvatar || "https://i.postimg.cc/FHnRyy40/default.jpg"
                            };
                        }
                    } else {
                        userInfo = { userId, fullName: userName, avatar: userAvatar };
                    }

                    ChatApp.ui.createNewChatItem(userInfo);
                    await ChatApp.chat.loadConversation(userInfo.userId, userInfo.fullName, userInfo.avatar);
                }
            },

            // Message Management
            message: {
                async send() {
                    if (ChatApp.state.isSending) {
                        console.log("Already sending a message");
                        return;
                    }

                    const textarea = document.querySelector('.message-input');
                    const content = textarea?.value.trim();

                    if (!content) {
                        console.log("Empty content");
                        return;
                    }

                    if (!ChatApp.state.currentReceiverId) {
                        alert("Please select a conversation first");
                        return;
                    }

                    // Check connection status
                    if (!ChatApp.state.isConnected) {
                        console.warn("⚠️ SignalR not connected, message may not sync in real-time");
                    }

                    // Prevent spam
                    const now = Date.now();
                    if (content === ChatApp.state.lastSentContent &&
                        (now - ChatApp.state.lastSentTime) < ChatApp.config.duplicatePreventionTime) {
                        console.log("Duplicate message ignored");
                        return;
                    }

                    ChatApp.state.isSending = true;
                    ChatApp.state.lastSentContent = content;
                    ChatApp.state.lastSentTime = now;

                    const originalContent = content;
                    textarea.value = '';

                    const payload = {
                        senderId: ChatApp.config.currentUserId,
                        receiverId: ChatApp.state.currentReceiverId,
                        content: content
                    };

                    try {
                        console.log("📤 Sending message:", payload);

                        const response = await fetch(`${ChatApp.config.baseUrl}/Message/sendMessage`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (response.ok) {
                            const sentMessage = await response.json();
                            console.log("✅ Message sent successfully");

                            const messageToAppend = {
                                id: sentMessage.id || `temp-${Date.now()}`,
                                senderId: ChatApp.config.currentUserId,
                                receiverId: ChatApp.state.currentReceiverId,
                                content: content,
                                sentAt: sentMessage.sentAt || new Date().toISOString()
                            };

                            const messageKey = ChatApp.utils.createUniqueMessageKey(messageToAppend);
                            ChatApp.trackers.messageTracker.set(messageKey, Date.now());

                            ChatApp.ui.appendMessage(messageToAppend, true);
                            ChatApp.ui.updateChatItemAfterSend();
                        } else {
                            const errorText = await response.text();
                            console.error("❌ Message sending failed:", errorText);
                            textarea.value = originalContent;
                            alert("Failed to send message. Please try again.");
                        }
                    } catch (error) {
                        console.error("Network error:", error);
                        textarea.value = originalContent;
                        alert("Network error. Please check your connection and try again.");
                    } finally {
                        ChatApp.state.isSending = false;
                    }
                }
            },

            // UI Management
            ui: {
                createChatPartnerItem(partner) {
                    const fullName = partner.fullName || partner.email || 'Unknown User';
                    const avatar = partner.avatar || 'https://i.postimg.cc/FHnRyy40/default.jpg';
                    const lastTime = partner.lastSentAt || partner.updateAt || partner.createAt;

                    const div = document.createElement('div');
                    div.classList.add('chat-item');
                    div.setAttribute('data-user-id', partner.userId);
                    div.innerHTML = `
                        <div class="avatar-container">
                            <img src="${avatar}" class="avatar" alt="${fullName}">
                            <div class="status-indicator"></div>
                        </div>
                        <div class="chat-info">
                            <div class="chat-name">${fullName}</div>
                        </div>
                        <div class="chat-time">${new Date(lastTime).toLocaleTimeString()}</div>
                    `;

                    div.onclick = () => ChatApp.chat.loadConversation(partner.userId, fullName, avatar);
                    return div;
                },

                createNewChatItem(userInfo) {
                    const chatList = document.querySelector('.chat-list');
                    if (!chatList) return;

                    // Remove empty message if exists
                    const emptyMessage = chatList.querySelector('.no-conversations');
                    if (emptyMessage) {
                        emptyMessage.remove();
                    }

                    const div = document.createElement('div');
                    div.classList.add('chat-item', 'new-chat-item');
                    div.setAttribute('data-user-id', userInfo.userId);

                    const currentTime = new Date().toLocaleTimeString();
                    div.innerHTML = `
                        <div class="avatar-container">
                            <img src="${userInfo.avatar}" class="avatar" alt="${userInfo.fullName}">
                            <div class="status-indicator"></div>
                        </div>
                        <div class="chat-info">
                            <div class="chat-name">${userInfo.fullName}</div>
                            <div class="new-chat-indicator">New conversation</div>
                        </div>
                        <div class="chat-time">${currentTime}</div>
                    `;

                    div.onclick = () => ChatApp.chat.loadConversation(userInfo.userId, userInfo.fullName, userInfo.avatar);
                    chatList.insertBefore(div, chatList.firstChild);
                    return div;
                },

                findChatItem(userId) {
                    const chatList = document.querySelector('.chat-list');
                    return chatList?.querySelector(`[data-user-id="${userId}"]`);
                },

                updateChatHeader(fullName, avatar) {
                    const nameElement = document.querySelector('.chat-user-name');
                    const avatarElement = document.querySelector('.chat-user-avatar');

                    if (nameElement) nameElement.textContent = fullName;
                    if (avatarElement) avatarElement.src = avatar;
                },

                showChatInterface() {
                    const container = document.querySelector('.messages-container');
                    const header = document.querySelector('.chat-header');
                    const inputContainer = document.querySelector('.message-input-container');

                    if (container) container.classList.remove('empty-chat');
                    if (header) header.style.display = 'flex';
                    if (inputContainer) inputContainer.style.display = 'flex';
                },

                showEmptyChat(fullName) {
                    const container = document.querySelector('.messages-container');
                    if (container) {
                        container.innerHTML = `
                        <div class="empty-chat-message">
                            💬 Start your conversation with <strong>${fullName}</strong>...
                        </div>
                        `;
                    }
                },

                appendMessage(message, isSent) {
                    const container = document.querySelector('.messages-container');
                    if (!container) return;

                    const domMessageId = ChatApp.utils.createDOMMessageId(message);

                    // Prevent DOM duplicates
                    if (ChatApp.trackers.domMessageIds.has(domMessageId) ||
                        container.querySelector(`[data-message-id="${domMessageId}"]`)) {
                        return;
                    }

                    ChatApp.trackers.domMessageIds.add(domMessageId);

                    // Remove empty message placeholder
                    const emptyMessage = container.querySelector('.empty-chat-message');
                    if (emptyMessage) {
                        emptyMessage.remove();
                    }

                    const msgDiv = document.createElement('div');
                    msgDiv.classList.add('message');
                    if (isSent) msgDiv.classList.add('sent');
                    msgDiv.setAttribute('data-message-id', domMessageId);

                    const avatarHtml = isSent ? '' :
                        `<img src="${ChatApp.state.currentReceiverAvatar || 'https://i.postimg.cc/FHnRyy40/default.jpg'}"
                              class="message-avatar" alt="Avatar">`;

                    msgDiv.innerHTML = `
                        ${avatarHtml}
                        <div class="message-content">${message.content}</div>
                    `;

                    container.appendChild(msgDiv);
                    container.scrollTop = container.scrollHeight;

                    // Cleanup DOM tracker
                    ChatApp.utils.cleanupTracker(ChatApp.trackers.domMessageIds);
                },

                updateChatSelection(userId) {
                    document.querySelectorAll('.chat-item').forEach(item => {
                        item.classList.remove('active');
                    });

                    const selectedItem = document.querySelector(`[data-user-id="${userId}"]`);
                    if (selectedItem) {
                        selectedItem.classList.add('active');
                    }
                },

                updateChatItemAfterSend() {
                    const currentChatItem = document.querySelector(`[data-user-id="${ChatApp.state.currentReceiverId}"]`);
                    if (!currentChatItem) return;

                    // Remove new chat indicators
                    if (currentChatItem.classList.contains('new-chat-item')) {
                        currentChatItem.classList.remove('new-chat-item');
                        const indicator = currentChatItem.querySelector('.new-chat-indicator');
                        if (indicator) indicator.remove();
                    }

                    // Update timestamp
                    const timeElement = currentChatItem.querySelector('.chat-time');
                    if (timeElement) {
                        timeElement.textContent = new Date().toLocaleTimeString();
                    }
                }
            },

            // Event Setup
            events: {
                setup() {
                    // Send button
                    const sendBtn = document.querySelector('.send-btn');
                    if (sendBtn) {
                        sendBtn.onclick = ChatApp.message.send;
                    }

                    // Enter key for sending messages
                    const messageInput = document.querySelector('.message-input');
                    if (messageInput) {
                        messageInput.addEventListener('keypress', function(e) {
                            if (e.key === 'Enter' && !e.shiftKey) {
                                e.preventDefault();
                                ChatApp.message.send();
                            }
                        });
                    }
                }
            },

            // Public API
            api: {
                startChatWithUser: async function(userId) {
                    if (!userId) {
                        console.error("User ID is required");
                        return;
                    }
                    await ChatApp.chat.createNewChat(userId);
                },

                navigateToChatWithUser: function(userId, userName = null, userAvatar = null) {
                    const params = new URLSearchParams();
                    params.append('partnerId', userId);
                    if (userName) params.append('partnerName', userName);
                    if (userAvatar) params.append('partnerAvatar', userAvatar);
                    window.location.href = `${ChatApp.config.baseUrl}/Chat?${params.toString()}`;
                }
            },

            // Main initialization
            async init() {
                try {
                    console.log("🚀 Initializing ChatApp...");
                    console.log("Config:", ChatApp.config);

                    // Validate required configuration
                    if (!ChatApp.config.baseUrl || !ChatApp.config.hubUrl || !ChatApp.config.currentUserId) {
                        console.error("❌ Missing required configuration:", {
                            baseUrl: ChatApp.config.baseUrl,
                            hubUrl: ChatApp.config.hubUrl,
                            currentUserId: ChatApp.config.currentUserId
                        });
                        return false;
                    }

                    // Setup event listeners first
                    ChatApp.events.setup();

                    // Initialize SignalR connection
                    const connected = await ChatApp.connection.initialize();
                    if (!connected) {
                        console.error("❌ Failed to establish SignalR connection");
                        // Continue without real-time features
                        console.log("⚠️ Continuing without real-time messaging");
                    }

                    // Load existing chat partners
                    await ChatApp.chat.loadChatPartners();

                    // Handle URL parameters for direct chat
                    const partnerId = ChatApp.utils.getQueryParam("partnerId");
                    const partnerName = ChatApp.utils.getQueryParam("partnerName");
                    const partnerAvatar = ChatApp.utils.getQueryParam("partnerAvatar");

                    if (partnerId) {
                        await ChatApp.chat.createNewChat(partnerId, partnerName, partnerAvatar);
                    }

                    console.log("✅ ChatApp initialized successfully");
                    return true;
                } catch (error) {
                    console.error("❌ Critical error during initialization:", error);
                    return false;
                }
            }
        };

        // Global API exposure
        window.startChatWithUser = ChatApp.api.startChatWithUser;
        window.navigateToChatWithUser = ChatApp.api.navigateToChatWithUser;

        // Initialize when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', ChatApp.init);
        } else {
            ChatApp.init();
        }
    </script>

</body>
</html>