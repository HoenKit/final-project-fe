@page
@model IndexModel
@{
	ViewData["Title"] = "Home page";
}
@{
	var token = HttpContext.Request.Cookies["AccessToken"];
}
<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="" />
	<meta name="keywords" content="" />
	<title>Winku Social Network Toolkit</title>
	<link rel="icon" href="images/fav.png" type="image/png" sizes="16x16">

	<link rel="stylesheet" href="css/main.min.css">
	<link rel="stylesheet" href="css/style.css">
	<link rel="stylesheet" href="css/color.css">
	<link rel="stylesheet" href="css/responsive.css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

</head>
<body>
	<!--<div class="se-pre-con"></div>-->
	<div class="theme-layout">	
		<section>
			<div class="gap gray-bg">
				<div class="container-fluid">
					<div class="row">
						<div class="col-lg-12">
							<div class="row" id="page-contents">
								<div class="col-lg-3">
									<aside class="sidebar static">
										<div class="widget">
											<h4 class="widget-title">Shortcuts</h4>
											<ul class="naves">
												<form style="margin-bottom: -15px;" method="get" asp-page-handler="SearchPost" class="d-flex">
													<div class="input-group" style="margin-bottom: 40px">
														<input type="text" asp-for="Query" placeholder="Search by title..." class="form-control" />
														<button type="submit" class="btn btn-primary">
															<i class="bi bi-search"></i>
														</button>
													</div>
												</form>
												@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

												@{
													var userToken = HttpContextAccessor.HttpContext?.Request.Cookies["AccessToken"];
												}

												@if (!string.IsNullOrEmpty(userToken))
												{
													<li>
														<i class="ti-files"></i>
														<a asp-page="/UserPage" title="">My pages</a>
													</li>
												}
												@* <li>
													<i class="ti-comments-smiley"></i>
													<a href="#" title="">Messages</a>
												</li>
												<li>
													<i class="ti-mouse-alt"></i>
													<a href="#" title="">Inbox</a>
												</li> 
												<li>
													<i class="ti-user"></i>
													<a href="#" title="">friends</a>
												</li>*@
												<li>
													<i class="ti-image"></i>
													<a href="#" title="">images</a>
												</li>
												<li>
													<i class="ti-video-camera"></i>
													<a href="#" title="">videos</a>
												</li>
												<li>
													<i class="ti-bell"></i>
													<a href="#" title="">Notifications</a>
												</li>
											</ul>
										</div><!-- Shortcuts -->
										<div class="widget">
											<h4 class="widget-title">Recent Activity</h4>
											<ul class="activitiez">
												<li>
													<div class="activity-meta">
														<i>10 hours Ago</i>
														<span><a href="#" title="">Commented on Video posted </a></span>
														<h6>by <a href="time-line.html">black demon.</a></h6>
													</div>
												</li>
												<li>
													<div class="activity-meta">
														<i>30 Days Ago</i>
														<span><a href="#" title="">Posted your status. “Hello guys, how are you?”</a></span>
													</div>
												</li>
												<li>
													<div class="activity-meta">
														<i>2 Years Ago</i>
														<span><a href="#" title="">Share a video on her timeline.</a></span>
														<h6>"<a href="#">you are so funny mr.been.</a>"</h6>
													</div>
												</li>
											</ul>
										</div><!-- recent activites -->
										<div class="widget stick-widget">
											<h4 class="widget-title">Who's follownig</h4>
											<ul class="followers">
												<li>
													<figure><img src="images/resources/friend-avatar2.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Kelly Bill</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar4.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Issabel</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar6.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Andrew</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar8.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Sophia</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
												<li>
													<figure><img src="images/resources/friend-avatar3.jpg" alt=""></figure>
													<div class="friend-meta">
														<h4><a href="time-line.html" title="">Allen</a></h4>
														<a href="#" title="" class="underline">Add Friend</a>
													</div>
												</li>
											</ul>
										</div><!-- who's following -->
									</aside>
								</div><!-- sidebar -->
								<div class="col-lg-6">
									<div class="loadMore">
										<div class="central-meta item">
											<div class="user-post">

												@* <div class="newpst-input"> *@
													<div class="card p-3 mb-3 shadow-sm rounded">
														<button type="button" class="btn btn-light rounded-pill w-100 text-start" data-bs-toggle="modal" data-bs-target="#createPostModal">
															<div class="d-flex align-items-center">
																<img src="images/resources/friend-avatar9.jpg" class="rounded-circle me-2" width="40" height="40" />
																<span class="text-muted">what are you thinking?</span>
															</div>
														</button>

														<hr class="my-2" />

														<div class="d-flex justify-content-between text-center">
															<div class="text-danger" style="cursor: pointer;">
																<i class="fa fa-video-camera me-1"></i>
																Live video
															</div>
															<div class="text-success" style="cursor: pointer;">
																<i class="fa fa-image me-1"></i>
																Photos/videos
															</div>
															<div class="text-warning" style="cursor: pointer;">
																<i class="fa fa-smile-o me-1"></i>
																Feelings/Activities
															</div>
														</div>
													</div>

													<!-- Modal -->
													<div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
														<div class="modal-dialog modal-dialog-centered">
															<div class="modal-content rounded">
																<div class="modal-header">
																	<h5 class="modal-title" id="createPostModalLabel">Create new post</h5>
																	<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="close"></button>
																</div>
																<div class="modal-body">
																	<div class="d-flex align-items-center mb-3">
																		<img src="images/resources/friend-avatar9.jpg" class="rounded-circle" width="40" height="40" />
																		<div class="ms-2">
																			@* <strong>Nguyễn Bình</strong><br /> *@
																		</div>
																	</div>

																	<form method="post">
																		<div class="form-group">
																			<input asp-for="NewPost.Title" type="text" placeholder="Enter Post Title" class="form-control" required />
																		</div>

																		<div class="form-group">
																			<textarea asp-for="NewPost.Content" rows="3" placeholder="Write something..." class="form-control" required></textarea>
																		</div>
																		<div class="d-flex justify-content-around border-top pt-2">
																			<label class="btn btn-light">
																				<i class="fa fa-image text-success"></i> Photos/videos
																				<input type="file" name="Images" hidden />
																			</label>
																			<label class="btn btn-light">
																				<i class="fa fa-smile-o text-warning"></i> Feeling
																				<input type="file" hidden />
																			</label>
																			<label class="btn btn-light">
																				<i class="fa fa-map-marker text-danger"></i> Location
																				<input type="file" hidden />
																			</label>
																		</div>
																		<div class="mt-3">
																			<button type="submit" class="btn btn-primary w-100">Publish</button>
																		</div>
																	</form>
																</div>
															</div>
														</div>
													</div>
													<!-- add post new box -->

												@if (!string.IsNullOrWhiteSpace(Model.Query))
												{
													<h3>Search results for: "@Model.Query"</h3>
												}
												@if (Model.Posts != null && Model.Posts.Items.Any())
												{
													<ul>
														@foreach (var post in Model.Posts.Items.OrderByDescending(p => p.CreateAt))
														{
															<li>
																<div class="friend-info">
																	<figure>
																		<img src="@(string.IsNullOrEmpty(post.User?.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : post.User?.UserMetaData.Avatar)"
																		alt="User Avatar">

																	</figure>

																	<div class="post-meta">
																		<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
																			@post.Title
																		</p>
																	</div>


																	<div class="friend-name">
																		<ins>
																			<a href="time-line.html" title="">
																				@((post.User?.UserMetaData != null)? $"{post.User.UserMetaData.FirstName} {post.User.UserMetaData.LastName}": post.User?.Email)
																			</a>
																		</ins>
																		<span>@post.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																		@if (!string.IsNullOrEmpty(token))
																		{
																			<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
																				<div class="dropdown">
																					<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
																						<i class="fa fa-ellipsis-v"></i>
																					</button>
																					<ul class="dropdown-menu">
																						<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="@post.PostId">Report Post</a></li>
																						<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="@post.User?.UserId">Report User</a></li>
																					</ul>
																				</div>
																			</div>
																		}
																	</div>

																	<div class="post-meta">
																	@* 	@if (Model.PostFilesByPost.ContainsKey(post.PostId) && Model.PostFilesByPost[post.PostId].Any(f => f.PostFileType.ToLower() == "image" || f.PostFileType.ToLower() == "video"))
																		{
																			@foreach (var file in Model.PostFilesByPost[post.PostId])
																			{
																				@if (file.PostFileType.ToLower() == "image")
																				{
																					<img src="@file.FileUrl" alt="Post Image" width="400" />
																				}
																				else if (file.PostFileType.ToLower() == "video")
																				{
																					<iframe src="@file.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																				}
																			}
																		} *@
																		@* 	else
																		{
																			<img src="https://toigingiuvedep.vn/wp-content/uploads/2021/06/hinh-anh-bau-troi-dem-day-sao-tuyet-dep-cho-may-tinh.jpg"
																				 alt="Default Post Image" width="400" />
																		} *@

																		@if (post.PostFiles != null && post.PostFiles.Any())
																		{
																			foreach (var postFile in post.PostFiles)
																			{
																				if (postFile.PostFileType.ToLower() == "image")
																				{
																					<img src="@postFile.FileUrl" alt="Post Image" width="400" />
																				}
																				else
																				{
																					<iframe src="@postFile.FileUrl" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
																				}
																			}
																		}

																		<div class="description">
																			<p>@post.Content</p>
																		</div>
																	</div>

																	<!-- Comment section -->
																	<div class="comments-section" id="commentList-@post.PostId">
																		@if (Model.CommentsByPost.ContainsKey(post.PostId))
																		{
																			var comments = Model.CommentsByPost[post.PostId];
																			var parentComments = comments.Where(c => c.ParentCommentId == null);

																			foreach (var parent in parentComments)
																			{
																				var user = parent.User;
																				var userMeta = user?.UserMetaData;
																				var avatar = string.IsNullOrEmpty(userMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : userMeta.Avatar;
																				var displayName = userMeta != null ? $"{userMeta.FirstName} {userMeta.LastName}" : user?.Email;
																				var replies = comments.Where(c => c.ParentCommentId == parent.CommentId);
																				<div class="comment" data-comment-id="@parent.CommentId">
																					<div class="comet-avatar">
																						<img src="@avatar" alt="User Avatar">
																					</div>
																					<div class="we-comment">
																						<div class="coment-head">
																							<h5><a href="time-line.html" title="">@displayName</a></h5>
																							<span>@parent.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																							@if (!string.IsNullOrEmpty(token))
																							{
																								<a class="we-reply" href="javascript:void(0)" data-reply-to="@parent.CommentId" title="Reply">
																									<i class="fa fa-reply"></i>
																								</a>
																								<div class="comment-options-menu" style="position: absolute; right: 10px; top: 0;">
																									<div class="dropdown">
																										<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
																											<i class="fa fa-ellipsis-v"></i>
																										</button>
																										<ul class="dropdown-menu">
																											<li><a class="dropdown-item report-comment" href="#" data-bs-toggle="modal" data-bs-target="#reportCommentModal" data-comment-id="@parent.CommentId">Report Comment</a></li>
																											<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="@parent.User.UserId">Report User</a></li>
																										</ul>
																									</div>
																								</div>
																							}
																						</div>
																						<p>@parent.Content</p>
																						@if (!string.IsNullOrEmpty(token))
																						{
																							<div class="reply-form" style="display: none; margin-top: 10px;">
																								<form class="comment-form">
																									<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																									<input type="hidden" name="NewComment.ParentCommentId" value="@parent.CommentId" />
																									<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																									<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																								</form>
																							</div>
																						}
																					</div>

																					<!-- Render replies -->
																					@if (replies.Any())
																					{
																						<div class="replies" style="margin-left: 50px;">
																							@foreach (var reply in replies)
																							{
																								var replyUser = reply.User;
																								var replyMeta = replyUser?.UserMetaData;
																								var replyAvatar = string.IsNullOrEmpty(replyMeta?.Avatar) ? "images/resources/friend-avatar9.jpg" : replyMeta.Avatar;
																								var replyName = replyMeta != null ? $"{replyMeta.FirstName} {replyMeta.LastName}" : replyUser?.Email;

																								<div class="comment reply-comment" data-comment-id="@reply.CommentId" data-parent-id="@parent.CommentId">
																									<div class="comet-avatar">
																										<img src="@replyAvatar" alt="User Avatar">
																									</div>
																									<div class="we-comment">
																										<div class="coment-head">
																											<h5><a href="time-line.html" title="">@replyName</a></h5>
																											<span>@reply.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
																											@if (!string.IsNullOrEmpty(token))
																											{
																												<a class="we-reply" href="javascript:void(0)" data-reply-to="@reply.CommentId" title="Reply">
																													<i class="fa fa-reply"></i>
																												</a>

																											}
																										</div>
																										<p>@reply.Content</p>
																										@if (!string.IsNullOrEmpty(token))
																										{
																											<div class="reply-form" style="display: none; margin-top: 10px;">
																												<form class="comment-form">
																													<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																													<input type="hidden" name="NewComment.ParentCommentId" value="@reply.CommentId" />
																													<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
																													<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
																												</form>
																											</div>
																										}
																									</div>
																								</div>
																							}
																						</div>
																					}
																				</div>
																			}
																		}
																		else
																		{
																			<p>No comments available.</p>
																		}
																	</div>

																	<!-- Comment input form -->
																	@if (!string.IsNullOrEmpty(token))
																	{
																		<!-- Comment input form -->
																		<div class="coment-area">
																			<ul class="we-comet">
																				<li class="post-comment">
																					<div class="comet-avatar">
																						<img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
																					</div>
																					<div class="post-comt-box">
																						<form class="comment-form">
																							<input type="hidden" name="NewComment.PostId" value="@post.PostId" />
																							<input type="hidden" name="NewComment.ParentCommentId" />
																							<label>Comment:</label>
																							<textarea name="NewComment.Content" placeholder="Write a comment..."></textarea>
																							<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
																						</form>
																					</div>
																				</li>
																			</ul>
																		</div>
																	}
																</div>
															</li>
														}

													</ul>

													<p>Page @Model.Posts.CurrentPage / @Model.Posts.TotalPages</p>

												}
												else
												{
													<p>No posts available.</p>
												}	

											</div>
										</div>
									</div>
								</div><!-- centerl meta -->
								<div class="col-lg-3">
									<aside class="sidebar static">
										<div class="widget">
											<h4 class="widget-title">Your page</h4>
											<div class="your-page">
												<figure>
													<a href="#" title=""><img src="images/resources/friend-avatar9.jpg" alt=""></a>
												</figure>
												<div class="page-meta">
													<a href="#" title="" class="underline">My page</a>
													<span><i class="ti-comment"></i><a href="insight.html" title="">Messages <em>9</em></a></span>
													<span><i class="ti-bell"></i><a href="insight.html" title="">Notifications <em>2</em></a></span>
												</div>
												<div class="page-likes">
													<ul class="nav nav-tabs likes-btn">
														<li class="nav-item"><a class="active" href="#link1" data-toggle="tab">likes</a></li>
														<li class="nav-item"><a class="" href="#link2" data-toggle="tab">views</a></li>
													</ul>
													<!-- Tab panes -->
													<div class="tab-content">
														<div class="tab-pane active fade show " id="link1">
															<span><i class="ti-heart"></i>884</span>
															<a href="#" title="weekly-likes">35 new likes this week</a>
															<div class="users-thumb-list">
																<a href="#" title="Anderw" data-toggle="tooltip">
																	<img src="images/resources/userlist-1.jpg" alt="">
																</a>
																<a href="#" title="frank" data-toggle="tooltip">
																	<img src="images/resources/userlist-2.jpg" alt="">
																</a>
																<a href="#" title="Sara" data-toggle="tooltip">
																	<img src="images/resources/userlist-3.jpg" alt="">
																</a>
																<a href="#" title="Amy" data-toggle="tooltip">
																	<img src="images/resources/userlist-4.jpg" alt="">
																</a>
																<a href="#" title="Ema" data-toggle="tooltip">
																	<img src="images/resources/userlist-5.jpg" alt="">
																</a>
																<a href="#" title="Sophie" data-toggle="tooltip">
																	<img src="images/resources/userlist-6.jpg" alt="">
																</a>
																<a href="#" title="Maria" data-toggle="tooltip">
																	<img src="images/resources/userlist-7.jpg" alt="">
																</a>
															</div>
														</div>
														<div class="tab-pane fade" id="link2">
															<span><i class="ti-eye"></i>440</span>
															<a href="#" title="weekly-likes">440 new views this week</a>
															<div class="users-thumb-list">
																<a href="#" title="Anderw" data-toggle="tooltip">
																	<img src="images/resources/userlist-1.jpg" alt="">
																</a>
																<a href="#" title="frank" data-toggle="tooltip">
																	<img src="images/resources/userlist-2.jpg" alt="">
																</a>
																<a href="#" title="Sara" data-toggle="tooltip">
																	<img src="images/resources/userlist-3.jpg" alt="">
																</a>
																<a href="#" title="Amy" data-toggle="tooltip">
																	<img src="images/resources/userlist-4.jpg" alt="">
																</a>
																<a href="#" title="Ema" data-toggle="tooltip">
																	<img src="images/resources/userlist-5.jpg" alt="">
																</a>
																<a href="#" title="Sophie" data-toggle="tooltip">
																	<img src="images/resources/userlist-6.jpg" alt="">
																</a>
																<a href="#" title="Maria" data-toggle="tooltip">
																	<img src="images/resources/userlist-7.jpg" alt="">
																</a>
															</div>
														</div>
													</div>
												</div>
											</div>
										</div><!-- page like widget -->
										<div class="widget">
											<div class="banner medium-opacity bluesh">
												<div class="bg-image" style="background-image: url(images/resources/baner-widgetbg.jpg)"></div>
												<div class="baner-top">
													<span><img alt="" src="images/book-icon.png"></span>
													<i class="fa fa-ellipsis-h"></i>
												</div>
												<div class="banermeta">
													<p>
														create your own favourit page.
													</p>
													<span>like them all</span>
													<a data-ripple="" title="" href="#">start now!</a>
												</div>
											</div>
										</div>
										<div class="widget friend-list stick-widget">
											<h4 class="widget-title">Friends</h4>
											<div id="searchDir"></div>
											<ul id="people-list" class="friendz-list">
												<li>
													<figure>
														<img src="images/resources/friend-avatar.jpg" alt="">
														<span class="status f-online"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">bucky barnes</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a0d7c9ced4c5d2d3cfccc4c5d2e0c7cdc1c9cc8ec3cfcd">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>
													<figure>
														<img src="images/resources/friend-avatar2.jpg" alt="">
														<span class="status f-away"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">Sarah Loren</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b4d6d5c6dad1c7f4d3d9d5ddd89ad7dbd9">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>
													<figure>
														<img src="images/resources/friend-avatar3.jpg" alt="">
														<span class="status f-off"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">jason borne</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1d777c6e72737f5d7a707c7471337e7270">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>
													<figure>
														<img src="images/resources/friend-avatar4.jpg" alt="">
														<span class="status f-off"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">Cameron diaz</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bed4dfcdd1d0dcfed9d3dfd7d290ddd1d3">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>

													<figure>
														<img src="images/resources/friend-avatar5.jpg" alt="">
														<span class="status f-online"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">daniel warber</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="553f34263a3b37153238343c397b363a38">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>

													<figure>
														<img src="images/resources/friend-avatar6.jpg" alt="">
														<span class="status f-away"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">andrew</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5933382a36373b193e34383035773a3634">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>

													<figure>
														<img src="images/resources/friend-avatar7.jpg" alt="">
														<span class="status f-off"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">amy watson</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5933382a36373b193e34383035773a3634">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>

													<figure>
														<img src="images/resources/friend-avatar5.jpg" alt="">
														<span class="status f-online"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">daniel warber</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dbb1baa8b4b5b99bbcb6bab2b7f5b8b4b6">[email&#160;protected]</a></i>
													</div>
												</li>
												<li>

													<figure>
														<img src="images/resources/friend-avatar2.jpg" alt="">
														<span class="status f-away"></span>
													</figure>
													<div class="friendz-meta">
														<a href="time-line.html">Sarah Loren</a>
														<i><a href="https://wpkixx.com/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2644475448435566414b474f4a0845494b">[email&#160;protected]</a></i>
													</div>
												</li>
											</ul>
											<div class="chat-box">
												<div class="chat-head">
													<span class="status f-online"></span>
													<h6>Bucky Barnes</h6>
													<div class="more">
														<span><i class="ti-more-alt"></i></span>
														<span class="close-mesage"><i class="ti-close"></i></span>
													</div>
												</div>
												<div class="chat-list">
													<ul>
														<li class="me">
															<div class="chat-thumb"><img src="images/resources/chatlist1.jpg" alt=""></div>
															<div class="notification-event">
																<span class="chat-message-item">
																	Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																</span>
																<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
															</div>
														</li>
														<li class="you">
															<div class="chat-thumb"><img src="images/resources/chatlist2.jpg" alt=""></div>
															<div class="notification-event">
																<span class="chat-message-item">
																	Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																</span>
																<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
															</div>
														</li>
														<li class="me">
															<div class="chat-thumb"><img src="images/resources/chatlist1.jpg" alt=""></div>
															<div class="notification-event">
																<span class="chat-message-item">
																	Hi James! Please remember to buy the food for tomorrow! I’m gonna be handling the gifts and Jake’s gonna get the drinks
																</span>
																<span class="notification-date"><time datetime="2004-07-24T18:18" class="entry-date updated">Yesterday at 8:10pm</time></span>
															</div>
														</li>
													</ul>
													<form class="text-box">
														<textarea placeholder="Post enter to post..."></textarea>
														<div class="add-smiles">
															<span title="add icon" class="em em-expressionless"></span>
														</div>
														<div class="smiles-bunch">
															<i class="em em---1"></i>
															<i class="em em-smiley"></i>
															<i class="em em-anguished"></i>
															<i class="em em-laughing"></i>
															<i class="em em-angry"></i>
															<i class="em em-astonished"></i>
															<i class="em em-blush"></i>
															<i class="em em-disappointed"></i>
															<i class="em em-worried"></i>
															<i class="em em-kissing_heart"></i>
															<i class="em em-rage"></i>
															<i class="em em-stuck_out_tongue"></i>
														</div>
														<button type="submit"></button>
													</form>
												</div>
											</div>
										</div><!-- friends list sidebar -->
									</aside>
								</div><!-- sidebar -->
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>

		<div class="bottombar">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
						<span class="copyright"><a target="_blank" href="https://www.templateshub.net">Templates Hub</a></span>
						<i><img src="images/credit-cards.png" alt=""></i>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Report Post Modal -->
	<div class="modal fade" id="reportPostModal" tabindex="-1" aria-labelledby="reportPostModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="reportPostModalLabel">Report Post</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<form id="reportPostForm">
						<input type="hidden" id="reportPostId" name="PostId">
						<input type="hidden" id="reportPostUserId" name="UserId" value="@Model.CurrentUserId">
						<div class="mb-3">
							<label for="reportPostContent" class="form-label">Why are you reporting this post?</label>
							<textarea class="form-control" id="reportPostContent" name="Content" rows="4" required></textarea>
						</div>
						<div class="d-grid">
							<button type="submit" class="btn btn-danger">Submit Report</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<!-- Report Comment Modal -->
	<div class="modal fade" id="reportCommentModal" tabindex="-1" aria-labelledby="reportCommentModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="reportCommentModalLabel">Report Comment</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<form id="reportCommentForm">
						<input type="hidden" id="reportCommentId" name="CommentId">
						<input type="hidden" id="reportCommentUserId" name="UserId" value="@Model.CurrentUserId">
						<div class="mb-3">
							<label for="reportCommentContent" class="form-label">Why are you reporting this comment?</label>
							<textarea class="form-control" id="reportCommentContent" name="Content" rows="4" required></textarea>
						</div>
						<div class="d-grid">
							<button type="submit" class="btn btn-danger">Submit Report</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<!-- Report User Modal -->
	<div class="modal fade" id="reportUserModal" tabindex="-1" aria-labelledby="reportUserModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="reportUserModalLabel">Report User</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<form id="reportUserForm">
						<input type="hidden" id="reportUserreportedId" name="UserreportedId">
						<input type="hidden" id="reportUserUserId" name="UserId" value="@Model.CurrentUserId">
						<div class="mb-3">
							<label for="reportUserContent" class="form-label">Why are you reporting this user?</label>
							<textarea class="form-control" id="reportUserContent" name="Content" rows="4" required></textarea>
						</div>
						<div class="d-grid">
							<button type="submit" class="btn btn-danger">Submit Report</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<script data-cfasync="false" src="../../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script>
	<script src="js/main.min.js"></script>
	<script src="js/script.js"></script>
	<script src="js/map-init.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
	<script>
		currentUserId = '@Model.CurrentUserId';
		document.addEventListener('DOMContentLoaded', () => {
		  const HubUrl  = "@Model.HubUrl";
		  const BaseUrl = "@Model.BaseUrl";
		  const userId  = currentUserId;

		  // Hiển thị thông tin kết nối để debug
		  console.log("Connecting to SignalR hub:", HubUrl);
		  console.log("Base API URL:", BaseUrl);
		  console.log("Current User ID:", userId);

		  const connection = new signalR.HubConnectionBuilder()
			.withUrl(`${HubUrl}/postHub`)
			.withAutomaticReconnect() // Thêm tự động kết nối lại
			.build();

		  async function getUserInfo(id) {
			const defaultAvatar = "images/resources/friend-avatar9.jpg";
			const defaultName   = "Unknown User";
			if (!id) return { avatar: defaultAvatar, name: defaultName };

			try {
			  const res = await fetch(`${BaseUrl}/UserManager/${id}`, { credentials: 'include' });
			  if (res.ok) {
				const u = await res.json();
				return {
				  avatar: u?.userMetaData?.avatar || defaultAvatar,
				  name:   u?.userMetaData
							? `${u.userMetaData.firstName} ${u.userMetaData.lastName}`
							: u.email || defaultName
				};
			  }
			} catch (error) {w
			  console.error("Error fetching user info:", error);
			}
			return { avatar: defaultAvatar, name: defaultName };
		  }

		  function createPostHtml(post, avatar, name) {
			const d = new Date(post.createAt).toLocaleString();

			// Handle file attachments (images and videos)
			let mediaContent = '';
			if (post.files && post.files.length > 0) {
			  post.files.forEach(file => {
				if (file.postFileType?.toLowerCase() === "image") {
				  mediaContent += `<img src="${file.fileUrl}" alt="Post Image" width="400" />`;
				} else if (file.postFileType?.toLowerCase() === "video") {
				  mediaContent += `<iframe src="${file.fileUrl}" height="315" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>`;
				}
			  });
			}

			return `
			  <li id="post-${post.postId}">
				<div class="friend-info">
				  <figure>
					<img src="${avatar}" alt="User Avatar">
				  </figure>
				  <div class="post-meta">
					<p style="font-size: 20px; font-weight: bold; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);">
					  ${post.title}
					</p>
				  </div>
				  <div class="friend-name">
					<ins><a href="time-line.html" title="">${name}</a></ins>
					<span>${d}</span>
		@if (!string.IsNullOrEmpty(token))
		{
				<div class="post-options-menu" style="position: absolute; right: 10px; top: 10px;">
				<div class="dropdown">
				<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="fa fa-ellipsis-v"></i>
				</button>
				<ul class="dropdown-menu">
					<li><a class="dropdown-item report-post" href="#" data-bs-toggle="modal" data-bs-target="#reportPostModal" data-post-id="${post.postId}">Report Post</a></li>
					<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${post.userId}">Report User</a></li>
				</ul>
				</div>
				</div>
		}
				  </div>
				  <div class="post-meta">
					${mediaContent}
					<div class="description">
					  <p>${post.content}</p>
					</div>
				  </div>
				  <div class="comments-section" id="commentList-${post.postId}"></div>
				  <div class="coment-area">
					<ul class="we-comet">
					  <li class="post-comment">
						<div class="comet-avatar">
						  <img src="images/resources/friend-avatar9.jpg" alt="User Avatar">
						</div>
						<div class="post-comt-box">
						  <form class="comment-form">
							<input type="hidden" name="NewComment.PostId" value="${post.postId}">
							<input type="hidden" name="NewComment.ParentCommentId">
							<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
							<button type="submit" class="bi bi-send" style="font-size: 24px; color: black;"></button>
						  </form>
						</div>
					  </li>
					</ul>
				  </div>
				</div>
			  </li>`;
		  }

				 function createCommentHtml(comment, avatar, name) {
			const isReply = comment.parentCommentId != null;
			const cls = isReply ? "comment reply-comment" : "comment";
			const date = new Date(comment.createAt);

			const formattedDate = date.toLocaleDateString("vi-VN");
			const formattedTime = date.toLocaleTimeString("vi-VN", {
				hour: "2-digit",
				minute: "2-digit"
			});

			const d = `${formattedDate} ${formattedTime}`;

			return `
			<div class="${cls}" data-comment-id="${comment.commentId}" data-parent-id="${comment.parentCommentId || ''}" style="margin-bottom: 15px;">
				<div class="comet-avatar">
					<img src="${avatar}" alt="User Avatar">
				</div>
				<div class="we-comment">
					<div class="coment-head">
						<h5><a href="time-line.html" title="">${name}</a></h5>
						<span>${d}</span>
		@if (!string.IsNullOrEmpty(token))
		{
					<a class="we-reply" href="javascript:void(0)" data-reply-to="${comment.commentId}" title="Reply">
						<i class="fa fa-reply"></i>
					</a>
					<div class="comment-options-menu" style="position: absolute; right: 10px; top: 0;">
					<div class="dropdown">
					<button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="fa fa-ellipsis-v"></i>
				</button>
					<ul class="dropdown-menu">
						<li><a class="dropdown-item report-comment" href="#" data-bs-toggle="modal" data-bs-target="#reportCommentModal" data-comment-id="${comment.commentId}">Report Comment</a></li>
						<li><a class="dropdown-item report-user" href="#" data-bs-toggle="modal" data-bs-target="#reportUserModal" data-user-id="${comment.userId}">Report User</a></li>
					</ul>
				</div>
			</div>
		}
					</div>
					<p>${comment.content}</p>
		@if (!string.IsNullOrEmpty(token))
		{
								<div class="reply-form" style="display: none; margin-top: 10px;">
									<form class="comment-form">
										<input type="hidden" name="NewComment.PostId" value="${comment.postId}" />
										<input type="hidden" name="NewComment.ParentCommentId" value="${comment.commentId}" />
										<textarea name="NewComment.Content" placeholder="Write a reply..."></textarea>
										<button type="submit" class="btn btn-sm btn-primary mt-1">Send</button>
									</form>
								</div>
		}
				</div>
			</div>`;
		}

		  // Nhận post từ SignalR
		  connection.on("ReceivePost", async post => {
			console.log("Received post:", post);
			const { avatar, name } = await getUserInfo(post.userId);
			const postList = document.querySelector("#post-list");
			if (postList) {
			  // Thêm post mới vào đầu danh sách
			  postList.insertAdjacentHTML("afterbegin", createPostHtml(post, avatar, name));
			  console.log("Post added to DOM at the beginning of list");
			} else {
			  console.error("Element #post-list not found");
			}
		  });

		  // Nhận comment từ SignalR
		connection.on("ReceiveComment", async comment => {
		  console.log("Received comment:", comment);
		  const { avatar, name } = await getUserInfo(comment.userId);

		  if (comment.parentCommentId) {
			// Đây là reply - chèn vào bên trong div.replies
			const parentComment = document.querySelector(`[data-comment-id="${comment.parentCommentId}"]`);
			if (parentComment) {
			  const repliesContainer = parentComment.querySelector('.replies');

			  if (repliesContainer) {
				// Thêm reply vào cuối danh sách reply
				repliesContainer.insertAdjacentHTML("beforeend", createCommentHtml(comment, avatar, name));
				console.log("Reply inserted into replies container");
			  } else {
				// Nếu chưa có div.replies thì tạo mới
				const newRepliesDiv = document.createElement("div");
				newRepliesDiv.className = "replies";
				newRepliesDiv.style.marginLeft = "50px";
				newRepliesDiv.innerHTML = createCommentHtml(comment, avatar, name);
				parentComment.appendChild(newRepliesDiv);
				console.log("Reply container created and reply added");
			  }
			} else {
			  console.error(` Parent comment with ID ${comment.parentCommentId} not found`);
			}
		  } else {
			// Đây là comment gốc - thêm vào cuối danh sách
			const commentList = document.querySelector(`#commentList-${comment.postId}`);
			if (commentList) {
			  commentList.insertAdjacentHTML("beforeend", createCommentHtml(comment, avatar, name));
			  console.log("Comment added to the end of comment list");
			} else {
			  console.error(` Element #commentList-${comment.postId} not found`);
			}
		  }
		});

		  // Xử lý kết nối SignalR
		  connection.start()
			.then(() => {
			  console.log("SignalR connected successfully");
			})
			.catch(err => {
			  console.error("SignalR connection error:", err);
			  // Thử kết nối lại sau 5 giây
			  setTimeout(() => connection.start(), 5000);
			});

		  // Handle connection events
		  connection.onclose(error => {
			console.log("SignalR connection closed, attempting to reconnect...");
		  });

		  connection.onreconnecting(error => {
			console.log("SignalR reconnecting...", error);
		  });

		  connection.onreconnected(connectionId => {
			console.log("SignalR reconnected. ConnectionId:", connectionId);
		  });

		  // Xử lý sự kiện click nút reply
		  document.body.addEventListener('click', e => {
			const btn = e.target.closest('.we-reply');
			if (!btn) return;
			e.preventDefault();
			const id = btn.getAttribute('data-reply-to');
			const form = document.querySelector(`.comment[data-comment-id="${id}"] .reply-form`);
			if (form) form.style.display = form.style.display === 'none' ? 'block' : 'none';
		  });

		  // Xử lý sự kiện submit form comment
		  document.body.addEventListener('submit', async e => {
			const form = e.target.closest('form.comment-form');
			const replyform = e.target.closest('.reply-form')
			if (!form) return;
			e.preventDefault();

			const fm = new FormData(form);
			const payload = {
			  postId: Number(fm.get('NewComment.PostId')),
			  parentCommentId: fm.get('NewComment.ParentCommentId')
							? Number(fm.get('NewComment.ParentCommentId'))
							: null,
			  content: fm.get('NewComment.Content').trim(),
			  userId: currentUserId
			};

			if (!payload.content) return;
			console.log("Submitting comment:", payload);

			try {
			  const res = await fetch(`${BaseUrl}/Comment`, {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(payload)
			  });

			  if (!res.ok) {
				const errorText = await res.text();
				console.error('Post comment failed:', errorText);
				alert('Comment could not be submitted. Please try again later.');
				return;
			  }

			  console.log("Comment posted successfully");
			  form.reset();
			  if (replyform) replyform.style.display = 'none';
			} catch (error) {
			  console.error("Error posting comment:", error);
			  alert('An error occurred while submitting the comment.');
			}
		  });

		  // Thêm form tạo post mới (nếu cần)
		  document.body.addEventListener('submit', async e => {
			const form = e.target.closest('form.post-form');
			if (!form) return;
			e.preventDefault();

			const fm = new FormData(form);
			const payload = {
			  title: fm.get('NewPost.Title').trim(),
			  content: fm.get('NewPost.Content').trim(),
			  userId: currentUserId
			};

			if (!payload.title || !payload.content) return;
			console.log("Submitting post:", payload);

			try {
			  const res = await fetch(`${BaseUrl}/Post`, {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(payload)
			  });

			  if (!res.ok) {
				const errorText = await res.text();
				console.error('Post creation failed:', errorText);
				alert('Không thể tạo bài viết. Vui lòng thử lại sau.');
				return;
			  }

			  console.log("Post created successfully");
			  form.reset();
			} catch (error) {
			  console.error("Error creating post:", error);
			  alert('Đã xảy ra lỗi khi tạo bài viết.');
			}
		  });
		});
	</script>

	<script>
		// Configuration from Razor model
		const BASE_URL = "@Model.BaseUrl";

		// Create toast notification system - replaces the old alert system
		function showToast(message, type = "success") {
		  // Create toast container if it doesn't exist yet
		  let toastContainer = document.getElementById("toast-container");
		  if (!toastContainer) {
			toastContainer = document.createElement("div");
			toastContainer.id = "toast-container";
			toastContainer.className = "position-fixed bottom-0 end-0 p-3";
			toastContainer.style.zIndex = "1050";
			document.body.appendChild(toastContainer);
		  }

		  // Create unique ID for this toast
		  const toastId = "toast-" + Date.now();

		  // Create the toast element with auto-hide enabled
		  const toastEl = document.createElement("div");
		  toastEl.id = toastId;
		  toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
		  toastEl.setAttribute("role", "alert");
		  toastEl.setAttribute("aria-live", "assertive");
		  toastEl.setAttribute("aria-atomic", "true");
		  toastEl.setAttribute("data-bs-autohide", "true");
		  toastEl.setAttribute("data-bs-delay", "3000");

		  // Create toast content (without close button for auto-closing)
		  toastEl.innerHTML = `
			<div class="d-flex">
			  <div class="toast-body">
				${message}
			  </div>
			</div>
		  `;

		  // Add to container
		  toastContainer.appendChild(toastEl);

		  // Initialize and show the toast using jQuery if available
		  if (typeof $ !== 'undefined') {
			$(toastEl).toast('show');
		  } else {
			// Use the bootstrap object if available
			if (typeof bootstrap !== 'undefined' && typeof bootstrap.Toast !== 'undefined') {
			  const bsToast = new bootstrap.Toast(toastEl, {
				autohide: true,
				delay: 3000
			  });
			  bsToast.show();
			} else {
			  // Last resort - manual display if Bootstrap JS is not properly loaded
			  toastEl.classList.add('show');
			  setTimeout(() => {
				toastEl.classList.remove('show');
				setTimeout(() => toastEl.remove(), 150);
			  }, 3000);
			}
		  }

		  // Ensure toast is removed after 3.5 seconds regardless of BS implementation
		  setTimeout(() => {
			if (document.getElementById(toastId)) {
			  document.getElementById(toastId).remove();
			}
		  }, 3500);
		}

		// Handle Report Post Form Submission
		document.getElementById("reportPostForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const postId = parseInt(document.getElementById("reportPostId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportPostContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this post.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportPost`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				reportId: 0, // The server will assign this
				postId: postId,
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportPostModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportPostModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportPostContent").value = "";

			  // Show success message
			  showToast("Post reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting post: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting post: ${error.message}`, "danger");
		  }
		});

		// Handle Report Comment Form Submission
		document.getElementById("reportCommentForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const commentId = parseInt(document.getElementById("reportCommentId").value);
		  const userId = '@Model.CurrentUserId';
		  const content = document.getElementById("reportCommentContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this comment.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportComment`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				commentId: commentId,
				reportId: 0, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportCommentModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportCommentModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportCommentContent").value = "";

			  // Show success message
			  showToast("Comment reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting comment: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting comment: ${error.message}`, "danger");
		  }
		});

		// Handle Report User Form Submission
		document.getElementById("reportUserForm").addEventListener("submit", async function(event) {
		  event.preventDefault(); // Prevent form submission (page refresh)

		  const userreportedId = '@Model.CurrentUserId';
		  const userId = document.getElementById("reportUserreportedId").value;
		  const content = document.getElementById("reportUserContent").value;

		  if (!content.trim()) {
			showToast("Please provide a reason for reporting this user.", "danger");
			return;
		  }

		  try {
			const response = await fetch(`${BASE_URL}/ReportUser`, {
			  method: "POST",
			  headers: {
				"Content-Type": "application/json"
			  },
			  body: JSON.stringify({
				userreportedId: userreportedId,
				reportId: 0, // The server will assign this
				userId: userId,
				content: content
			  })
			});

			if (response.ok) {
			  // Close modal using jQuery if available (compatible with most Bootstrap versions)
			  if (typeof $ !== 'undefined') {
				$("#reportUserModal").modal('hide');
			  } else {
				// Direct DOM manipulation fallback
				const modalElement = document.getElementById("reportUserModal");
				modalElement.classList.remove('show');
				modalElement.setAttribute('aria-hidden', 'true');
				modalElement.style.display = 'none';

				// Remove backdrop if it exists
				const backdrop = document.querySelector('.modal-backdrop');
				if (backdrop) backdrop.remove();

				// Clean up body
				document.body.classList.remove('modal-open');
				document.body.style.overflow = '';
				document.body.style.paddingRight = '';
			  }

			  // Clear the form for future use
			  document.getElementById("reportUserContent").value = "";

			  // Show success message
			  showToast("User reported successfully!");
			} else {
			  const errorData = await response.json();
			  showToast(`Error reporting user: ${errorData.message || response.statusText}`, "danger");
			}
		  } catch (error) {
			showToast(`Error reporting user: ${error.message}`, "danger");
		  }
		});

		// This is the key fix: Add event listeners to modal events
		document.addEventListener('DOMContentLoaded', function() {
		  // Listen for Post reporting modal show event
		  document.getElementById('reportPostModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract post ID from data attribute
			const postId = button.getAttribute('data-post-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportPostId').value = postId;
		  });

		  // Listen for Comment reporting modal show event
		  document.getElementById('reportCommentModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract comment ID from data attribute
			const commentId = button.getAttribute('data-comment-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportCommentId').value = commentId;
		  });

		  // Listen for User reporting modal show event
		  document.getElementById('reportUserModal').addEventListener('show.bs.modal', function (event) {
			// Get the button that triggered the modal
			const button = event.relatedTarget;
			// Extract user ID from data attribute
			const userId = button.getAttribute('data-user-id');
			// Update the modal's hidden input with this ID
			document.getElementById('reportUserreportedId').value = userId;
		  });

		  // Add click event listeners to all report buttons as a backup method
		  document.querySelectorAll('.report-post').forEach(button => {
			button.addEventListener('click', function() {
			  const postId = this.getAttribute('data-post-id');
			  document.getElementById('reportPostId').value = postId;
			});
		  });

		  document.querySelectorAll('.report-comment').forEach(button => {
			button.addEventListener('click', function() {
			  const commentId = this.getAttribute('data-comment-id');
			  document.getElementById('reportCommentId').value = commentId;
			});
		  });

		  document.querySelectorAll('.report-user').forEach(button => {
			button.addEventListener('click', function() {
			  const userId = this.getAttribute('data-user-id');
			  document.getElementById('reportUserreportedId').value = userId;
			});
		  });
		});

		// For backwards compatibility, keep these functions (but they shouldn't be needed anymore)
		function openReportPostModal(postId) {
		  document.getElementById("reportPostId").value = postId;
		  const reportPostModal = new bootstrap.Modal(document.getElementById("reportPostModal"));
		  reportPostModal.show();
		}

		function openReportCommentModal(commentId) {
		  document.getElementById("reportCommentId").value = commentId;
		  const reportCommentModal = new bootstrap.Modal(document.getElementById("reportCommentModal"));
		  reportCommentModal.show();
		}

		function openReportUserModal(userreportedId) {
		  document.getElementById("reportUserreportedId").value = userreportedId;
		  const reportUserModal = new bootstrap.Modal(document.getElementById("reportUserModal"));
		  reportUserModal.show();
		}
	</script>

	<style>
		.comment {
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 1px solid #eee;
		}

		.replies {
			margin-top: 10px;
		}

		.reply-comment {
			margin-bottom: 15px;
		}
	</style>

</body>

</html>
