@page
@model final_project_fe.Pages.Mentor.LearningPageModel
@{
}

@using Newtonsoft.Json
@using final_project_fe.Dtos.Lesson

@{
    var modulesData = new Dictionary<int, object>();
    int idx = 1;

    string ExtractMinutes(string title)
    {
        var match = System.Text.RegularExpressions.Regex.Match(title ?? "", @"(\d+)\s*min");
        return match.Success ? match.Groups[1].Value : "10";
    }

    foreach (var module in Model.Modules)
    {
        modulesData[idx] = new
        {
            title = module.Title,
            percentage = module.Percentage,
            lessons = (module.Lessons ?? new List<LessonbyModuleDto>())
                .Select(l => new
                {
                    lessonId = l.LessonId,
                    text = $"{l.Title} ({ExtractMinutes(l.Title)} min)",
                    completed = l.Ispassed
                }).ToArray()
        };
        idx++;
    }

    string modulesJson = JsonConvert.SerializeObject(modulesData);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Learning Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #ffffff;
            color: #000000;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 350px;
            background: #f2f2f2;
            border-right: 1px solid #dddddd;
            padding: 0;
        }

        .course-header {
            padding: 30px 25px;
            border-bottom: 1px solid #dddddd;
        }

        .course-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 12px;
            margin-bottom: 20px;
            filter: grayscale(100%);
            transition: 0.3s;
        }

            .course-image:hover {
                filter: grayscale(70%);
                transform: scale(1.02);
            }

        .course-title {
            font-size: 20px;
            font-weight: 700;
            color: #000000;
            margin-bottom: 8px;
        }

        .course-provider {
            font-size: 14px;
            color: #333333;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px; /* Thêm margin-bottom để tạo khoảng cách với nút back */
        }

            .course-provider i {
                color: #000000;
            }

        .modules-section {
            padding: 25px;
        }

        .modules-title {
            font-size: 18px;
            font-weight: 600;
            color: #000000;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .modules-title i {
                color: #000000;
            }

        .module-list {
            list-style: none;
        }

        .module-item {
            margin-bottom: 12px;
            border-radius: 8px;
            transition: 0.3s;
            cursor: pointer;
        }

            .module-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            }

            .module-item.active {
                background: #000000;
                color: #ffffff;
            }

                .module-item.active .module-text {
                    color: #0180ff;
                }

        .module-button {
            width: 100%;
            padding: 18px 20px;
            background: #ffffff;
            border: 1px solid #cccccc;
            border-radius: 8px;
            color: #000000;
            text-align: left;
            cursor: pointer;
        }

            .module-button:hover {
                background: #f0f0f0;
            }

        .module-text {
            font-size: 15px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .module-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            background: #000000;
            color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 40px;
            background: #ffffff;
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 25px 30px;
            background: #f8f8f8;
            border: 1px solid #dddddd;
            border-radius: 12px;
        }

        .duration-info {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 16px;
            font-weight: 500;
            color: #000000;
        }

            .duration-info i {
                color: #666666;
            }

        .progress-indicator {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 20px;
            background: #000000;
            color: #ffffff;
            border-radius: 8px;
        }

        .course-content {
            background: #f9f9f9;
            border: 1px solid #dddddd;
            border-radius: 12px;
            padding: 0;
        }

        .module-section {
            border-bottom: 1px solid #e0e0e0;
        }

        .module-header {
            padding: 25px 30px;
            background: #f9f9f9;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .module-title {
            font-size: 18px;
            font-weight: 600;
            color: #000000;
            display: flex;
            gap: 15px;
        }

            .module-title i {
                color: #999999;
            }

        .module-stats {
            display: flex;
            gap: 15px;
            font-size: 14px;
            color: #666666;
        }

        .lessons-container {
            padding: 0 30px 25px;
        }

            .lessons-container.hidden {
                display: none;
            }

        .lesson-item {
            margin-bottom: 12px;
        }

        .lesson-button {
            width: 100%;
            padding: 18px 20px;
            background: #ffffff;
            border: 1px solid #cccccc;
            border-radius: 8px;
            color: #000000;
            text-align: left;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .lesson-button:hover {
                background: #f0f0f0;
                transform: translateY(-2px);
            }

            .lesson-button.completed {
                background: #000000;
                color: #ffffff;
            }

        .lesson-content {
            display: flex;
            align-items: center;
            gap: 15px;
            width: 100%;
            justify-content: space-between;
        }

        .lesson-icon {
            background: #000000;
            color: #ffffff;
            border-radius: 8px;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .lesson-text {
            font-size: 15px;
            font-weight: 500;
            color: inherit;
            flex-grow: 1;
        }

        .completion-badge {
            background: #000000;
            color: #25ff00;
            border-radius: 20px;
            padding: 6px 12px;
            font-size: 12px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
            flex-shrink: 0;
        }

        /* FIXED: Back Button - Đặt trong sidebar thay vì position fixed */
        .back-button {
            /* Loại bỏ position: fixed, top: 20px, left: 20px, z-index: 9999 */
            padding: 12px 20px;
            background: #000000;
            color: #ffffff;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            border: 1px solid #000000;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            width: 100%;
            justify-content: center;
        }

            .back-button:hover {
                background: #ffffff;
                color: #000000;
                border-color: #000000;
                transform: translateY(-2px);
            }

        /* Popup Styling */
        .lesson-popup {
            position: fixed;
            inset: 0;
            display: none;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.6);
            z-index: 9999;
        }

            .lesson-popup.show {
                display: flex;
            }

        .popup-content {
            background: #ffffff;
            color: #000000;
            border: 1px solid #cccccc;
            border-radius: 12px;
            width: 90%;
            max-width: 850px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            padding: 30px;
        }

        .close-button {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666666;
            padding: 5px;
            transition: color 0.3s ease;
        }

            .close-button:hover {
                color: #000000;
            }

        .popup-header {
            margin-bottom: 20px;
            padding-right: 40px;
        }

        .popup-title {
            font-size: 24px;
            font-weight: 700;
            color: #000000;
            margin: 0;
        }

        .popup-body {
            line-height: 1.6;
        }

        /* Quiz Styles */
        .quiz-container {
            max-width: 800px;
        }

        .quiz-question {
            background: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .question-text {
            font-size: 16px;
            font-weight: 600;
            color: #000000;
            margin-bottom: 15px;
        }

        .answer-option {
            margin-bottom: 10px;
        }

        .answer-label {
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            padding: 10px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

            .answer-label:hover {
                background: rgba(0, 0, 0, 0.05);
            }

            .answer-label input[type="radio"],
            .answer-label input[type="checkbox"] {
                margin: 0;
                cursor: pointer;
            }

            .answer-label span {
                font-size: 14px;
                color: #333333;
            }

        /* Action Buttons */
        .action-button {
            background: #000000;
            color: #ffffff;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

            .action-button:hover {
                background: #333333;
                transform: translateY(-2px);
            }

        .submit-button {
            background: #000000;
            color: #ffffff;
        }

            .submit-button:hover {
                background: #333333;
            }

        /* Video and Document Styles */
        iframe {
            width: 100%;
            height: 400px;
            border: none;
            border-radius: 8px;
            margin: 20px 0;
        }

        a[href*="document"] {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: #000000;
            text-decoration: none;
            padding: 10px 15px;
            border: 1px solid #cccccc;
            border-radius: 8px;
            transition: all 0.3s ease;
            margin: 10px 0;
        }

            a[href*="document"]:hover {
                background: #f0f0f0;
                transform: translateY(-2px);
            }

        @@media (max-width: 768px) {
            .app-container

        {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            position: static;
        }

        .main-content {
            padding: 20px;
        }

        .content-header {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

        .popup-content {
            padding: 20px;
            margin: 20px;
        }

        .lesson-content {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .completion-badge {
            align-self: flex-end;
        }

        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #ffffff;
        }

        ::-webkit-scrollbar-thumb {
            background: #cccccc;
            border-radius: 4px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: #999999;
            }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="course-header">
                <img src="@(
                     !string.IsNullOrEmpty(Model.Course?.CoursesImage)
                         ? $"{Model.Course.CoursesImage}?{Model.ImageKey}"
                         : "https://coffective.com/wp-content/uploads/2018/06/default-featured-image.png.jpg")"
                     alt="Course Image" />
                <div class="course-title">@Model.Course?.CourseName</div>
                <div class="course-provider">
                    <i class='fas fa-chalkboard-teacher'></i>
                    @Model.MentorFullName
                </div>
                <div>
                    <a href="/UserCourse" class="back-button">
                        <i class="fas fa-arrow-left"></i>
                        Back to Courses
                    </a>
                </div>
            </div>

            <div class="modules-section">
                <h2 class="modules-title">
                    <i class="fas fa-layer-group"></i>
                    Course Modules
                </h2>
                <ul class="module-list">
                    @for (int i = 0; i < Model.Modules.Count; i++)
                    {
                        <li class="module-item @(i == 0 ? "active" : "")" onclick="loadModule(@(i + 1))">
                            <button class="module-button" type="button">
                                <div class="module-text">
                                    <div class="module-icon">@(i + 1)</div>
                                    Module @(i + 1)
                                </div>
                            </button>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <div class="main-content">
            <div class="content-header">
                <div class="duration-info">
                    <i class="fas fa-clock"></i>
                    <span id="durationDisplay">Total duration: 0 minutes</span>
                </div>
                <div class="progress-indicator">
                    <i class="fas fa-chart-line"></i>
                    <span>Progress Tracking</span>
                </div>
            </div>

            <div class="course-content">
                <div id="courseContent">
                    <!-- Course content will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <div id="lessonPopup" class="lesson-popup">
        <div class="popup-content">
            <button class="close-button" onclick="closePopup()">
                <i class="fas fa-times"></i>
            </button>
            <div class="popup-header">
                <h2 class="popup-title" id="lessonTitle">Lesson Content</h2>
            </div>
            <div class="popup-body">
                <div id="lessonContent">
                    <!-- Lesson content will be displayed here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        const BaseUrl = "@Model.BaseUrl";
        const modules = @Html.Raw(modulesJson);
        const userId = "@Model.UserId";
        const imageKey = "@Model.ImageKey";
        const courseId = "@Model.Course?.CourseId";

        document.addEventListener("DOMContentLoaded", () => loadModule(1));

        function extractMinutes(text) {
            const match = text.match(/(\d+)\s*min/);
            return match ? parseInt(match[1]) : 10;
        }

        function loadModule(moduleNumber) {
            const content = document.getElementById("courseContent");
            content.innerHTML = "";

            const section = modules[moduleNumber];
            if (!section) {
                content.innerHTML = "<p>Module not found.</p>";
                return;
            }

            let totalMinutes = 0;
            const sectionEl = document.createElement("div");
            sectionEl.className = "module-section";

            const header = document.createElement("div");
            header.className = "module-header";
            header.innerHTML = `
                <div class="module-title">
                    <i class="fas fa-chevron-down"></i> ${section.title}
                </div>
                <div class="module-stats">
                    <span>${Math.round(section.percentage)}% Complete</span>
                    <span>${section.lessons.length} Lessons</span>
                </div>
            `;

            const lessonsContainer = document.createElement("div");
            lessonsContainer.className = "lessons-container";

            section.lessons.forEach(lesson => {
                const lessonEl = document.createElement("div");
                lessonEl.className = "lesson-item";

                const lessonButton = document.createElement("button");
                lessonButton.className = `lesson-button ${lesson.completed ? 'completed' : ''}`;
                lessonButton.type = "button";
                lessonButton.dataset.lessonId = lesson.lessonId;
                lessonButton.onclick = () => openLesson(lesson.lessonId);

                lessonButton.innerHTML = `
                    <div class="lesson-content">
                        <div class="lesson-icon"><i class="fas ${lesson.completed ? 'fa-check' : 'fa-play'}"></i></div>
                        <div class="lesson-text">${lesson.text}</div>
                        ${lesson.completed ? '<div class="completion-badge"><i class="fas fa-check"></i> Completed</div>' : ''}
                    </div>
                `;

                lessonEl.appendChild(lessonButton);
                lessonsContainer.appendChild(lessonEl);

                totalMinutes += extractMinutes(lesson.text);
            });

            header.addEventListener("click", () => {
                lessonsContainer.classList.toggle("hidden");
                const icon = header.querySelector('.fa-chevron-down, .fa-chevron-right');
                icon.classList.toggle('fa-chevron-down');
                icon.classList.toggle('fa-chevron-right');
            });

            sectionEl.appendChild(header);
            sectionEl.appendChild(lessonsContainer);
            content.appendChild(sectionEl);

            document.getElementById("durationDisplay").textContent = `Total duration: ${totalMinutes} minutes`;

            document.querySelectorAll(".module-item").forEach((li, idx) => {
                li.classList.toggle("active", idx + 1 === moduleNumber);
            });
        }

        async function openLesson(lessonId) {
            const popup = document.getElementById("lessonPopup");
            const content = document.getElementById("lessonContent");
            content.innerHTML = "<p><i class='fas fa-spinner fa-spin'></i> Loading...</p>";
            popup.classList.add("show");

            try {
                const response = await fetch(`?handler=Lesson&lessonId=${lessonId}`, {
                    method: 'GET',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const data = await response.json();
                const { lesson, quiz, hasQuiz, hasAssignment, assignmentId } = data;

                // ✅ Kiểm tra và gọi đúng thứ tự
                if (hasAssignment) {
                    renderAssignmentPopup(lesson, assignmentId, lessonId);
                } else if (hasQuiz) {
                    renderQuiz(quiz, lessonId, lesson);
                } else {
                    renderDocOrVideo(lesson, lessonId, true);
                }

            } catch (error) {
                content.innerHTML = `<p style="color: red;">Failed to load lesson: ${error.message}</p>`;
            }
        }

        function renderLessonMaterials(lesson) {
            let html = '';

            if (lesson.description) html += `<p>${lesson.description}</p>`;
            if (lesson.videoLink) {
                const embedUrl = lesson.videoLink.replace("watch?v=", "embed/");
                html += `<iframe src="${embedUrl}" allowfullscreen></iframe>`;
            }
            if (lesson.documentLink) {
                const docLink = lesson.documentLink + (imageKey ? `?${imageKey}` : '');
                html += `<a href="${docLink}" target="_blank"><i class="fas fa-file-alt"></i> View Document</a>`;
            }

            return html;
        }

        function renderAssignmentPopup(lesson, assignmentId, lessonId) {
            const content = document.getElementById("lessonContent");
            document.getElementById("lessonTitle").textContent = lesson?.title || 'Lesson with Assignment';

            let html = '<div class="assignment-lesson-container">';
            html += renderLessonMaterials(lesson);
            html += `
            <hr>
            <div class="assignment-info">
                <h3><i class="fas fa-tasks"></i> Assignment Available</h3>
                <p>This lesson includes an assignment. Please choose how you'd like to proceed:</p>
                <div class="assignment-actions" style="display: flex; justify-content: space-between; gap: 10px;">
                    <button type="button" class="action-button assignment-button" onclick="goToAssignment(${assignmentId || lessonId})">
                        <i class="fas fa-pencil-alt"></i> Do Assignment Now
                    </button>
                    <button type="button" class="action-button schedule-button" onclick="goToSchedule(${assignmentId || lessonId})">
                        <i class="fas fa-calendar-alt"></i> Schedule Assignment
                    </button>
                </div>
            </div>`;

            content.innerHTML = html;
        }

        function renderQuiz(questions, lessonId, lesson) {
            const content = document.getElementById("lessonContent");
            document.getElementById("lessonTitle").textContent = "Quiz";

            let html = '<div class="quiz-container">';
            html += renderLessonMaterials(lesson);
            html += '<hr><h3>Quiz Questions</h3>';

            questions.forEach((question, qIdx) => {
                const qText = question.questionText || question.QuestionText || 'No question text';
                const inputType = (question.questionType || question.QuestionType) === "MultipleChoice" ? "checkbox" : "radio";
                const nameAttr = inputType === "checkbox" ? `q${qIdx}[]` : `q${qIdx}`;
                const answers = question.answers || question.Answers || question.options || question.Options || [];

                html += `<div class="quiz-question"><div class="question-text">${qIdx + 1}. ${qText}</div>`;
                if (answers.length > 0) {
                    answers.forEach((answer, aIdx) => {
                        const answerText = answer.text || answer.Text || answer.answerText || answer.AnswerText || `Answer ${aIdx + 1}`;
                        const answerId = answer.answerId || answer.AnswerId || aIdx;
                        html += `
                            <div class="answer-option">
                                <label class="answer-label">
                                    <input type="${inputType}" name="${nameAttr}" value="${answerId}">
                                    <span>${escapeHtml(answerText)}</span>
                                </label>
                            </div>
                        `;
                    });
                } else {
                    html += '<p style="color: red;">No answer options.</p>';
                }
                html += '</div>';
            });

            html += `<button type="button" class="action-button submit-button" onclick="submitQuiz(${lessonId})">
                        <i class="fas fa-paper-plane"></i> Submit Quiz
                     </button></div>`;

            content.innerHTML = html;
        }

        function renderDocOrVideo(lesson, lessonId, showCompleteButton = false) {
            const content = document.getElementById("lessonContent");
            document.getElementById("lessonTitle").textContent = lesson?.title || 'Lesson';

            let html = renderLessonMaterials(lesson);

            if (showCompleteButton) {
                html += `<button type="button" class="action-button" onclick="markLessonCompleted(${lessonId})">
                            <i class="fas fa-check"></i> Mark as Completed
                         </button>`;
            }

            content.innerHTML = html;
        }

        async function submitQuiz(lessonId) {
            try {
                const selectedInputs = Array.from(document.querySelectorAll("#lessonContent input:checked"));
                const answerIds = selectedInputs.map(input => parseInt(input.value));
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                const response = await fetch(`?handler=SubmitQuiz`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": token
                    },
                    body: JSON.stringify({ userId, lessonId, answerIds })
                });

                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const result = await response.json();
                alert(result.isPassed
                    ? `🎉 You passed the quiz with ${result.score} points!`
                    : `❌ You failed. Score: ${result.score}. Try again!`);

                if (result.isPassed) updateLessonCompletionStatus(lessonId, true);
                closePopup();
            } catch (e) {
                alert("Quiz submission failed: " + e.message);
            }
        }

        async function markLessonCompleted(lessonId) {
            try {
                const response = await fetch(`?handler=CompleteLesson`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        userId,
                        lessonId,
                        completedAt: new Date().toISOString(),
                        mark: 100,
                        isPassed: true
                    })
                });

                const result = await response.json();

                if (result.success) {
                    alert("✅ Lesson marked as completed!");
                    updateLessonCompletionStatus(lessonId, true);
                    closePopup();
                } else {
                    alert("Failed to complete lesson: " + (result.error || "Unknown error"));
                }
            } catch (error) {
                alert("Error completing lesson: " + error.message);
            }
        }

        function updateLessonCompletionStatus(lessonId, isCompleted) {
            document.querySelectorAll('.lesson-button').forEach(button => {
                if (parseInt(button.dataset.lessonId) === lessonId) {
                    button.classList.toggle('completed', isCompleted);
                    const icon = button.querySelector('.lesson-icon i');
                    icon.className = `fas ${isCompleted ? 'fa-check' : 'fa-play'}`;

                    const badge = button.querySelector('.completion-badge');
                    if (isCompleted && !badge) {
                        button.querySelector('.lesson-content').insertAdjacentHTML('beforeend', '<div class="completion-badge"><i class="fas fa-check"></i> Completed</div>');
                    } else if (!isCompleted && badge) {
                        badge.remove();
                    }
                }
            });

            Object.values(modules).forEach(module => {
                const lesson = module.lessons.find(l => l.lessonId === lessonId);
                if (lesson) lesson.completed = isCompleted;
            });
        }

        function closePopup() {
            const popup = document.getElementById("lessonPopup");
            popup.classList.remove("show");
            document.getElementById("lessonContent").innerHTML = "";
            document.getElementById("lessonTitle").textContent = "Lesson Content";
        }

        function goToAssignment(assignmentId) {
            window.location.href = `/DoAssignment/${assignmentId}`;
        }

        function goToSchedule(assignmentId) {
            window.location.href = `/RegistSchedule/${courseId}`;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        document.getElementById("lessonPopup").addEventListener("click", function (e) {
            if (e.target === this) closePopup();
        });

        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({ behavior: 'smooth' });
            });
        });
    </script>


    @Html.AntiForgeryToken()
</body>
</html>