@page
@model final_project_fe.Pages.Mentor.MentorPage.CourseDetailModel
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    Layout = null;
    ViewData["Title"] = Model.Course.CourseName;

    var roles = new List<string>();
    String userIdToken = null;
    var token = HttpContextAccessor.HttpContext?.Request.Cookies["AccessToken"];
    bool isAuthenticated = !string.IsNullOrEmpty(token);
    if (!string.IsNullOrEmpty(token))
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        roles = jwtToken.Claims
                    .Where(c => c.Type == ClaimTypes.Role || c.Type == "role")
                    .Select(c => c.Value)
                    .ToList();

        userIdToken = jwtToken.Claims
                    .FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")
                    ?.Value;
    }

    bool isMentor = roles.Contains("Mentor");
    bool isUser = roles.Contains("User");
    bool isAdmin = roles.Contains("Admin");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@Model.Course.CourseName</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        .course-sidebar {
            box-shadow: 0 2px 4px 0 rgb(0 0 0 / 8%), 0 2px 10px 0 rgb(0 0 0 / 8%);
        }

        .breadcrumb-separator::after {
            content: '>';
            margin: 0 8px;
            color: #6b7280;
        }

        .feature-icon {
            width: 16px;
            height: 16px;
        }

        .rating-stars {
            color: #facc15;
        }

        .course-content-section {
            border: 1px solid #e5e5e5;
        }

        .expandable-content {
            max-height: 200px;
            overflow: hidden;
            position: relative;
        }

        .expand-gradient {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 40px;
            background: linear-gradient(transparent, white);
        }

        .expandable-bio {
            max-height: 120px;
            overflow: hidden;
            position: relative;
        }

        .expand-gradient-bio {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 30px;
            background: linear-gradient(transparent, white);
        }

        media (max-width: 1024px) {
            .mobile-sidebar

        {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 50;
            background: white;
            border-top: 1px solid #e5e5e5;
            padding: 16px;
        }
        }

        .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        backdrop-filter: blur(2px);
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        max-width: 32rem;
        width: 100%;
        margin: 1rem;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }

    .modal-hidden {
        display: none !important;
    }

    /* Prevent body scroll when modal is open */
    .modal-open {
        overflow: hidden;
    }

    /* Animation */
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    </style>
</head>
<body class="bg-white text-gray-900">

    <!-- Top Navigation Bar -->
    @* <nav class="bg-white border-b border-gray-200 sticky top-0 z-40">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center">
                        <a href="/" class="text-2xl font-bold text-purple-600">EduPlatform</a>
                    </div>
                    <div class="hidden md:flex items-center space-x-4">
                        <button class="text-gray-700 hover:text-gray-900 px-3 py-2">Categories</button>
                        <button class="text-gray-700 hover:text-gray-900 px-3 py-2">Search</button>
                        <button class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">Sign Up</button>
                    </div>
                </div>
            </div>
        </nav> *@
    @Html.Partial("_Notification")
    <!-- Breadcrumb -->
    <div class="bg-gray-50 py-3">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            @{
                var category = Model.Categories.Items.FirstOrDefault(c => c.CategoryId == Model.Course.CategoryId);
                var categoryName = category?.Title ?? "Unknown";
            }
            <nav class="flex text-sm text-gray-600">
                <a href="/" class="hover:text-purple-600">Home</a>
                <span class="breadcrumb-separator"></span>
                <a href="/Mentor/MentorPage" class="hover:text-purple-600">Courses</a>
                <span class="breadcrumb-separator"></span>
                <a href="/Mentor/MentorPage?categoryId=@Model.Course.CategoryId" class="hover:text-purple-600">@categoryName</a>
                <span class="breadcrumb-separator"></span>
                <span class="text-gray-900 font-medium">@Model.Course.CourseName</span>
            </nav>
        </div>
    </div>

    <partial name="_ConfirmDialog" />
    <!-- Hero Section -->
    <section class="bg-gray-900 text-white py-8 lg:py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="lg:grid lg:grid-cols-3 lg:gap-8">
                <!-- Left Content -->
                <div class="lg:col-span-2">
                    <!-- Category Badge -->
                    <div class="mb-4">
                        @*  <span class="inline-flex items-center px-3 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                                Bestseller
                            </span>
                            <span class="ml-2 text-yellow-400 text-sm">⭐ Highest Rated</span> *@
                    </div>

                    <!-- Course Title -->
                    <h1 class="text-3xl lg:text-4xl font-bold mb-4 leading-tight">@Model.Course.CourseName</h1>

                    <!-- Course Subtitle/Description -->
                    @*  <p class="text-xl text-gray-200 mb-6 leading-relaxed">
                            Master the fundamentals and advanced concepts in this comprehensive course
                        </p> *@

                    <!-- Course Stats -->
                    <div class="flex flex-wrap items-center gap-4 mb-6">
                        <!-- Rating -->
                        <div class="flex items-center">
                            <span class="text-yellow-400 font-semibold mr-1">@Model.Reviews.AverageRating</span>
                            <div class="flex rating-stars mr-1">
                                ★★★★★
                            </div>
                            <span class="text-purple-200 text-sm">(@Model.Reviews.ReviewCount)</span>
                        </div>

                        <!-- Students -->
                        <span class="text-gray-300">@Model.Course.StudentCount students</span>
                    </div>

                    <!-- Instructor -->
                    <div class="flex items-center mb-4">
                        <span class="text-gray-300">Created by</span>
                        <a href="#" class="ml-2 text-purple-300 hover:text-purple-200 underline font-medium">
                            @Model.MentorInfor.UserMetaData?.FirstName @Model.MentorInfor.UserMetaData?.LastName
                        </a>
                    </div>

                    <!-- Course Meta -->
                    <div class="flex flex-wrap items-center gap-6 text-sm text-gray-300">
                        <div class="flex items-center">
                            <svg class="feature-icon mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            Last updated @Model.Course.UpdateAt?.ToString("MM/yyyy")
                        </div>
                        <div class="flex items-center">
                            <svg class="feature-icon mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
                            </svg>
                            @Model.Course.Language
                        </div>
                        <div class="flex items-center">
                            <span class="text-lg mr-2">🎯</span>
                            @Model.Course.Level
                        </div>
                    </div>
                    @if (userIdToken == null || Guid.Parse(userIdToken) != Model.MentorInfor.UserId)
                    {
                    <div>
                        <button type="button"
                                onclick="showReportModal()"
                                class="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center">
                            <i class="fas fa-flag mr-2"></i>Report Course
                        </button>
                    </div>
                    }
                </div>

                <!-- Mobile Sidebar (Hidden on desktop) -->
                <div class="lg:hidden mt-8">
                    <div class="bg-white text-gray-900 rounded-lg p-6 course-sidebar">
                        <img src="@Model.Course.CoursesImage" alt="Course preview" class="w-full rounded-lg mb-4">
                        <div class="text-3xl font-bold text-green-600 mb-2">@((int)Model.Course.Cost)</div>
                        @* <button class="w-full bg-purple-600 text-white font-bold py-4 px-6 rounded hover:bg-purple-700 transition-colors mb-3">
                                Add to cart
                            </button> *@
                        <button class="w-full border border-gray-900 text-gray-900 font-bold py-3 px-6 rounded hover:bg-gray-50 transition-colors">
                            Buy now
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Desktop Sidebar (Sticky) -->
    <div class="hidden lg:block fixed top-20 right-8 w-80 z-30">
        <div class="bg-white rounded-lg course-sidebar overflow-visible">
            <!-- Course Preview -->
            <div class="relative">
                <img src="@Model.Course.CoursesImage" alt="Course preview" class="w-full h-48 object-cover">
            </div>

            <div class="p-6">
                <!-- Price -->
                <div class="mb-4" id="coursePrice" data-cost="@Model.Course.Cost">
                    <span class="text-3xl font-bold">
                        <svg class="w-6 h-6 inline" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <!-- Đồng xu (màu vàng kim) -->
                            <circle cx="12" cy="12" r="10" fill="#FFD700" stroke="#D4AF37" stroke-width="1.5" />
                            <!-- Chữ P in đậm, màu tối -->
                            <text x="12" y="16" text-anchor="middle" font-weight="bold" font-size="12" fill="#000000">P</text>
                        </svg>
                        @((int)Model.Course.Cost)
                    </span>
                    @* <span class="text-gray-500 line-through ml-2">$199.99</span>
                        <span class="text-red-600 text-sm ml-2">75% off</span> *@
                </div>
                @if (userIdToken == null || Guid.Parse(userIdToken) != Model.MentorInfor.UserId)
                {
                    @if (userIdToken == null || isUser || isMentor && Model.Course.Status == "Approved")
                    {
                        <!-- Action Buttons -->
                        <form id="buyForm" method="post" class="space-y-3 mb-4">
                            <input type="hidden" name="CourseId" value="@Model.Course.CourseId" />
                            <input type="hidden" name="SelectedCouponId" id="SelectedCouponId" value="0" />
                            <button type="submit"
                                    class="w-full border border-gray-900 text-gray-900 font-bold py-3 px-6 rounded hover:bg-gray-50 transition-colors">
                                Buy now
                            </button>
                        </form>

                        <!-- Money-back guarantee -->
                        <p class="text-center text-sm text-gray-600 mb-6">30-Day Money-Back Guarantee</p>
                    }
                }

                @if ((isAdmin || (isMentor && Guid.Parse(userIdToken) == Model.MentorInfor.UserId)) && Model.Course.Status == "Approved")
                {
                    <div class="space-y-3 mb-4">
                        <form method="post" asp-page="/Mentor/MentorPage/DeleteCourse" asp-route-id="@Model.Course.CourseId">
                            <button type="submit" class="w-full border border-gray-900 text-gray-900 font-bold py-3 px-6 rounded hover:bg-gray-50 transition-colors" onclick="event.preventDefault(); showConfirm({
                                    type: 'danger' ,
                                    title: 'Delete Course' ,
                                    message: 'Are you sure you want to delete this Course?' ,
                                    confirmText: 'Delete' ,
                                    cancelText: 'Cancel' ,
                                    onConfirm: ()=>
                                this.closest('form').submit()
                                })">
                                Delete Course
                            </button>
                        </form>
                    </div>
                }

                <!-- Course includes -->
                <div>
                    <h3 class="font-semibold mb-3">This course includes:</h3>
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-center">
                            <svg class="feature-icon mr-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            @Model.Course.CourseLength hours on-demand video
                        </li>
                        <li class="flex items-center">
                            <svg class="feature-icon mr-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            Downloadable resources
                        </li>
                        <li class="flex items-center">
                            <svg class="feature-icon mr-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                            </svg>
                            Access on mobile and TV
                        </li>
                        <li class="flex items-center">
                            <svg class="feature-icon mr-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v7a2 2 0 002 2z" />
                            </svg>
                            Full lifetime access
                        </li>
                        <li class="flex items-center">
                            <svg class="feature-icon mr-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                            </svg>
                            Certificate of completion
                        </li>
                    </ul>
                </div>
                @if (userIdToken == null || Guid.Parse(userIdToken) != Model.MentorInfor.UserId)
                {
                    @if (userIdToken == null || isUser || isMentor && Model.Course.Status == "Approved")
                    {
            <!-- Share and Gift -->
             <!-- Coupon Section -->
            <div class="mt-6 pt-6 border-t border-gray-200 relative z-30">
                <div class="flex items-center justify-between text-sm">
                    <div class="relative w-full overflow-visible">
                        <!-- Button -->
                        <button type="button"
                                class="text-purple-600 hover:text-purple-700 font-medium flex items-center"
                                onclick="toggleCouponDropdown()">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M7 4V2a1 1 0 011-1h4a1 1 0 011 1v2h4a1 1 0 011 1v2a1 1 0 01-1 1h-1l-1 10a2 2 0 01-2 2H8a2 2 0 01-2-2L5 8H4a1 1 0 01-1-1V5a1 1 0 011-1h3z"/>
                            </svg>
                            Apply Coupon
                        </button>

                        <!-- Dropdown -->
                        <div id="couponDropdown"
                             class="hidden absolute z-50 mt-2 w-full bg-white border border-gray-300 rounded-md shadow-lg max-h-48 overflow-y-auto">
                            @if (Model.AvailableCoupons.Any(c => c.CouponId != 11))
                            {
                                @foreach (var coupon in Model.AvailableCoupons.Where(c => c.CouponId != 11))
                                {
                                    <button type="button"
                                            class="w-full text-left px-4 py-3 hover:bg-gray-100 border-b border-gray-100 last:border-b-0 transition-colors"
                                            onclick="applyCoupon('@coupon.CouponId', '@coupon.CouponName', @coupon.Discount, @Model.Course.Cost)">
                                        <div class="flex justify-between items-center">
                                            <div>
                                                <div class="font-medium text-gray-900">@coupon.CouponName</div>
                                            </div>
                                            <div class="text-right">
                                                <div class="text-sm font-bold text-green-600">@($"{coupon.Discount}%")</div>
                                                <div class="text-xs text-gray-500">OFF</div>
                                            </div>
                                        </div>
                                    </button>
                                }
                            }
                            else
                            {
                                <div class="px-4 py-3 text-gray-500 text-sm text-center">
                                    <svg class="w-8 h-8 mx-auto mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.291-1.004-5.824-2.709M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                                    </svg>
                                    No coupons available for this course
                                </div>
                            }
                        </div>
                    </div>
                    </div>
            </div>
                    }
                }

                @if (Model.Course.Status == "Pending")
                {
                    @if (isAdmin)
                    {
                        <div class="mt-6 pt-6 border-t border-gray-200">
                            <div class="space-y-3">
                                <h4 class="font-semibold text-gray-900 mb-3">Course Approval</h4>
                                <div class="flex space-x-3">
                                    <!-- Approved Button -->
                                    <form method="post" asp-page="/Admin/CourseManager/CourseApproval" asp-route-id="@Model.Course.CourseId" asp-route-status="Approved" class="flex-1">
                                        <button type="submit" class="w-full bg-green-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center justify-center" onclick="event.preventDefault(); showConfirm({
                                        type: 'success' ,
                                        title: 'Ignore reports' ,
                                        message: 'Are you sure you want to approve this course?' ,
                                        confirmText: 'Approved' ,
                                        cancelText: 'Cancel' ,
                                        onConfirm: ()=>
                                    this.closest('form').submit()
                                    })">
                                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                            </svg>
                                            Approve
                                        </button>
                                    </form>

                                    <!-- Rejected Button -->
                                    <form method="post" asp-page="/Admin/CourseManager/CourseApproval" asp-route-id="@Model.Course.CourseId" asp-route-status="Rejected" class="flex-1">
                                        <button type="submit" class="w-full bg-red-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-red-700 transition-colors duration-200 flex items-center justify-center" onclick="event.preventDefault(); showConfirm({
                                        type: 'danger' ,
                                        title: 'Ignore reports' ,
                                        message: 'Are you sure you want to reject this course?' ,
                                        confirmText: 'Rejected' ,
                                        cancelText: 'Cancel' ,
                                        onConfirm: ()=>
                                    this.closest('form').submit()
                                    })">
                                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                            Reject
                                        </button>
                                    </form>
                                </div>

                                <!-- Current Status Display -->
                                <div class="mt-4 p-3 bg-gray-50 rounded-lg">
                                    <div class="flex items-center">
                                        <span class="text-sm font-medium text-gray-700 mr-2">Current Status:</span>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                            @(Model.Course.Status == "Approved" ? "bg-green-100 text-green-800" :
                                            Model.Course.Status == "Rejected" ? "bg-red-100 text-red-800" :
                                            "bg-yellow-100 text-yellow-800")">
                                            @Model.Course.Status
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    @if (isMentor)
                    {
                        <div class="mt-6 pt-6 border-t border-gray-200">
                            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                                <div class="flex items-center">
                                    <svg class="w-6 h-6 text-yellow-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <div>
                                        <h4 class="font-semibold text-yellow-800 mb-1">Course pending approval</h4>
                                        <p class="text-sm text-yellow-700">
                                            Your course is being reviewed and approved by the administrator.
                                            Please wait for notification from the system.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }

                @if (Model.Course.Status == "Rejected")
                {
                    <div class="mt-6 pt-6 border-t border-gray-200">
                        <div class="space-y-3">
                            @if (isAdmin)
                            {
                                <!-- Admin view for rejected course -->
                                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                                    <div class="flex items-center mb-3">
                                        <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L5.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                        </svg>
                                        <h4 class="font-semibold text-red-800">Course Status</h4>
                                    </div>
                                    <p class="text-red-700 text-sm mb-3">This course has been rejected and is not visible to students.</p>
                                </div>
                            }

                            @if (isMentor)
                            {
                                <!-- Mentor view for rejected course -->
                                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                                    <div class="flex items-center mb-3">
                                        <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L5.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                        </svg>
                                        <h4 class="font-semibold text-red-800">Course Rejected</h4>
                                    </div>
                                    <p class="text-red-700 text-sm mb-4">Your course has been rejected. Please review and edit your course content, then resubmit for approval.</p>

                                    <!-- Edit Course Button -->
                                    <div class="flex space-x-3">
                                        <a asp-page="/Mentor/MentorPage/EditCourse" asp-route-courseId="@Model.Course.CourseId"
                                           class="flex-1 bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center text-sm">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                            Edit Course
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                        <button class="text-purple-600 hover:text-purple-700 font-medium">Apply Coupon</button>

                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="lg:pr-96">
            <!-- What you'll learn -->
            <section class="mb-12">
                <div class="border border-gray-200 rounded-lg p-6">
                    <h2 class="text-2xl font-bold mb-6">What you'll learn</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        @foreach (var skill in (Model?.Course?.SkillLearn ?? "").Split("\r\n", StringSplitOptions.RemoveEmptyEntries))
                            {
                                <div class="flex items-start">
                                    <svg class="w-4 h-4 text-gray-700 mr-3 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                    </svg>
                                    <span class="text-gray-700">@skill.Trim()</span>
                                </div>
                            }
                    </div>
                </div>
            </section>

            <!-- Course Content -->
            @if (Model.Modules.Any())
            {
                <section class="mb-12">
                    <div class="mb-6">
                        <h2 class="text-2xl font-bold mb-2">Course content</h2>
                        <p class="text-gray-600">
                            @Model.Modules.Count sections • @Model.Modules.Sum(m => m.Lessons.Count) lectures • @Model.Course.CourseLength hours total length
                        </p>
                    </div>

                    <div class="border border-gray-200 rounded-lg course-content-section">
                        @for (int i = 0; i < Model.Modules.Count; i++)
                        {
                            var module = Model.Modules[i];
                            <div class="@(i > 0 ? "border-t border-gray-200" : "")">
                                <button class="w-full px-6 py-4 text-left hover:bg-gray-50 flex items-center justify-between">
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                        </svg>
                                        <span class="font-semibold">@module.Title</span>
                                    </div>
                                    <span class="text-sm text-gray-600">@module.Lessons.Count lectures</span>
                                </button>
                                <div class="px-6 pb-4 hidden">
                                    @foreach (var lesson in module.Lessons)
                                    {
                                        <div class="flex items-center justify-between py-2 pl-8">
                                            <div class="flex items-center">
                                                <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1" />
                                                </svg>
                                                <span class="text-gray-700">@lesson.Title</span>
                                            </div>
                                            @* <span class="text-sm text-gray-500">5:32</span> *@
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Requirements -->
            <section class="mb-12">
                <h2 class="text-2xl font-bold mb-4">Requirements</h2>
                <ul class="space-y-2">
                    @foreach (var req in Model.Course?.Requirement.Split('.').Where(r => !string.IsNullOrWhiteSpace(r)))
                    {
                        <li class="flex items-start">
                            <span class="w-2 h-2 bg-gray-900 rounded-full mr-3 mt-2 flex-shrink-0"></span>
                            <span class="text-gray-700">@req.Trim()</span>
                        </li>
                    }
                </ul>
            </section>

            <!-- Description -->
            <section class="mb-12">
                <h2 class="text-2xl font-bold mb-4">Description</h2>
                <div class="expandable-content">
                    <div class="prose max-w-none text-gray-700 leading-relaxed">
                        @Html.Raw(Model.Course?.CourseContent?.Replace("\n", "<br>"))
                    </div>
                    <div class="expand-gradient"></div>
                </div>
                <button class="text-purple-600 hover:text-purple-700 font-medium mt-2">Show more</button>
            </section>

            <!-- Who this course is for -->
            <section class="mb-12">
                <h2 class="text-2xl font-bold mb-4">Who this course is for:</h2>
                <ul class="space-y-2">
                    @foreach (var learner in Model.Course.IntendedLearner.Split('.').Where(l => !string.IsNullOrWhiteSpace(l)))
                    {
                        <li class="flex items-start">
                            <span class="w-2 h-2 bg-gray-900 rounded-full mr-3 mt-2 flex-shrink-0"></span>
                            <span class="text-gray-700">@learner.Trim()</span>
                        </li>
                    }
                </ul>
            </section>

            <!-- Instructor Information -->
            <section class="mb-12">
                <h2 class="text-2xl font-bold mb-6">Instructor</h2>
                <div class="border border-gray-200 rounded-lg p-6">
                    <div class="flex items-start space-x-4">
                        <!-- Instructor Avatar -->
                        <div class="flex-shrink-0">
                            <img src="@Model.MentorInfor.UserMetaData?.Avatar" alt="Instructor" class="w-20 h-20 rounded-full object-cover">
                        </div>

                        <!-- Instructor Details -->
                        <div class="flex-1">
                            <h3 class="text-xl font-bold text-purple-600 mb-1">
                                <a href="#" class="hover:underline">@Model.MentorInfor.UserMetaData?.FirstName @Model.MentorInfor.UserMetaData?.LastName</a>
                            </h3>
                            <p class="text-gray-600 mb-3">@Model.Mentor.JobTitle</p>

                            <!-- Instructor Stats -->
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm">
                                <div class="flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                    </svg>
                                    <span class="font-semibold mr-1">@Model.Mentor.AverageRating</span>
                                    <span class="text-gray-600">Instructor Rating</span>
                                </div>
                                <div class="flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                                    </svg>
                                    <span class="font-semibold mr-1">@Model.Mentor.TotalReviews</span>
                                    <span class="text-gray-600">Reviews</span>
                                </div>
                                <div class="flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                                    </svg>
                                    <span class="font-semibold mr-1">@Model.Mentor.TotalStudents</span>
                                    <span class="text-gray-600">Students</span>
                                </div>
                                <div class="flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                    <span class="font-semibold mr-1">@Model.Mentor.TotalCourses</span>
                                    <span class="text-gray-600">Courses</span>
                                </div>
                            </div>

                            <!-- Instructor Bio -->
                            <div class="expandable-bio">
                                <p class="text-gray-700 leading-relaxed">
                                    @Model.Mentor.Introduction
                                </p>
                                <div class="expand-gradient-bio"></div>
                            </div>
                            <button class="text-purple-600 hover:text-purple-700 font-medium mt-2 show-more-bio">Show more</button>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Student Reviews -->
            <section class="mb-12">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold">Student feedback</h2>
                    @* <button class="text-purple-600 hover:text-purple-700 font-medium">See all reviews</button> *@
                </div>

                <!-- Rating Overview -->
                <div class="bg-gray-50 rounded-lg p-6 mb-6">
                    <div class="flex items-center space-x-8">
                        <!-- Overall Rating -->
                        <div class="text-center">
                            <div class="text-5xl font-bold text-yellow-600 mb-2">@Model.Reviews.AverageRating.ToString("F1")</div>
                            <div class="flex justify-center mb-2">
                                <div class="flex text-yellow-400 text-lg">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(@Model.Reviews.AverageRating))
                                        {
                                            <span>★</span>
                                        }
                                        else if (i == Math.Ceiling(@Model.Reviews.AverageRating) && @Model.Reviews.AverageRating % 1 != 0)
                                        {
                                            <span>☆</span> <!-- Half star could be implemented with custom CSS -->
                                        }
                                        else
                                        {
                                            <span class="text-gray-300">★</span>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="text-sm text-gray-600">Course Rating (@Model.Reviews.ReviewCount reviews)</div>
                        </div>

                        <!-- Rating Breakdown -->
                        <div class="flex-1">
                            <div class="space-y-2">
                                @{
                                    // Calculate rating distribution
                                    var ratingCounts = new Dictionary<int, int>();
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        ratingCounts[i] = @Model.Reviews.Reviews.Count(r => Math.Floor(r.Rate) == i);
                                    }
                                }

                                @for (int stars = 5; stars >= 1; stars--)
                                {
                                    var count = ratingCounts[stars];
                                    var percentage = @Model.Reviews.ReviewCount > 0 ? (count * 100 / @Model.Reviews.ReviewCount) : 0;

                                    <div class="flex items-center space-x-3">
                                        <div class="flex items-center space-x-1 w-16">
                                            <span class="text-sm text-gray-600">@stars</span>
                                            <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                            </svg>
                                        </div>
                                        <div class="flex-1 h-2 bg-gray-200 rounded-full">
                                            <div class="h-2 bg-yellow-400 rounded-full" style="width: @percentage%"></div>
                                        </div>
                                        <span class="text-sm text-gray-600 w-8">@percentage%</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Individual Reviews -->
                <div class="space-y-6">
                    @if (@Model.Reviews.Reviews.Any())
                    {
                        @foreach (var review in @Model.Reviews.Reviews)
                        {
                            <div class="border-b border-gray-200 pb-6">
                                <div class="flex items-start space-x-4">
                                    <img src="@(!string.IsNullOrEmpty(review.User?.UserMetaData?.Avatar) ? review.User.UserMetaData.Avatar : "https://via.placeholder.com/48x48")"
                                         alt="@review.User?.UserMetaData?.FirstName @review.User?.UserMetaData?.LastName"
                                         class="w-12 h-12 rounded-full object-cover">
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between mb-2">
                                            <div>
                                                <h4 class="font-semibold">@review.User?.UserMetaData?.FirstName @review.User?.UserMetaData?.LastName</h4>
                                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                                    <div class="flex text-yellow-400">
                                                        @for (int i = 1; i <= 5; i++)
                                                        {
                                                            if (i <= review.Rate)
                                                            {
                                                                <span>★</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-gray-300">★</span>
                                                            }
                                                        }
                                                    </div>
                                                    <span>@review.CreateAt.ToString("MMM dd, yyyy")</span>
                                                </div>
                                            </div>
                                            <!-- Check if this review belongs to current user -->
                                            @if (!string.IsNullOrEmpty(userIdToken) && userIdToken == review.User?.UserId.ToString())
                                            {
                                                <!-- Dropdown menu for user's own review -->
                                                <div class="relative" x-data="{ open: false }">
                                                    <button x-on:click="open = !open" class="text-gray-400 hover:text-gray-600 p-1 rounded-full hover:bg-gray-100">
                                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
                                                        </svg>
                                                    </button>

                                                    <!-- Dropdown Menu -->
                                                    <div x-show="open"
                                                         x-on:click.away="open = false"
                                                         x-transition:enter="transition ease-out duration-200"
                                                         x-transition:enter-start="opacity-0 scale-95"
                                                         x-transition:enter-end="opacity-100 scale-100"
                                                         x-transition:leave="transition ease-in duration-75"
                                                         x-transition:leave-start="opacity-100 scale-100"
                                                         x-transition:leave-end="opacity-0 scale-95"
                                                         class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                                                        <div class="py-1">
                                                            <!-- FIXED: Added courseId and userId parameters -->
                                                            <button onclick="editReview(@review.ReviewId, '@Html.Raw(Html.Encode(review.Content))', @review.Rate, @Model.Course.CourseId, '@review.User.UserId')"
                                                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                                <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                                </svg>
                                                                Update Review
                                                            </button>
                                                            <button onclick="deleteReview(@review.ReviewId, @Model.Course.CourseId)"
                                                                    class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                                                                <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                                </svg>
                                                                Delete Review
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <!-- Regular three dots for other users' reviews -->
                                                <button class="text-gray-400 hover:text-gray-600">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
                                                    </svg>
                                                </button>
                                            }

                                            <!-- Popup Modal for Update Review -->
                                            <div id="updateReviewModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
                                                <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
                                                    <div class="px-6 py-4 border-b border-gray-200">
                                                        <h3 class="text-lg font-semibold text-gray-900">Update Review</h3>
                                                    </div>

                                                    <!-- FIXED: Added courseId parameter to form action -->
                                                    <form id="updateReviewForm" method="post" asp-page-handler="UpdateReview" asp-route-courseId="@Model.Course.CourseId" class="p-6">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" id="updateReviewId" name="Review.ReviewId" />
                                                        <input type="hidden" id="updateCourseId" name="Review.CourseId" value="@Model.Course.CourseId" />
                                                        <input type="hidden" id="updateUserId" name="Review.UserId" />

                                                        <!-- Rating Section -->
                                                        <div class="mb-4">
                                                            <label class="block text-sm font-medium text-gray-700 mb-2">Rating</label>
                                                            <div class="flex space-x-1" id="updateRatingStars">
                                                                <button type="button" onclick="setUpdateRating(1)" class="update-star text-gray-300 hover:text-yellow-400 focus:outline-none">
                                                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                                    </svg>
                                                                </button>
                                                                <button type="button" onclick="setUpdateRating(2)" class="update-star text-gray-300 hover:text-yellow-400 focus:outline-none">
                                                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                                    </svg>
                                                                </button>
                                                                <button type="button" onclick="setUpdateRating(3)" class="update-star text-gray-300 hover:text-yellow-400 focus:outline-none">
                                                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                                    </svg>
                                                                </button>
                                                                <button type="button" onclick="setUpdateRating(4)" class="update-star text-gray-300 hover:text-yellow-400 focus:outline-none">
                                                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                                    </svg>
                                                                </button>
                                                                <button type="button" onclick="setUpdateRating(5)" class="update-star text-gray-300 hover:text-yellow-400 focus:outline-none">
                                                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                                    </svg>
                                                                </button>
                                                            </div>
                                                            <input type="hidden" id="updateRatingValue" name="Review.Rate" />
                                                        </div>

                                                        <!-- Content Section -->
                                                        <div class="mb-6">
                                                            <label for="updateContent" class="block text-sm font-medium text-gray-700 mb-2">Review Content</label>
                                                            <textarea id="updateContent" name="Review.Content" rows="4"
                                                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                                      placeholder="Write your review here..."></textarea>
                                                        </div>

                                                        <!-- Buttons -->
                                                        <div class="flex justify-end space-x-3">
                                                            <button type="button" onclick="closeUpdateModal()"
                                                                    class="px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500">
                                                                Cancel
                                                            </button>
                                                            <button type="submit"
                                                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                                                Update Review
                                                            </button>
                                                        </div>
                                                    </form>
                                                </div>
                                            </div>

                                        </div>
                                        <p class="text-gray-700 leading-relaxed">
                                            @review.Content
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-8 text-gray-500">
                            <p>No reviews yet. Be the first to review this course!</p>
                        </div>
                    }
                </div>

                <!-- Pagination if needed -->
                @if (@Model.Reviews.TotalCount > @Model.Reviews.PageSize)
                {
                    <div class="flex justify-center mt-8">
                        <nav class="flex items-center space-x-2">
                            <!-- Previous button -->
                            @if (@Model.Reviews.Page > 1)
                            {
                                <a href="?courseId=@Model.Course.CourseId&currentPage=@(Model.Reviews.Page - 1)" class="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded">
                                    Previous
                                </a>
                            }

                            <!-- Page numbers -->
                            @{
                                var totalPages = (int)Math.Ceiling((double)Model.Reviews.TotalCount / Model.Reviews.PageSize);
                                var startPage = Math.Max(1, Model.Reviews.Page - 2);
                                var endPage = Math.Min(totalPages, Model.Reviews.Page + 2);
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <a href="?courseId=@Model.Course.CourseId&currentPage=@i" class="px-3 py-2 text-sm @(i == Model.Reviews.Page ? "bg-purple-600 text-white" : "text-gray-600 hover:text-gray-800 hover:bg-gray-100") rounded">
                                    @i
                                </a>
                            }

                            <!-- Next button -->
                            @if (Model.Reviews.Page < totalPages)
                            {
                                <a href="?courseId=@Model.Course.CourseId&currentPage=@(Model.Reviews.Page + 1)" class="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded">
                                    Next
                                </a>
                            }
                        </nav>
                    </div>
                }
            </section>
        </div>
    </div>

    <!-- Report Course Modal -->
    <div id="reportCourseModal" class="modal-overlay modal-hidden">
        <div class="modal-content animate-fade-in">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-gray-900">
                    <i class="fas fa-exclamation-triangle mr-2 text-red-600"></i>
                    Report Course
                </h3>
                <button onclick="hideReportModal()" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <form method="post" asp-page="/CreateReportPage/ReportCourse">
                <input type="hidden" name="CourseId" value="@Model.Course.CourseId" />

                <div class="space-y-4">
                    <div>
                        <label for="reportContent" class="block text-sm font-medium text-gray-700 mb-2">Report Content</label>
                        <div class="relative">
                            <textarea id="reportContent"
                                      name="Content"
                                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                                      rows="5"
                                      placeholder="Please describe the issue you found in this course..."
                                      required></textarea>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-4 mt-6">
                    <button type="button"
                            onclick="hideReportModal()"
                            class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                        <i class="fas fa-times mr-2"></i>Cancel
                    </button>
                    <button type="submit"
                            class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-paper-plane mr-2"></i>Submit Report
                    </button>
                </div>
            </form>
        </div>
    </div>
    

    <!-- Mobile Bottom Bar -->
    <div class="lg:hidden mobile-sidebar">
        <div class="flex items-center justify-between">
            <div>
                <div class="text-2xl font-bold">$@((int)Model.Course.Cost)</div>
                <div class="text-sm text-gray-600">30-Day Money-Back Guarantee</div>
            </div>
            <div class="flex space-x-2">
                @* <button class="bg-purple-600 text-white font-bold py-3 px-6 rounded hover:bg-purple-700">
                        Add to cart
                    </button> *@
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.3/cdn.min.js" defer></script>
    <script>
        // Add interactivity for course content sections
        document.querySelectorAll('.course-content-section button').forEach(button => {
            button.addEventListener('click', function () {
                const content = this.nextElementSibling;
                const icon = this.querySelector('svg');

                if (content.classList.contains('hidden')) {
                    content.classList.remove('hidden');
                    icon.style.transform = 'rotate(90deg)';
                } else {
                    content.classList.add('hidden');
                    icon.style.transform = 'rotate(0deg)';
                }
            });
        });

        // Expandable description
        document.querySelector('.expandable-content + button')?.addEventListener('click', function () {
            const content = document.querySelector('.expandable-content');
            const gradient = content.querySelector('.expand-gradient');

            if (content.style.maxHeight === 'none') {
                content.style.maxHeight = '200px';
                gradient.style.display = 'block';
                this.textContent = 'Show more';
            } else {
                content.style.maxHeight = 'none';
                gradient.style.display = 'none';
                this.textContent = 'Show less';
            }
        });

        // Expandable instructor bio
        document.querySelector('.show-more-bio')?.addEventListener('click', function () {
            const bio = document.querySelector('.expandable-bio');
            const gradient = bio.querySelector('.expand-gradient-bio');

            if (bio.style.maxHeight === 'none') {
                bio.style.maxHeight = '120px';
                gradient.style.display = 'block';
                this.textContent = 'Show more';
            } else {
                bio.style.maxHeight = 'none';
                gradient.style.display = 'none';
                this.textContent = 'Show less';
            }
        });
    </script>
    <script>
        function applyCoupon(couponId, couponName, discount, originalCost) {
            document.getElementById("SelectedCouponId").value = couponId;

            const newPrice = (originalCost * (1 - discount / 100)).toFixed(0); // làm tròn xuống số nguyên
            const priceHtml = `
                <svg class="w-6 h-6 inline" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="10" fill="#FFD700" stroke="#D4AF37" stroke-width="1.5" />
                    <text x="12" y="16" text-anchor="middle" font-weight="bold" font-size="12" fill="#000000">P</text>
                </svg>
                <span class="text-green-600 font-bold text-3xl">${newPrice}</span>
                <span class="line-through ml-2 text-gray-400 text-base">${originalCost}</span>`;

            document.getElementById("coursePrice").innerHTML = priceHtml;
        }

    function toggleCouponDropdown() {
        const dropdown = document.getElementById("couponDropdown");
        dropdown.classList.toggle("hidden");
    }
    </script>
    <script>
        // Show/Hide report modal
        function showReportModal() {
            const modal = document.getElementById('reportCourseModal');
            const body = document.body;

            modal.classList.remove('modal-hidden');
            body.classList.add('modal-open');

            // Focus first input
            setTimeout(() => {
                const textarea = modal.querySelector('textarea');
                if (textarea) {
                    textarea.focus();
                }
            }, 100);
        }

        function hideReportModal() {
            const modal = document.getElementById('reportCourseModal');
            const body = document.body;

            modal.classList.add('modal-hidden');
            body.classList.remove('modal-open');
        }

        // Close modal when clicking outside
        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('reportCourseModal');
            if (modal) {
                modal.addEventListener('click', function (e) {
                    if (e.target === modal) {
                        hideReportModal();
                    }
                });
            }

            // Close modal with Escape key
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape' && modal && !modal.classList.contains('modal-hidden')) {
                    hideReportModal();
                }
            });
        });
    </script>
     <script>
        document.getElementById("buyForm").addEventListener("submit", function (e) {
            e.preventDefault(); // chặn submit mặc định
            showConfirm({
                type: 'info',
                title: 'Confirm Purchase',
                message: 'Are you sure you want to buy this course?',
                confirmText: 'Yes, Buy',
                cancelText: 'Cancel',
                onConfirm: () => {
                    e.target.submit(); // chỉ submit khi bấm Yes
                }
            });
        });
    </script>
    <script>
        function editReview(reviewId, content, rating, courseId, userId) {
            console.log('editReview called with:', { reviewId, content, rating, courseId, userId });

            // Set form data
            document.getElementById('updateReviewId').value = reviewId;
            document.getElementById('updateContent').value = content;
            document.getElementById('updateRatingValue').value = rating;

            // FIXED: Always set CourseId and UserId
            document.getElementById('updateCourseId').value = courseId || @Model.Course.CourseId;
            document.getElementById('updateUserId').value = userId;

            // Set rating stars
            setUpdateRating(rating);

            // Show modal
            document.getElementById('updateReviewModal').classList.remove('hidden');
        }

        function setUpdateRating(rating) {
            document.getElementById('updateRatingValue').value = rating;
            const stars = document.querySelectorAll('.update-star');
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.classList.remove('text-gray-300');
                    star.classList.add('text-yellow-400');
                } else {
                    star.classList.remove('text-yellow-400');
                    star.classList.add('text-gray-300');
                }
            });
        }

        function closeUpdateModal() {
            document.getElementById('updateReviewModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('updateReviewModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeUpdateModal();
            }
        });

             function deleteReview(reviewId, courseId) {
            if (confirm('Are you sure you want to delete this review? This action cannot be undone.')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=DeleteReview';

                // Add ReviewId parameter
                const reviewIdInput = document.createElement('input');
                reviewIdInput.type = 'hidden';
                reviewIdInput.name = 'id';
                reviewIdInput.value = reviewId;
                form.appendChild(reviewIdInput);

                // Add CourseId parameter
                const courseIdInput = document.createElement('input');
                courseIdInput.type = 'hidden';
                courseIdInput.name = 'courseId';
                courseIdInput.value = courseId;
                form.appendChild(courseIdInput);

                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                document.body.appendChild(form);
                form.submit();
            }
        }

        // Keep existing functions for inline editing if you still use them
        function cancelEdit(reviewId) {
            document.getElementById('review-content-' + reviewId).style.display = 'block';
            document.getElementById('edit-form-' + reviewId).classList.add('hidden');
        }

        function setRating(reviewId, rating) {
            document.getElementById('rating-' + reviewId).value = rating;
            setEditRatingDisplay(reviewId, rating);
        }

        function setEditRatingDisplay(reviewId, rating) {
            const stars = document.querySelectorAll(`[data-review-id="${reviewId}"]`);
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.classList.remove('text-gray-300');
                    star.classList.add('text-yellow-400');
                } else {
                    star.classList.remove('text-yellow-400');
                    star.classList.add('text-gray-300');
                }
            });
        }
    </script>
</body>
</html>