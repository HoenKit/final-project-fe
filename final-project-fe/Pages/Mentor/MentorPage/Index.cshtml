@page
@model final_project_fe.Pages.Mentor.MentorPage.IndexModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Course Page";
    var title = Request.Query["title"];
    var categoryId = Request.Query["categoryId"];
    var sortOption = Request.Query["sortOption"];
    var userToken = HttpContextAccessor.HttpContext?.Request.Cookies["AccessToken"];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Search - Modern Interface</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #088dcd;
            --primary-light: #e6f2fa;
            --secondary-color: #f8f9fa;
            --border-color: #e9ecef;
            --text-muted: #6c757d;
            --shadow: 0 2px 10px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
        }

        .top-banner {
            background: linear-gradient(135deg, var(--primary-color), #0066cc);
            color: white;
            padding: 80px 0;
            position: relative;
            overflow: hidden;
            margin-bottom: 30px;
        }

        .top-banner::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grain)"/></svg>');
        }

        a {
            text-decoration: none !important;
            color: inherit;
        }

            a:hover {
                text-decoration: none !important;
                color: inherit;
            }

        .search-header {
            background: white;
            padding: 30px 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 98;
            margin-bottom: 30px;
        }

        .search-form {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .search-input {
            flex: 1;
            position: relative;
        }

        .search-input input {
            border: 2px solid var(--border-color);
            border-radius: 25px;
            padding: 12px 20px 12px 45px;
            font-size: 16px;
            transition: var(--transition);
            height: 48px;
        }

        .search-input input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(8, 141, 205, 0.1);
        }

        .search-input i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }

        .sort-select {
            min-width: 200px;
        }

        .sort-select select {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            padding: 12px 15px;
            font-size: 14px;
            height: 48px;
            cursor: pointer;
        }

        .search-btn {
            background: var(--primary-color);
            border: none;
            border-radius: 25px;
            padding: 12px 25px;
            color: white;
            font-weight: 600;
            transition: var(--transition);
            height: 48px;
            display: flex;
            align-items: center;
        }

        .search-btn:hover {
            background: #0066cc;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .sidebar {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: var(--shadow);
            height: fit-content;
            position: sticky;
            top: 120px;
        }

        .filter-section {
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
            transition: var(--transition);
        }

        .filter-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .filter-title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            cursor: pointer;
            padding: 15px 0;
            transition: var(--transition);
            user-select: none;
        }

        .filter-title:hover {
            color: var(--primary-color);
        }

        .filter-title .filter-icon {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filter-title .toggle-icon {
            transition: var(--transition);
            font-size: 14px;
            color: var(--text-muted);
        }

        .filter-title.expanded .toggle-icon {
            transform: rotate(180deg);
        }

        .filter-content {
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            max-height: 0;
        }

        .filter-content.expanded {
            max-height: 500px;
            padding-bottom: 20px;
        }

        .filter-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding-top: 10px;
        }

        .filter-option {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 0;
            transition: var(--transition);
            border-radius: 6px;
            padding: 8px 10px;
        }

        .filter-option:hover {
            background-color: var(--primary-light);
        }

        .filter-option input[type="checkbox"],
        .filter-option input[type="radio"] {
            width: 18px;
            height: 18px;
            accent-color: var(--primary-color);
            cursor: pointer;
        }

        .filter-option label {
            flex: 1;
            cursor: pointer;
            color: #555;
            font-size: 14px;
            margin-bottom: 0;
            transition: var(--transition);
        }

        .filter-option:hover label {
            color: var(--primary-color);
        }

        .range-slider {
            margin: 15px 0;
        }

        .range-input {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: var(--border-color);
            outline: none;
            -webkit-appearance: none;
            transition: var(--transition);
        }

        .range-input:hover {
            background: #ddd;
        }

        .range-input::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            transition: var(--transition);
        }

        .range-input::-webkit-slider-thumb:hover {
            transform: scale(1.1);
        }

        .range-input::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        }

        .range-values {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 13px;
            color: var(--text-muted);
        }

        .course-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
        }

        .course-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
            height: 100%;
            display: flex;
            flex-direction: column;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
            border-color: rgba(8, 141, 205, 0.2);
        }

        .course-image {
            width: 100%;
            height: 180px;
            object-fit: cover;
            background: var(--secondary-color);
        }

        .course-content {
            padding: 20px;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .course-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
            line-height: 1.4;
            flex: 1;
        }

        .course-description {
            color: var(--text-muted);
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .course-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 13px;
            color: var(--text-muted);
        }

        .course-stats {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-top: auto;
        }

        .course-price {
            font-size: 20px;
            font-weight: 700;
            color: var(--primary-color);
            margin-left: auto;
        }

        .rating {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stars {
            color: #ffc107;
            font-size: 14px;
        }

        .filter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .clear-filters {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 13px;
            font-weight: 500;
            transition: var(--transition);
            padding: 5px 10px;
            border-radius: 4px;
        }

        .clear-filters:hover {
            text-decoration: underline;
            background-color: var(--primary-light);
        }

        .results-info {
            color: var(--text-muted);
            margin-bottom: 25px;
            font-size: 14px;
            padding: 10px 15px;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        .pagination-wrapper {
            display: flex;
            justify-content: center;
            margin-top: 40px;
        }

        .page-link {
            border-radius: 8px;
            margin: 0 2px;
            border: 1px solid var(--border-color);
            color: var(--primary-color);
            transition: var(--transition);
        }

        .page-link:hover, .page-item.active .page-link {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        /* Specific max-heights for different sections */
        .filter-content.category-content.expanded {
            max-height: 300px;
            overflow-y: auto;
        }

        /* Style scrollbar */
        .filter-content::-webkit-scrollbar {
            width: 6px;
        }

        .filter-content::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .filter-content::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 3px;
        }

        .filter-content::-webkit-scrollbar-thumb:hover {
            background: #aaa;
        }

        .filter-content.price-content.expanded {
            max-height: 150px;
        }

        .filter-content.rating-content.expanded {
            max-height: 150px;
        }

        .filter-content.language-content.expanded {
            max-height: 200px;
        }

        .filter-content.level-content.expanded {
            max-height: 180px;
        }

        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }

        .no-results i {
            font-size: 3rem;
            color: #ccc;
            margin-bottom: 20px;
        }

        .no-results h4 {
            color: var(--text-muted);
            margin-bottom: 10px;
        }

        media (max-width: 768px) {
            .search-form {
                flex-direction: column;
                gap: 10px;
            }
            
            .search-input, .sort-select {
                width: 100%;
            }
            
            .course-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="theme-layout">
    <!-- Top Banner -->
    <section class="top-banner">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <h1 class="display-4 fw-bold mb-3">Find Your Perfect Course</h1>
                    <p class="lead mb-4" style="color: white;">Browse our extensive collection of courses taught by industry experts</p>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="#" class="text-white-50">Home</a></li>
                            <li class="breadcrumb-item active text-white" aria-current="page">Courses</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>

    <!-- Search Header -->
    <section class="search-header">
        <div class="container">
            <div class="search-form">
                <div class="search-input">
                    <i class="bi bi-search"></i>
                    <input type="text" class="form-control" placeholder="Search for courses..." id="searchInput" value="@title">
                </div>
                <div class="sort-select">
                    <select class="form-select" id="sortSelect">
                        <option value="">Sort by</option>
                        <option value="asc_name">Name A-Z</option>
                        <option value="desc_name">Name Z-A</option>
                        <option value="desc_date">Newest First</option>
                        <option value="asc_date">Oldest First</option>
                        <option value="asc_price">Price Low to High</option>
                        <option value="desc_price">Price High to Low</option>
                        <option value="desc_rating">Highest Rated</option>
                    </select>
                </div>
                <button class="btn search-btn" onclick="searchCourses()">
                    <i class="bi bi-search me-2"></i>Search
                </button>
            </div>
        </div>
    </section>

    <!-- Main Content -->
    <section class="py-4">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar Filters -->
                <div class="col-lg-3 col-md-4 mb-4">
                    <div class="sidebar">
                        <div class="filter-header">
                            <h5 class="mb-0 fw-bold">Filters</h5>
                            <a href="/Mentor/MentorPage" class="clear-filters" onclick="clearAllFilters(); return false;">Clear All</a>
                        </div>

                        <!-- Category Filter -->
                        <div class="filter-section">
                            <div class="filter-title" onclick="toggleFilter('category')">
                                <div class="filter-icon">
                                    <i class="bi bi-grid-3x3-gap"></i>
                                    <span>Category</span>
                                </div>
                                <i class="bi bi-chevron-down toggle-icon"></i>
                            </div>
                            <div class="filter-content category-content" id="categoryFilter">
                                <div class="filter-options" id="categoryFilters">
                                    <div class="filter-option">
                                        <input type="radio" id="cat_all" name="category" value=""
                                        @(string.IsNullOrEmpty(Request.Query["categoryId"]) ? "checked" : "")>
                                        <label for="cat_all">All Categories</label>
                                    </div>
                                    @foreach (var category in Model.Categories?.Items ?? new List<Dtos.Category.CategoryDto>())
                                    {
                                        <div class="filter-option">
                                            <input type="radio" id="cat_@category.CategoryId" name="category" value="@category.CategoryId"
                                            @(Request.Query["categoryId"].ToString() == category.CategoryId.ToString() ? "checked" : "")>
                                            <label for="cat_@category.CategoryId">@category.Title</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Price Range -->
                        <div class="filter-section">
                            <div class="filter-title" onclick="toggleFilter('price')">
                                <div class="filter-icon">
                                    <i class="bi bi-currency-dollar"></i>
                                    <span>Price Range</span>
                                </div>
                                <i class="bi bi-chevron-down toggle-icon"></i>
                            </div>
                            <div class="filter-content price-content" id="priceFilter">
                                <div class="range-slider">
                                    <input type="range" class="range-input" id="minPrice" min="0" max="500"
                                           value="@(Request.Query["minCost"].FirstOrDefault() ?? "0")" oninput="updatePriceRange()">
                                    <input type="range" class="range-input" id="maxPrice" min="0" max="500"
                                           value="@(Request.Query["maxCost"].FirstOrDefault() ?? "500")" oninput="updatePriceRange()">
                                    <div class="range-values">
                                        <span>$<span id="minPriceValue">@(Request.Query["minCost"].FirstOrDefault() ?? "0")</span></span>
                                        <span>$<span id="maxPriceValue">@(Request.Query["maxCost"].FirstOrDefault() ?? "500")</span></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Rating Filter -->
                        <div class="filter-section">
                            <div class="filter-title" onclick="toggleFilter('rating')">
                                <div class="filter-icon">
                                    <i class="bi bi-star"></i>
                                    <span>Rating</span>
                                </div>
                                <i class="bi bi-chevron-down toggle-icon"></i>
                            </div>
                            <div class="filter-content rating-content" id="ratingFilter">
                                <div class="range-slider">
                                    <input type="range" class="range-input" id="minRating" min="0" max="5" step="0.1"
                                           value="@(Request.Query["minRate"].FirstOrDefault() ?? "0")" oninput="updateRatingRange()">
                                    <input type="range" class="range-input" id="maxRating" min="0" max="5" step="0.1"
                                           value="@(Request.Query["maxRate"].FirstOrDefault() ?? "5")" oninput="updateRatingRange()">
                                    <div class="range-values">
                                        <span><span id="minRatingValue">@(Request.Query["minRate"].FirstOrDefault() ?? "0")</span>★</span>
                                        <span><span id="maxRatingValue">@(Request.Query["maxRate"].FirstOrDefault() ?? "5")</span>★</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Language Filter -->
                        <div class="filter-section">
                            <div class="filter-title" onclick="toggleFilter('language')">
                                <div class="filter-icon">
                                    <i class="bi bi-translate"></i>
                                    <span>Language</span>
                                </div>
                                <i class="bi bi-chevron-down toggle-icon"></i>
                            </div>
                            <div class="filter-content language-content" id="languageFilter">
                                <div class="filter-options" id="languageFilters">
                                    <div class="filter-option">
                                        <input type="radio" id="lang_all" name="language" value=""
                                        @(string.IsNullOrEmpty(Request.Query["language"]) ? "checked" : "")>
                                        <label for="lang_all">All Languages</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="lang_en" name="language" value="English"
                                        @(Request.Query["language"] == "English" ? "checked" : "")>
                                        <label for="lang_en">English</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="lang_es" name="language" value="Spanish"
                                        @(Request.Query["language"] == "Spanish" ? "checked" : "")>
                                        <label for="lang_es">Spanish</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="lang_fr" name="language" value="French"
                                        @(Request.Query["language"] == "French" ? "checked" : "")>
                                        <label for="lang_fr">French</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="lang_de" name="language" value="German"
                                        @(Request.Query["language"] == "German" ? "checked" : "")>
                                        <label for="lang_de">German</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="lang_vi" name="language" value="Vietnamese"
                                        @(Request.Query["language"] == "Vietnamese" ? "checked" : "")>
                                        <label for="lang_vi">Vietnamese</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Level Filter -->
                        <div class="filter-section">
                            <div class="filter-title" onclick="toggleFilter('level')">
                                <div class="filter-icon">
                                    <i class="bi bi-graph-up"></i>
                                    <span>Difficulty Level</span>
                                </div>
                                <i class="bi bi-chevron-down toggle-icon"></i>
                            </div>
                            <div class="filter-content level-content" id="levelFilter">
                                <div class="filter-options">
                                    <div class="filter-option">
                                        <input type="radio" id="level_all" name="level" value=""
                                        @(string.IsNullOrEmpty(Request.Query["level"]) ? "checked" : "")>
                                        <label for="level_all">All Levels</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="beginner" name="level" value="Beginner"
                                        @(Request.Query["level"] == "Beginner" ? "checked" : "")>
                                        <label for="beginner">Beginner</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="intermediate" name="level" value="Intermediate"
                                        @(Request.Query["level"] == "Intermediate" ? "checked" : "")>
                                        <label for="intermediate">Intermediate</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="radio" id="advanced" name="level" value="Advanced"
                                        @(Request.Query["level"] == "Advanced" ? "checked" : "")>
                                        <label for="advanced">Advanced</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Course Results -->
                <div class="col-lg-9 col-md-8">
                    <div class="results-info">
                        <strong id="resultsCount">@(Model.Courses?.TotalCount ?? 0)</strong> courses found
                    </div>

                    <div class="course-grid" id="courseGrid">
                        @if (Model.Courses?.Items != null && Model.Courses.Items.Any())
                        {
                            @foreach (var course in Model.Courses.Items)
                            {
                                <a href="/Mentor/MentorPage/CourseDetail?courseId=@course.CourseId" class="course-card">
                                    @if (!string.IsNullOrEmpty(course.CoursesImage))
                                    {
                                        <img src="@course.CoursesImage" alt="@course.CourseName" class="course-image">
                                    }
                                    else
                                    {
                                        <div class="course-image" style="background: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                            <i class="bi bi-book" style="font-size: 3rem; color: #ccc;"></i>
                                        </div>
                                    }
                                    <div class="course-content">
                                        <h3 class="course-title">@course.CourseName</h3>
                                        <p class="course-description">@(course.CourseContent?.Length > 100 ? course.CourseContent.Substring(0, 100) + "..." : course.CourseContent)</p>
                                        <div class="course-meta">
                                            <span>by @course.Mentor?.FirstName @course.Mentor?.LastName</span>
                                            @if (course.CourseLength.HasValue)
                                            {
                                                <span>@course.CourseLength.Value hours</span>
                                            }
                                        </div>
                                        <div class="course-stats">
                                            @if (course.AverageRating.HasValue)
                                            {
                                                <div class="rating">
                                                    @{
                                                        var fullStars = (int)Math.Floor(course.AverageRating.Value);
                                                        var hasHalfStar = course.AverageRating;
                                                        var emptyStars = 5 - fullStars - hasHalfStar;
                                                    }
                                                    <span class="stars">
                                                        @for (int i = 0; i < fullStars; i++)
                                                        {
                                                            <i class="bi bi-star-fill"></i>
                                                        }
                                                        @for (int i = 0; i < emptyStars; i++)
                                                        {
                                                            <i class="bi bi-star"></i>
                                                        }
                                                    </span>
                                                    <span>@course.AverageRating.Value.ToString("0.0")</span>
                                                </div>
                                            }
                                            @if (course.StudentCount.HasValue)
                                            {
                                                <span>@course.StudentCount.Value students</span>
                                            }
                                            <div class="course-price">$@course.Cost.ToString("0.##")</div>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <div class="no-results">
                                <i class="bi bi-search"></i>
                                <h4>No courses found</h4>
                                <p>Try adjusting your search or filter criteria</p>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (Model.Courses?.TotalPages > 1)
                    {
                        <div class="pagination-wrapper">
                            <nav aria-label="Course pagination">
                                <ul class="pagination">
                                    <li class="page-item @(Model.Courses.CurrentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage - 1)" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                    @for (int i = 1; i <= Model.Courses.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == Model.Courses.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="?currentPage=@i">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(Model.Courses.CurrentPage == Model.Courses.TotalPages ? "disabled" : "")">
                                        <a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage + 1)" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        </div> 
    </section>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Toggle filter section
        function toggleFilter(filterType) {
            const titleElement = document.querySelector(`#${filterType}Filter`).previousElementSibling;
            const contentElement = document.getElementById(`${filterType}Filter`);
            const toggleIcon = titleElement.querySelector('.toggle-icon');
            
            // Toggle classes
            titleElement.classList.toggle('expanded');
            contentElement.classList.toggle('expanded');
        }

        // Initialize - expand Category filter by default
        document.addEventListener('DOMContentLoaded', function() {
            toggleFilter('category');
        });

        // Update price range display
        function updatePriceRange() {
            const minPrice = document.getElementById('minPrice').value;
            const maxPrice = document.getElementById('maxPrice').value;
            document.getElementById('minPriceValue').textContent = minPrice;
            document.getElementById('maxPriceValue').textContent = maxPrice;
        }

        // Update rating range display
        function updateRatingRange() {
            const minRating = document.getElementById('minRating').value;
            const maxRating = document.getElementById('maxRating').value;
            document.getElementById('minRatingValue').textContent = parseFloat(minRating).toFixed(1);
            document.getElementById('maxRatingValue').textContent = parseFloat(maxRating).toFixed(1);
        }

        // Get selected categories
        function getSelectedCategory() {
            return document.querySelector('input[name="category"]:checked')?.value || '';
        }

        // Get selected languages
        function getSelectedLanguage() {
            return document.querySelector('input[name="language"]:checked')?.value || '';
        }

        // Get selected level
        function getSelectedLevel() {
            return document.querySelector('input[name="level"]:checked')?.value || '';
        }

        // Get sort option
        function getSortOption() {
            return document.getElementById('sortSelect').value;
        }

        // Build query string from filters
        function buildQueryString() {
            const params = new URLSearchParams();

            // Search term
            const searchTerm = document.getElementById('searchInput').value;
            if (searchTerm) params.set('title', searchTerm);

            // Category
            const category = getSelectedCategory();
            if (category) params.set('categoryId', category);

            // Language
            const language = getSelectedLanguage();
            if (language) params.set('language', language);

            // Level
            const level = getSelectedLevel();
            if (level) params.set('level', level);

            // Price range
            const minPrice = document.getElementById('minPrice').value;
            const maxPrice = document.getElementById('maxPrice').value;
            if (minPrice != 0) params.set('minCost', minPrice);
            if (maxPrice != 500) params.set('maxCost', maxPrice);

            // Rating range
            const minRating = document.getElementById('minRating').value;
            const maxRating = document.getElementById('maxRating').value;
            if (minRating != 0) params.set('minRate', minRating);
            if (maxRating != 5) params.set('maxRate', maxRating);

            // Sort option
            const sortOption = getSortOption();
            if (sortOption) params.set('sortOption', sortOption);

            return params.toString();
        }

        // Search function
        function searchCourses() {
            const queryString = buildQueryString();
            window.location.href = '?' + queryString;
        }

        // Clear all filters
        function clearAllFilters() {
            // Clear radio buttons
            document.getElementById('cat_all').checked = true;
            document.getElementById('lang_all').checked = true;
            document.getElementById('level_all').checked = true;

            // Reset ranges
            document.getElementById('minPrice').value = 0;
            document.getElementById('maxPrice').value = 500;
            document.getElementById('minRating').value = 0;
            document.getElementById('maxRating').value = 5;

            // Reset search and sort
            document.getElementById('searchInput').value = '';
            document.getElementById('sortSelect').value = '';

            // Update displays
            updatePriceRange();
            updateRatingRange();

            // Close all filters
            document.querySelectorAll('.filter-content').forEach(content => {
                content.classList.remove('expanded');
            });
            document.querySelectorAll('.filter-title').forEach(title => {
                title.classList.remove('expanded');
            });

            // Reopen category filter
            toggleFilter('category');

            // Perform search immediately after clearing
            searchCourses();
        }

        // Initialize range displays
        updatePriceRange();
        updateRatingRange();

        // Set initial sort option from query string
        const urlParams = new URLSearchParams(window.location.search);
        const sortOption = urlParams.get('sortOption');
        if (sortOption) {
            document.getElementById('sortSelect').value = sortOption;
        }

        // Enter key search
        document.getElementById('searchInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchCourses();
            }
        });

        // Initialize filter states based on current URL
        document.addEventListener('DOMContentLoaded', function () {
            // Close all filters first
            document.querySelectorAll('.filter-content').forEach(content => {
                content.classList.remove('expanded');
            });
            document.querySelectorAll('.filter-title').forEach(title => {
                title.classList.remove('expanded');
            });

            // Open filters that have active selections
            const currentFilters = ['categoryId', 'language', 'level', 'minCost', 'maxCost', 'minRate', 'maxRate'];
            let hasActiveFilter = false;

            currentFilters.forEach(filter => {
                if (urlParams.has(filter)) {
                    let filterElement;
                    
                    // Map URL parameters to filter sections
                    if (filter === 'categoryId') {
                        filterElement = document.getElementById('categoryFilter');
                    } else if (filter === 'language') {
                        filterElement = document.getElementById('languageFilter');
                    } else if (filter === 'level') {
                        filterElement = document.getElementById('levelFilter');
                    } else if (filter === 'minCost' || filter === 'maxCost') {
                        filterElement = document.getElementById('priceFilter');
                    } else if (filter === 'minRate' || filter === 'maxRate') {
                        filterElement = document.getElementById('ratingFilter');
                    }

                    if (filterElement) {
                        filterElement.classList.add('expanded');
                        filterElement.previousElementSibling.classList.add('expanded');
                        hasActiveFilter = true;
                    }
                }
            });

            // If no filters are active, open category filter by default
            if (!hasActiveFilter) {
                toggleFilter('category');
            }
        });

        // Prevent radio buttons from toggling the filter section
        document.querySelectorAll('.filter-option input[type="radio"]').forEach(radio => {
            radio.addEventListener('click', function(e) {
                e.stopPropagation();
            });
        });
    </script>
</body>
</html>