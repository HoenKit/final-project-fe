@page
@model final_project_fe.Pages.UserProfileModel
@{
	ViewData["Title"] = "Phronesis - User Profile";
}
@{
	var token = HttpContext.Request.Cookies["AccessToken"];
	// var isMentor = false;

	// if (!string.IsNullOrEmpty(token))
	// {
	// 	var jwt = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler().ReadJwtToken(token);
	// 	isMentor = jwt.Claims.Any(c =>
	// 		(c.Type == System.Security.Claims.ClaimTypes.Role || c.Type == "role") &&
	// 		c.Value == "Mentor");
	// }
}
<div class="theme-layout">
	<!-- Profile Header -->
	<div class="profile-header">
		<div class="d-flex justify-content-between align-items-start">
			<div class="avatar-header">
				<div class="profile-content">
					<div class="profile-avatar-card position-relative">
						@if (Model.Profile?.UserMetaData != null)
						{
							<div class="avatar-container position-relative">
								<img src="@(string.IsNullOrEmpty(Model.Profile.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : Model.Profile.UserMetaData?.Avatar)"
									 alt="Avatar" class="profile-avatar rounded-circle shadow" width="120" height="120" />
								@if (Model.IsOwnUser)
								{
									<button type="button" class="btn btn-primary btn-sm edit-avatar-btn"
											data-bs-toggle="modal" data-bs-target="#avatarModal">
										<i class="fa fa-camera"></i>
									</button>
								}
							</div>

							<h4 class="profile-name mt-4">
								@($"{Model.Profile.UserMetaData?.FirstName} {Model.Profile.UserMetaData?.LastName}")
							</h4>
						}
					</div>
					<div class="modal fade" id="avatarModal" tabindex="-1" aria-labelledby="avatarModalLabel" aria-hidden="true">
						<div class="modal-dialog modal-dialog-centered">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title" id="avatarModalLabel">
										<i class="fa fa-user-circle me-2"></i>Update Avatars
									</h5>
									<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
								</div>

								<form method="post" enctype="multipart/form-data" asp-page-handler="UpdateAvatar" id="avatarForm">
									<div class="modal-body">
										<!-- Current Avatar Preview -->
										<div class="text-center mb-4">
											<div class="current-avatar-preview">
												<img src="@(string.IsNullOrEmpty(Model.Profile.UserMetaData?.Avatar) ? "images/resources/friend-avatar9.jpg" : Model.Profile.UserMetaData?.Avatar)"
													 alt="Current Avatar" class="rounded-circle shadow" style="width: 80px; height: 75px;" id="currentAvatar" />
												<p class="text-muted mt-2">Current avatar</p>
											</div>
										</div>

										<!-- File Upload -->
										<div class="mb-3">
											<label for="avatarFileInput" class="form-label">Select new photo:</label>
											<input type="file" class="form-control" id="avatarFileInput"
												   asp-for="Avatar" accept="image/*" required />
											<div class="form-text">
												<i class="fa fa-info-circle"></i>
												Accept: JPG, JPEG, PNG, GIF. Max 5MB.
											</div>
										</div>

										<!-- New Avatar Preview -->
										<div class="text-center" id="newAvatarPreview" style="display: none;">
											<div class="new-avatar-preview">
												<img src="" alt="New Avatar" class="rounded-circle shadow"
													 style="width: 80px; height: 75px;"id="newAvatar" />
												<p class="text-muted mt-2">New photo</p>
											</div>
										</div>

										<!-- Error/Success Messages -->
										@if (TempData["ErrorMessage"] != null)
										{
											<div class="alert alert-danger alert-dismissible fade show" role="alert">
												<i class="fa fa-exclamation-triangle"></i>
												@TempData["ErrorMessage"]
												<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
											</div>
										}

										@if (TempData["SuccessMessage"] != null)
										{
											<div class="alert alert-success alert-dismissible fade show" role="alert">
												<i class="fa fa-check-circle"></i>
												@TempData["SuccessMessage"]
												<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
											</div>
										}
									</div>

									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
											<i class="fa fa-times"></i> Cancel
										</button>
										<button type="submit" class="btn btn-primary" id="updateAvatarBtn">
											<i class="fa fa-upload"></i> Update Avatars
										</button>
									</div>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
			@if (Model.IsOwnUser)
			{
				<div class="d-flex" style="width: 44%; margin-right: -3%;">
					<!-- Points Card -->
					<div class="col-5">
						<div class="card subscription-card bg-white text-dark shadow-sm h-100 mb-3">
							<div style="color: #000;" class="card-body d-flex flex-column justify-content-between">
								<div class="d-flex justify-content-between align-items-start">
									<div>
										<small>Your Points</small>
										<h3 class="mt-1">@(Model.Profile?.Point?.ToString("N0") ?? "0")</h3>
									</div>
									<i style="font-size:150%" class="bi bi-p-circle"></i>
								</div>
								<a class="btn btn-outline-dark btn-sm rounded-pill mt-3 w-fit" asp-area="" asp-page="/PointTransaction">
									Buy Points
								</a>
							</div>
						</div>
					</div>
					<!-- MemberShip Card -->
					<div class="col-6">
						@if (Model.Profile.IsPremium)
						{
							<div class="card upgrade-card text-white text-decoration-none shadow-sm h-100">
								<div style="color:#ffff" class="card-body d-flex flex-column justify-content-center align-items-center">
									<div>
										<small>MemberShip</small>
									</div>
									<i style="color:#ffff" class="bi bi-gem fs-2"></i>
									<a href="#" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
										Premium Member
									</a>
								</div>
							</div>
						}
						else
						{
							<div class="card subscription-card bg-dark text-white shadow-sm h-100 mb-3">
								<div style="color: #ffff;" class="card-body d-flex flex-column justify-content-between">
									<div class="d-flex justify-content-between align-items-start">
										<div>
											<small>MemberShip</small>
											<h3 class="mt-1">Free Member</h3>
										</div>
										<i class="bi bi-person-badge-fill fs-3"></i>
									</div>
									<a href="/UpdatePremium" class="btn btn-outline-light btn-sm rounded-pill mt-3 w-fit">
										Upgrade to Premium
									</a>
								</div>
							</div>
						}
					</div>
			</div>
			}
		</div>
	</div>

	<!-- Main Content with Sidebar -->
	<div class="gap gray-bg">
		<div class="container-fluid">
			<div class="row">
				<div class="col-lg-12">
					<div class="row" id="page-contents">
						<!-- Sidebar -->
						<div class="col-lg-3">
							<aside class="sidebar">
									<div class="widget">
										<h4 class="widget-title">Shortcuts</h4>
										<ul class="naves">
											<li>
												<i class="ti-clipboard"></i>
												<a asp-page="/Index" title="">News feed</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-mortarboard"></i>
												<a asp-page="/Mentor/MentorPage/Index" title="">Courses</a>
											</li>
											@if (Model.IsOwnUser)
											{
												<li style="display:flex">
													<i class="bi bi-person"></i>
													<a class="active" asp-page="/UserPage" title="" data-ripple="">My Page</a>
												</li>
											}
											else
											{
												<li style="display:flex">
													<i class="bi bi-person"></i>
													<a class="active" asp-page="/UserPage" asp-route-userId="@Request.Query["userId"]" data-tab="Page">@Model.Profile?.UserMetaData?.FirstName Page</a>
												</li>
											}
											@* <li style="display:flex">
											<i class="bi bi-info-circle"></i>
											<a class="active" asp-page="/UserProfile" data-tab="about">About me</a>
											</li> *@
										@if (Model.IsOwnUser)
										{
											<li style="display:flex">
												<i class="bi bi-bag"></i>
												<a asp-area="" asp-page="/PurchaseHistory">Purchase History</a>
											</li>
											<li style="display:flex">
												<i class="bi bi-wallet2"></i>
												<a asp-area="" asp-page="/TransactionHistory">Transaction History</a>
											</li>
										}
										</ul>
									</div><!-- Shortcuts -->
								<div class="widget">
									<div class="advertisment-box">
										<figure>
											<a href="#" title="Advertisment"><img src="https://travarsa.com/wp-content/uploads/2023/04/Soft-Skills-Training-and-Certification%E2%80%8B.jpg" alt=""></a>
										</figure>
									</div>
								</div><!-- recent activites -->
							</aside>
						</div><!-- sidebar -->

						<!-- Main Content -->
						<div class="col-lg-9">
							<!-- About Me Tab Content -->
							@if (!ViewData.ModelState.IsValid)
							{
								foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
								{
									<div class="alert alert-danger">@error.ErrorMessage</div>
								}
							}
							else if (Model.Profile != null && !string.IsNullOrEmpty(Model.Profile.Email))
							{
								var user = Model.Profile;

								<div class="container">
									<div class="profile-details-section">
										<div class="container">
											<h2 class="section-title d-flex justify-content-between align-items-center">
												About me
												@if (Model.IsOwnUser)
												{
													<i class="bi bi-pencil-square edit-icon" data-bs-toggle="modal" data-bs-target="#editProfileModal" title="Edit Profile"></i>
												}
											</h2>
											<div class="profile-details-grid">
												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-person-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">First Name</div>
														<div class="profile-detail-value">@user.UserMetaData.FirstName</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-person-vcard-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Last Name</div>
														<div class="profile-detail-value">@user.UserMetaData.LastName</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-envelope-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Email</div>
														<div class="profile-detail-value">@user.Email</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-telephone-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Phone Number</div>
														<div class="profile-detail-value">@user.Phone</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-gender-ambiguous"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Gender</div>
														<div class="profile-detail-value">@user.UserMetaData.Gender</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-cake2-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Birthday</div>
														<div class="profile-detail-value">@user.UserMetaData.Birthday?.ToString("MMMM dd, yyyy")</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-geo-alt-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Address</div>
														<div class="profile-detail-value">@user.UserMetaData.Address</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-flag-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Nationality</div>
														<div class="profile-detail-value">@user.UserMetaData.Nationality</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-heart-fill"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Favourite Subject</div>
														<div class="profile-detail-value">@user.UserMetaData.FavouriteSubject</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-graph-up"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Level</div>
														<div class="profile-detail-value">@user.UserMetaData.Level</div>
													</div>
												</div>

												<div class="profile-detail-item">
													<div class="profile-detail-icon">
														<i class="bi bi-bullseye"></i>
													</div>
													<div class="profile-detail-content">
														<div class="profile-detail-label">Goals</div>
														<div class="profile-detail-value">@user.UserMetaData.Goals</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>

								<!-- Edit Profile Modal -->
								<div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
									<div class="modal-dialog modal-lg">
										<div class="modal-content">
											<form method="post">
												<div class="modal-header">
													<h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
													<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
												</div>
												<div class="modal-body row g-3">
													<div class="col-md-6" style="margin-top: 11%;">
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.FirstName" class="form-label">First Name</label>
															<input asp-for="Profile.UserMetaData.FirstName" class="form-control" />
														</div>
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.LastName" class="form-label">Last Name</label>
															<input asp-for="Profile.UserMetaData.LastName" class="form-control" />
														</div>
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.Gender" class="form-label">Gender</label>
															<select asp-for="Profile.UserMetaData.Gender" class="form-select">
																<option value="">Male</option>
																<option>Female</option>
															</select>
														</div> 
													</div>
													<div class="col-md-6">
														<div class="text-muted small mb-3">
															@if (Model.Profile.IsPremium)
															{
																<div class="form-text">
																	<i class="fa fa-info-circle me-1"></i>
																	Please fill out the following <a href="/RecommendQuestion" class="text-primary fw-bold text-decoration-none" style="transition: all 0.3s ease;" onmouseover="this.style.color='#0056b3'; this.style.textDecoration='underline';" onmouseout="this.style.color='#0d6efd'; this.style.textDecoration='none';">Survey</a> to add this information.
																</div>
															}
															else
															{
																<div class="form-text">
																	<i class="fa fa-info-circle me-1"></i>
																	Please upgrade as a <a href="#" class="text-primary fw-bold text-decoration-none" style="transition: all 0.3s ease;" onmouseover="this.style.color='#0056b3'; this.style.textDecoration='underline';" onmouseout="this.style.color='#0d6efd'; this.style.textDecoration='none';">Premium</a> to be able to update this information.
																</div>
															}
														</div>
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.FavouriteSubject" class="form-label">Favourite Subject</label>
															<input asp-for="Profile.UserMetaData.FavouriteSubject" class="form-control" readonly />
														</div>
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.Level" class="form-label">Level</label>
															<input asp-for="Profile.UserMetaData.Level" class="form-control" readonly />
														</div>
														<div class="mb-3">
															<label asp-for="Profile.UserMetaData.Goals" class="form-label">Goals</label>
															<input asp-for="Profile.UserMetaData.Goals" class="form-control" readonly />
														</div>
													</div>
													<div class="col-md-12">
														<label asp-for="Profile.UserMetaData.Address" class="form-label">Address</label>
														<input asp-for="Profile.UserMetaData.Address" class="form-control" />
													</div>
													<div class="col-md-6">
														<label asp-for="Profile.Email" class="form-label">Email</label>
														<input asp-for="Profile.Email" class="form-control" readonly />
													</div>													
													<div class="col-md-6">
														<label asp-for="Profile.UserMetaData.Nationality" class="form-label">Nationality</label>
														<input asp-for="Profile.UserMetaData.Nationality" class="form-control" />
													</div>
													<div class="col-md-6">
														<label asp-for="Profile.Phone" class="form-label">Phone Number</label>
														<input asp-for="Profile.Phone" class="form-control"
															   type="tel"
															   pattern="^\+?\d{10,15}$"
															   title="Enter a valid phone number (10-15 digits)"
															   required />
														<span asp-validation-for="Profile.Phone" class="text-danger"></span>
													</div>

													<div class="col-md-6">
														<label asp-for="Profile.UserMetaData.Birthday" class="form-label">Birthday</label>
														<input asp-for="Profile.UserMetaData.Birthday" class="form-control" type="date"
															   min="1900-01-01"
															   max="@DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd")"
															   required />
														<span asp-validation-for="Profile.UserMetaData.Birthday" class="text-danger"></span>
													</div>
													
												</div>
												<div class="modal-footer">
													<button type="submit" class="btn btn-primary">Save changes</button>
												</div>
											</form>
										</div>
									</div>
								</div>
							}
							else
							{
								<div class="alert alert-info">
									There is no user information to display.
								</div>
							}


							<!-- Certificates Section -->
							<div class="container">
								<div class="certificates-section">
									<div class="container">
										<h2 class="section-title">My Certificates</h2>

										<!-- Upload button (mentor only) -->
										@if (Model.IsOwnUser)
										{
											<div class="text-end mb-3">
												<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#uploadCertificateModal">
													Upload Certificate
												</button>
											</div>
										}

										<div class="certificates-content-wrapper">
											<div class="certificates-content">
												<div class="certificates-grid">

													<!-- Certificates hoàn thành -->
													@if (Model.Certificates != null && Model.Certificates.Any())
													{
														@foreach (var cert in Model.Certificates)
														{
															<div class="certificate-card">
																<div class="certificate-icon"><i class="bi bi-award"></i></div>
																<div class="certificate-content">
																	<h3 class="certificate-title">@cert.CourseName</h3>
																	<p class="certificate-issuer">Mentor: @cert.MentorName</p>
																	<p class="certificate-date">Completed: @cert.CompletedAt.ToString("MMMM yyyy")</p>
																	<div class="certificate-badge"><span class="badge-text">@cert.Level</span></div>
																	<div>
																		<a asp-page="/GenerateCertificate"
																		   asp-route-courseId="@cert.CourseId"
																		   asp-route-userId="@cert.UserId"
																		   target="_blank"
																		   class="btn btn-sm btn-outline-primary mt-2">
																			View Certificate
																		</a>
																	</div>
																</div>
															</div>
														}
													}

													<!-- Certificates tự upload (mentor) -->
													@if (Model.MentorCertificates != null && Model.MentorCertificates.Any())
													{
														@foreach (var mCert in Model.MentorCertificates)
														{
															<div class="certificate-card mentor-upload">
																<div class="certificate-icon"><i class="bi bi-file-earmark-pdf-fill"></i></div>
																<div class="certificate-content">
																	<h3 class="certificate-title">@mCert.CertificateName</h3>
																	<div class="mt-2">
																		<a href="@mCert.FileUrl" target="_blank" class="btn btn-sm btn-outline-success">
																			View PDF
																		</a>

																		@if (Model.IsOwnUser)
																		{
																			<form method="post" asp-page-handler="DeleteCertificate" class="d-inline">
																				<input type="hidden" name="certificateId" value="@mCert.MentorCertificateId" />
																				<button type="submit" class="btn btn-sm btn-outline-danger ms-2">
																					Delete
																				</button>
																			</form>
																		}
																	</div>
																</div>
															</div>
														}
													}

													<!-- No certificates -->
													@if ((Model.Certificates == null || !Model.Certificates.Any()) && (Model.MentorCertificates == null || !Model.MentorCertificates.Any()))
													{
														<p>No certificates found.</p>
													}
												</div>
											</div>
										</div>

										<!-- Certificates Summary -->
										<div class="certificates-summary-card mt-4">
											<div class="summary-icon"><i class="bi bi-bar-chart-line-fill"></i></div>
											<div class="summary-content">
												<h3 class="summary-title">Certifications Summary</h3>
												<div class="summary-stats">
													<div class="stat-item">
														<span class="stat-number">
															@( (Model.Certificates?.Count ?? 0) + (Model.MentorCertificates?.Count ?? 0) )
														</span>
														<span class="stat-label">Total Certificates</span>
													</div>
													<div class="stat-item">
														<span class="stat-number">
															@(Model.Certificates?.OrderByDescending(c => c.Level).FirstOrDefault()?.Level
																														?? Model.MentorCertificates?.FirstOrDefault()?.CertificateName
																														?? "N/A")
														</span>
														<span class="stat-label">Highest Level / Latest Uploaded</span>
													</div>
													<div class="stat-item">
														<span class="stat-number">
															@(Model.Certificates?.Any() == true ? Model.Certificates.Max(c => c.CompletedAt).Year : 0)
														</span>
														<span class="stat-label">Latest Update</span>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>

							<!-- Modal Upload Mentor Certificate -->
							@if (Model.IsOwnUser)
							{
								<div class="modal fade" id="uploadCertificateModal" tabindex="-1" aria-labelledby="uploadCertificateModalLabel" aria-hidden="true">
									<div class="modal-dialog">
										<div class="modal-content">
											<div class="modal-header">
												<h5 class="modal-title" id="uploadCertificateModalLabel">Upload New Certificate</h5>
												<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
											</div>
											<form method="post" enctype="multipart/form-data" asp-page-handler="UploadMentorCertificate">
												<div class="modal-body">
													<div class="mb-3">
														<label class="form-label">Certificate Name</label>
														<input type="text" class="form-control" asp-for="MentorCertificateName" required />
													</div>
													<div class="mb-3">
														<label class="form-label">Select PDF File</label>
														<input type="file" class="form-control" asp-for="MentorCertificateFile" accept=".pdf" required />
													</div>
												</div>
												<div class="modal-footer">
													<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
													<button type="submit" class="btn btn-primary">Upload PDF</button>
												</div>
											</form>
										</div>
									</div>
								</div>
							}


							<!-- Courses Section -->
							@if (Model.CurrentMentor != null && Model.Courses != null)
							{
								<div class="courses-section">
									<div class="container">
										<h2 class="section-title">My courses (@Model.Courses.TotalCount)</h2>

										@if (Model.Courses.Items != null && Model.Courses.Items.Any())
										{
											<div class="courses-grid">
												@foreach (var course in Model.Courses.Items)
												{
													<div class="course-card" data-course-id="@course.CourseId">
														<div style="position: relative;">
															<img src="@(!string.IsNullOrEmpty(course.CoursesImage) ? course.CoursesImage : "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&h=250&fit=crop")"
																 alt="@course.CourseName" class="course-image" loading="lazy">

															@if (course.AverageRating >= 4.5m)
															{
																<div class="bestseller-badge">Bestseller</div>
															}

															@* @if (!string.IsNullOrEmpty(course.Status))
															{
																<div class="status-badge status-@course.Status.ToLower().Replace(" ", "-")">
																	@course.Status
																</div>
															} *@
														</div>

														<div class="course-content">
															<h3 class="course-title" title="@course.CourseName">@course.CourseName</h3>

															<p class="course-description" title="@course.CourseContent">
																@if (!string.IsNullOrEmpty(course.CourseContent))
																{
																	@(course.CourseContent.Length > 120 ? course.CourseContent.Substring(0, 120) + "..." : course.CourseContent)
																}
																else
																{
																	<text>No description available</text>
																}
															</p>

															<div class="course-info">
																@if (!string.IsNullOrEmpty(course.Language))
																{
																	<span class="course-language">
																		<i class="bi bi-translate"></i> @course.Language
																	</span>
																}

																@if (!string.IsNullOrEmpty(course.Level))
																{
																	<span class="course-level level-@course.Level.ToLower()">
																		<i class="bi bi-bar-chart"></i> @course.Level
																	</span>
																}

																@if (course.CourseLength.HasValue)
																{
																	<span class="course-duration">
																		<i class="bi bi-clock"></i> @course.CourseLength.Value.ToString("F1")h
																	</span>
																}

																@if (course.StudentCount.HasValue && course.StudentCount > 0)
																{
																	<span class="student-count">
																		<i class="bi bi-people"></i> @course.StudentCount students
																	</span>
																}
															</div>

															<div class="course-meta">
																<div class="rating">
																	@if (course.AverageRating.HasValue && course.AverageRating > 0)
																	{
																		<div class="stars">
																			@for (int i = 1; i <= 5; i++)
																			{
																				if (i <= Math.Floor(course.AverageRating.Value))
																				{
																					<i class="bi bi-star-fill"></i>
																				}
																				else if (i <= course.AverageRating.Value)
																				{
																					<i class="bi bi-star-half"></i>
																				}
																				else
																				{
																					<i class="bi bi-star"></i>
																				}
																			}
																		</div>
																		<span class="rating-value">@course.AverageRating.Value.ToString("F1")</span>
																		@if (course.TotalReviews.HasValue && course.TotalReviews > 0)
																		{
																			<span class="review-count">(@course.TotalReviews reviews)</span>
																		}
																	}
																	else
																	{
																		<span class="no-rating">No ratings yet</span>
																	}
																</div>

																<div class="price">
																	@if (course.Cost > 0)
																	{
																		<i class="bi bi-p-circle"></i>
																		<span class="price-value">@course.Cost.ToString("N0")</span>
																	}
																	else
																	{
																		<span class="price-free">Free</span>
																	}
																</div>
															</div>

															@if (course.CreateAt.HasValue)
															{
																<div class="course-date">
																	<small class="text-muted">
																		<i class="bi bi-calendar"></i> Created @course.CreateAt.Value.ToString("MMM dd, yyyy")
																	</small>
																</div>
															}

															@* <div class="course-actions">
																<a href="/Course/Details/@course.CourseId" class="btn btn-primary btn-sm">
																	<i class="bi bi-eye"></i> View Course
																</a>
																<a href="/Course/Edit/@course.CourseId" class="btn btn-outline-secondary btn-sm">
																	<i class="bi bi-pencil"></i> Edit
																</a>
															</div> *@
														</div>
													</div>
												}
											</div>

											<!-- Pagination -->
											@if (Model.Courses.TotalPages > 1)
											{
												<nav aria-label="Course pagination" class="mt-4">
													<ul class="pagination justify-content-center">
														@if (Model.Courses.CurrentPage > 1)
														{
															<li class="page-item">
																@if (Model.IsOwnUser)
																{
																	<a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage - 1)">Previous</a>
																}
																else
																{
																	<a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage - 1)&userId=@Request.Query["userId"]">Previous</a>
																}
															</li>
														}

														@for (int i = 1; i <= Model.Courses.TotalPages; i++)
														{
															<li class="page-item @(i == Model.Courses.CurrentPage ? "active" : "")">
																@if (Model.IsOwnUser)
																{
																	<a class="page-link" href="?currentPage=@i">@i</a>
																}
																else
																{
																	<a class="page-link" href="?currentPage=@i&userId=@Request.Query["userId"]">@i</a>
																}
															</li>
														}

														@if (Model.Courses.CurrentPage < Model.Courses.TotalPages)
														{
															<li class="page-item">
																@if (Model.IsOwnUser)
																{
																	<a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage + 1)">Next</a>
																}
																else
																{
																	<a class="page-link" href="?currentPage=@(Model.Courses.CurrentPage + 1)&userId=@Request.Query["userId"]">Next</a>
																}
															</li>
														}
													</ul>
												</nav>
											}
										}
										else
										{
											<div class="no-courses-message">
												<div class="empty-state">
													<i class="bi bi-book empty-icon"></i>
													<a>No courses found</a>
													<p>You haven't created any courses yet. Start creating your first course!</p>
													@* <a asp-page="/Mentor/MentorPage/CreateCourse" class="btn btn-primary">
														<i class="bi bi-plus"></i> Create New Course
													</a> *@
												</div>
											</div>
										}
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const fileInput = document.getElementById('avatarFileInput');
			const newAvatarPreview = document.getElementById('newAvatarPreview');
			const newAvatarImg = document.getElementById('newAvatar');
			const updateBtn = document.getElementById('updateAvatarBtn');
			const form = document.getElementById('avatarForm');

			// File input change handler
			fileInput.addEventListener('change', function(e) {
				const file = e.target.files[0];

				if (file) {
					// Validate file type
					const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
					if (!allowedTypes.includes(file.type)) {
						alert('Only accept image files in format: JPG, JPEG, PNG, GIF.');
						fileInput.value = '';
						return;
					}

					// Validate file size (5MB)
					if (file.size > 5 * 1024 * 1024) {
					alert('Image file must not exceed 5MB.');
						fileInput.value = '';
						return;
					}

					// Show preview
					const reader = new FileReader();
					reader.onload = function(e) {
						newAvatarImg.src = e.target.result;
						newAvatarPreview.style.display = 'block';
					};
					reader.readAsDataURL(file);
				} else {
					newAvatarPreview.style.display = 'none';
				}
			});

			// Form submit handler
			form.addEventListener('submit', function(e) {
				if (!fileInput.files[0]) {
					e.preventDefault();
				alert('Please select an image file to upload.');
					return;
				}

				// Show loading state
				updateBtn.disabled = true;
			updateBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Updating...';
			});

			// Modal events
			const avatarModal = document.getElementById('avatarModal');

			avatarModal.addEventListener('hidden.bs.modal', function() {
				// Reset form when modal is closed
				fileInput.value = '';
				newAvatarPreview.style.display = 'none';
				updateBtn.disabled = false;
			updateBtn.innerHTML = '<i class="fa fa-upload"></i> Update Avatar';
			});
		});
	</script>
	<script>
		// Add smooth animations
		const observerOptions = {
			threshold: 0.1,
			rootMargin: '0px 0px -50px 0px'
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.style.opacity = '1';
					entry.target.style.transform = 'translateY(0)';
				}
			});
		}, observerOptions);

		// Apply animation to course cards
		const courseCards = document.querySelectorAll('.course-card');
		courseCards.forEach((card, index) => {
			card.style.opacity = '0';
			card.style.transform = 'translateY(20px)';
			card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
			observer.observe(card);

			// Add hover effects
			card.addEventListener('mouseenter', function() {
				this.style.transform = 'translateY(-10px) scale(1.02)';
			});

			card.addEventListener('mouseleave', function() {
				this.style.transform = 'translateY(0) scale(1)';
			});
		});

		// Animate profile detail items
		const profileItems = document.querySelectorAll('.profile-detail-item');
		profileItems.forEach(item => {
			item.style.opacity = '0';
			item.style.transform = 'translateX(-20px)';
			item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
			observer.observe(item);
		});

		// Animate certificate cards
		const certificateCards = document.querySelectorAll('.certificate-card');
		certificateCards.forEach((card, index) => {
			card.style.opacity = '0';
			card.style.transform = 'translateY(20px)';
			card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
			observer.observe(card);
		});

		// Image error handling
		document.querySelectorAll('.course-image').forEach(img => {
			img.addEventListener('error', function() {
				this.src = 'https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&h=250&fit=crop';
			});
		});

		// Course card click handler
		courseCards.forEach(card => {
			card.addEventListener('click', function(e) {
				// Don't navigate if clicking on action buttons
				if (!e.target.closest('.course-actions')) {
					const courseId = this.dataset.courseId;
					if (courseId) {
				window.location.href = `/Mentor/MentorPage/CourseDetail?courseId=${courseId}`;
					}
				}
			});
		});
	</script>

	<style>
		.empty-state{
			display: flex;
			justify-content: center;
		}
		.subscription-card {
			background-color: #2c2c2c;
			border-radius: 12px;
		}

		.upgrade-card {
			background: linear-gradient(135deg, #636363 0%, #1c76c2 100%);
			border-radius: 12px;
			transition: transform 0.2s ease-in-out;
		}

			.upgrade-card:hover {
				transform: scale(1.03);
			}

		.edit-icon {
			font-size: 1.25rem;
			color: #000000; 
			cursor: pointer;
			transition: color 0.2s ease, transform 0.2s ease;
		}

			.edit-icon:hover {
				color: #0056b3; 
				transform: scale(1.1);
			}

			.edit-icon:active {
				transform: scale(0.95);
			}

		.gray-bg{
			margin-left: 0,5%;
		}

		.sidebar {
			position: sticky;
			top: 20px; /* khoảng cách từ đỉnh màn hình khi dính */
			z-index: 10;
		}

		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}

		body {
			font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
			line-height: 1.6;
			color: #333;
			background: #f5f5f5;
		}

		.container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 0 20px;
		}

		.avtar-header {
			max-width: 1200px;
			margin: 0 auto;
			padding: 0 20px;
			margin-left: 3%;
		}

		/* Profile Header */
		.profile-header {
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			padding: 40px 0;
			margin-bottom: 30px;
		}

		.profile-content {
			display: flex;
			align-items: flex-start;
			gap: 40px;
		}

		.profile-info {
			flex: 1;
		}

		.instructor-label {
			font-size: 14px;
			color: #FFFAFA;
			font-weight: 500;
			margin-bottom: 10px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.profile-name {
			/* font-size: 3rem; */
			font-size: 110%;
			font-weight: 700;
			color: black;
			margin-bottom: 10px;
			line-height: 1.2;
		}

		.profile-title {
			font-size: 1.2rem;
			color: #FFFAFA;
			margin-bottom: 20px;
			font-weight: 400;
		}

		.udemy-badge {
			background: linear-gradient(135deg, #000000 0%, #064071 100%);
			color: white;
			padding: 8px 16px;
			border-radius: 20px;
			font-size: 0.85rem;
			font-weight: 600;
			display: inline-block;
			text-decoration: none;
		}

		.profile-avatar-card {
			background: white;
			border-radius: 15px;
			padding: 20px;
			box-shadow: 0 4px 15px rgba(0,0,0,0.1);
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 10px;
			/* min-width: 200px; */
			text-align: center;
			padding: 20px;
		}

	.avatar-container {
		display: inline-block;
	}

	.edit-avatar-btn {
		position: absolute;
		bottom: 5px;
		right: 5px;
		width: 35px;
		height: 35px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		box-shadow: 0 2px 8px rgba(0,0,0,0.2);
		transition: all 0.3s ease;
	}

		.edit-avatar-btn:hover {
			transform: scale(1.1);
			box-shadow: 0 4px 12px rgba(0,0,0,0.3);
		}

	.current-avatar-preview,
	.new-avatar-preview {
		margin: 10px 0;
	}

	.modal-body {
		padding: 30px;
	}

	.form-text {
		font-size: 0.875rem;
		margin-top: 0.5rem;
	}

	.alert {
		border: none;
		border-radius: 8px;
	}

	.btn {
		border-radius: 6px;
		padding: 8px 16px;
	}

		.profile-avatar {
			width: 140px;
			height: 140px;
			border-radius: 50%;
			object-fit: cover;
			border: 3px solid #064071;
			box-shadow: 0 4px 15px rgba(0,0,0,0.1);
		}

		.social-links {
			display: flex;
			gap: 12px;
		}

		.social-link {
			width: 40px;
			height: 40px;
			border-radius: 8px;
			display: flex;
			align-items: center;
			justify-content: center;
			color: white;
			text-decoration: none;
			transition: all 0.3s ease;
			font-size: 16px;
			border: 2px solid transparent;
		}

			.social-link.facebook {
				background: #1877F2;
				border-color: #1877F2;
			}

			.social-link.linkedin {
				background: #0A66C2;
				border-color: #0A66C2;
			}

			.social-link.youtube {
				background: #FF0000;
				border-color: #FF0000;
			}

			.social-link:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0,0,0,0.2);
			}

		.profile-stats {
			display: flex;
			gap: 30px;
			margin-top: 15px;
		}

		.stat-item {
			text-align: center;
		}

		.stat-number {
			font-size: 1.5rem;
			font-weight: 700;
			color: #FFFAFA;
			display: block;
		}

		.stat-label {
			font-size: 0.9rem;
			color: #FFFAFA;
			font-weight: 500;
		}

		/* Profile Details Section */
		.profile-details-section {
			background: white;
			padding: 40px 0;
			margin-bottom: 40px;
			border-radius: 10px;
			box-shadow: 0 2px 10px rgba(0,0,0,0.05);
		}

		.profile-details-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 30px;
		}

		.profile-detail-item {
			display: flex;
			align-items: center;
			gap: 15px;
			padding: 20px;
			background: #f8f9fa;
			border-radius: 10px;
			transition: all 0.3s ease;
			border-left: 4px solid #1c76c2;
		}

			.profile-detail-item:hover {
				background: #e9ecef;
				transform: translateX(5px);
			}

		.profile-detail-icon {
			width: 45px;
			height: 45px;
			border-radius: 50%;
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			display: flex;
			align-items: center;
			justify-content: center;
			color: white;
			font-size: 18px;
			flex-shrink: 0;
		}

		.profile-detail-content {
			flex: 1;
		}

		.profile-detail-label {
			font-size: 0.85rem;
			color: #666;
			font-weight: 500;
			margin-bottom: 5px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.profile-detail-value {
			font-size: 1.1rem;
			font-weight: 600;
			color: #2c3e50;
			word-break: break-word;
		}

		/* Certificates Section Styles */
		.certificates-section {
			background: white;
			padding: 40px 0;
			margin-bottom: 40px;
			border-radius: 10px;
			box-shadow: 0 2px 10px rgba(0,0,0,0.05);
		}

		.certificates-content-wrapper {
			display: flex;
			align-items: flex-start;
			gap: 40px;
		}

		.certificates-content {
			flex: 2;
		}

		.certificates-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 20px;
			margin-bottom: 20px;
		}

		.certificate-card {
			background: #f8f9fa;
			border-radius: 12px;
			padding: 20px;
			transition: all 0.3s ease;
			border-left: 4px solid #1c76c2;
			position: relative;
			overflow: hidden;
		}

			.certificate-card:hover {
				background: #e9ecef;
				transform: translateY(-3px);
				box-shadow: 0 8px 25px rgba(0,0,0,0.1);
			}

			.certificate-card::before {
				content: '';
				position: absolute;
				top: 0;
				right: 0;
				width: 60px;
				height: 60px;
				background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
				border-radius: 0 12px 0 60px;
			}

		.certificate-icon {
			width: 50px;
			height: 50px;
			border-radius: 50%;
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			display: flex;
			align-items: center;
			justify-content: center;
			color: white;
			font-size: 20px;
			margin-bottom: 15px;
			box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
		}

		.certificate-content {
			position: relative;
			z-index: 1;
		}

		.certificate-title {
			font-size: 1.2rem;
			font-weight: 600;
			color: #2c3e50;
			margin-bottom: 8px;
			line-height: 1.3;
		}

		.certificate-issuer {
			font-size: 0.95rem;
			color: #666;
			margin-bottom: 6px;
			font-weight: 500;
		}

		.certificate-date {
			font-size: 0.85rem;
			color: #888;
			margin-bottom: 12px;
		}

		.certificate-badge {
			display: inline-block;
		}

		.badge-text {
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			color: white;
			padding: 4px 12px;
			border-radius: 15px;
			font-size: 0.75rem;
			font-weight: 600;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		/* Certificates Summary Card */
		.certificates-summary-card {
			flex: 1;
			background: linear-gradient(135deg, #1c76c2 0%, #000000 100%);
			border-radius: 15px;
			padding: 30px;
			color: white;
			box-shadow: 0 8px 25px rgba(0,0,0,0.15);
			position: sticky;
			top: 20px;
			min-width: 280px;
		}

		.summary-icon {
			width: 60px;
			height: 60px;
			border-radius: 50%;
			background: rgba(255, 255, 255, 0.2);
			display: flex;
			align-items: center;
			justify-content: center;
			color: white;
			font-size: 24px;
			margin-bottom: 20px;
			backdrop-filter: blur(10px);
		}

		.summary-title {
			font-size: 1.4rem;
			font-weight: 600;
			margin-bottom: 20px;
		}

		.summary-stats {
			display: flex;
			flex-direction: column;
			gap: 15px;
			margin-bottom: 25px;
		}

			.summary-stats .stat-item {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 10px 0;
				border-bottom: 1px solid rgba(255, 255, 255, 0.2);
			}

			.summary-stats .stat-number {
				font-size: 1.3rem;
				font-weight: 700;
			}

			.summary-stats .stat-label {
				font-size: 0.9rem;
				opacity: 0.9;
			}

		.achievement-badges {
			display: flex;
			flex-direction: column;
			gap: 10px;
		}

		.achievement-badge {
			display: flex;
			align-items: center;
			gap: 10px;
			background: rgba(255, 255, 255, 0.1);
			padding: 8px 12px;
			border-radius: 20px;
			font-size: 0.85rem;
			backdrop-filter: blur(5px);
		}

			.achievement-badge i {
				font-size: 14px;
			}

		/* Responsive Design */
		@@media (max-width: 768px) {
			.certificates-content-wrapper {
				flex-direction: column;
				gap: 30px;
			}

			.certificates-grid {
				grid-template-columns: 1fr;
			}

			.certificates-summary-card {
				position: static;
				min-width: auto;
			}
		}

		@@media (max-width: 480px) {
			.certificate-card {
				padding: 15px;
			}

			.certificate-icon {
				width: 45px;
				height: 45px;
				font-size: 18px;
			}

			.certificate-title {
				font-size: 1.1rem;
			}

			.certificates-summary-card {
				padding: 20px;
			}
		}

		/* Animations */
		@@keyframes fadeInUp {
			from {
				opacity: 0;
				transform: translateY(20px);
			}

			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.certificate-card {
			animation: fadeInUp 0.6s ease-out;
		}

			.certificate-card:nth-child(1) {
				animation-delay: 0.1s;
			}

			.certificate-card:nth-child(2) {
				animation-delay: 0.2s;
			}

			.certificate-card:nth-child(3) {
				animation-delay: 0.3s;
			}

			.certificate-card:nth-child(4) {
				animation-delay: 0.4s;
			}

			.certificate-card:nth-child(5) {
				animation-delay: 0.5s;
			}

			.certificate-card:nth-child(6) {
				animation-delay: 0.6s;
			}

		.certificates-summary-card {
			animation: fadeInUp 0.8s ease-out;
			animation-delay: 0.3s;
		}

		/* Courses Section */
		.courses-section {
			padding: 30px 0;
			background: white;
		}

		.courses-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
			gap: 30px;
			margin-top: 40px;
		}

		.course-card {
			background: white;
			border-radius: 15px;
			overflow: hidden;
			box-shadow: 0 5px 20px rgba(0,0,0,0.1);
			transition: all 0.3s ease;
			position: relative;
		}

			.course-card:hover {
				transform: translateY(-8px);
				box-shadow: 0 15px 40px rgba(0,0,0,0.15);
			}

		.course-image {
			width: 100%;
			height: 200px;
			object-fit: cover;
			position: relative;
		}

		.bestseller-badge {
			position: absolute;
			top: 15px;
			left: 15px;
			background: #ff9500;
			color: white;
			padding: 6px 12px;
			border-radius: 15px;
			font-size: 0.8rem;
			font-weight: 600;
			text-transform: uppercase;
		}

		.course-content {
			padding: 25px;
		}

		.course-title {
			font-size: 1.3rem;
			font-weight: 600;
			color: #333;
			margin-bottom: 12px;
			line-height: 1.4;
		}

		.course-description {
			color: #666;
			margin-bottom: 20px;
			line-height: 1.6;
		}

		.course-meta {
			display: flex;
			justify-content: space-between;
			align-items: center;
			font-size: 0.9rem;
		}

		.rating {
			color: #ffc107;
			display: flex;
			align-items: center;
			gap: 5px;
		}

			.rating .stars {
				display: flex;
				gap: 2px;
			}

		.price {
			font-size: 1.1rem;
			font-weight: 600;
			color: #333;
		}

		/* Responsive Design */
		@@media (max-width: 768px) {
			.profile-content {
				flex-direction: column;
				text-align: center;
				gap: 30px;
			}

			.about-content-wrapper {
				flex-direction: column;
				text-align: center;
				gap: 30px;
			}

			.profile-name {
				font-size: 2.5rem;
			}

			.profile-details-grid {
				grid-template-columns: 1fr;
			}

			.courses-grid {
				grid-template-columns: 1fr;
			}

			.container {
				padding: 0 15px;
			}
		}

		@@media (max-width: 480px) {
			.profile-name {
				font-size: 2rem;
			}

			.profile-avatar {
				width: 120px;
				height: 120px;
			}

			.about-avatar {
				width: 100px;
				height: 100px;
			}

			.social-links {
				flex-wrap: wrap;
			}

			.profile-details-grid {
				gap: 20px;
			}

			.profile-detail-item {
				padding: 15px;
			}
		}

		/* Animations */
		@@keyframes fadeInUp {
			from {
				opacity: 0;
				transform: translateY(30px);
			}

			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.course-card {
			animation: fadeInUp 0.6s ease-out;
		}

			.course-card:nth-child(1) {
				animation-delay: 0.1s;
			}

			.course-card:nth-child(2) {
				animation-delay: 0.2s;
			}

			.course-card:nth-child(3) {
				animation-delay: 0.3s;
			}

			.course-card:nth-child(4) {
				animation-delay: 0.4s;
			}

			.course-card:nth-child(5) {
				animation-delay: 0.5s;
			}

			.course-card:nth-child(6) {
				animation-delay: 0.6s;
			}

			.course-card:nth-child(7) {
				animation-delay: 0.7s;
			}

			.course-card:nth-child(8) {
				animation-delay: 0.8s;
			}

		@@keyframes slideInLeft {
			from {
				opacity: 0;
				transform: translateX(-30px);
			}

			to {
				opacity: 1;
				transform: translateX(0);
			}
		}

		.profile-detail-item {
			animation: slideInLeft 0.6s ease-out;
		}

			.profile-detail-item:nth-child(1) {
				animation-delay: 0.1s;
			}

			.profile-detail-item:nth-child(2) {
				animation-delay: 0.2s;
			}

			.profile-detail-item:nth-child(3) {
				animation-delay: 0.3s;
			}

			.profile-detail-item:nth-child(4) {
				animation-delay: 0.4s;
			}

			.profile-detail-item:nth-child(5) {
				animation-delay: 0.5s;
			}

			.profile-detail-item:nth-child(6) {
				animation-delay: 0.6s;
			}

			.profile-detail-item:nth-child(7) {
				animation-delay: 0.7s;
			}

			.profile-detail-item:nth-child(8) {
				animation-delay: 0.8s;
			}

			.profile-detail-item:nth-child(9) {
				animation-delay: 0.9s;
			}

			.profile-detail-item:nth-child(10) {
				animation-delay: 1.0s;
			}
	</style>
